/**
 * @deprecated
 */
export interface IReflectable {
    /**
     * @deprecated
     */
    readonly entries: ReflectableEntry[];
}
/**
 * @deprecated
 */
export interface ReflectableEntry {
    /**
     * @deprecated
     */
    readonly key: string;
    /**
     * @deprecated
     */
    readonly value: unknown;
}
/**
 * @deprecated
 */
export declare class Reflector {
    /**
     * @deprecated
     */
    asMap(reflectable: IReflectable): Record<string, unknown>;
}
/**
 * (deprecated) This class is here to show we can use nested classes across module boundaries.
 *
 * @deprecated
 */
export declare class NestingClass {
    private constructor();
}
/**
 * (deprecated) This class is here to show we can use nested classes across module boundaries.
 *
 * @deprecated
 */
export declare namespace NestingClass {
    /**
     * (deprecated) This class is here to show we can use nested classes across module boundaries.
     *
     * @deprecated
     */
    class NestedClass {
        /**
         * @deprecated
         */
        readonly property: string;
    }
    /**
     * (deprecated) This is a struct, nested within a class.
     *
     * Normal.
     *
     * @deprecated
     */
    interface NestedStruct {
        /**
         * @deprecated
         */
        readonly name: string;
    }
}
