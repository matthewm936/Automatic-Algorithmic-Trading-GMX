"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseFor2647 = exports.EnumFromScopedModule = exports.Operation = exports.Number = exports.NumericValue = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base = require("@scope/jsii-calc-base");
/**
 * (deprecated) Abstract class which represents a numeric value.
 *
 * @deprecated
 */
class NumericValue extends base.Base {
    /**
     * (deprecated) String representation of the value.
     *
     * @deprecated
     */
    toString() {
        return this.value.toString();
    }
}
exports.NumericValue = NumericValue;
_a = JSII_RTTI_SYMBOL_1;
NumericValue[_a] = { fqn: "@scope/jsii-calc-lib.NumericValue", version: "0.0.0" };
/**
 * (deprecated) Represents a concrete number.
 *
 * @deprecated
 */
class Number extends NumericValue {
    /**
     * (deprecated) Creates a Number object.
     *
     * @param value The number.
     * @deprecated
     */
    constructor(value) {
        super();
        this.value = value;
    }
    /**
     * (deprecated) The number multiplied by 2.
     *
     * @deprecated
     */
    get doubleValue() {
        return 2 * this.value;
    }
}
exports.Number = Number;
_b = JSII_RTTI_SYMBOL_1;
Number[_b] = { fqn: "@scope/jsii-calc-lib.Number", version: "0.0.0" };
/**
 * (deprecated) Represents an operation on values.
 *
 * @deprecated
 */
class Operation extends NumericValue {
}
exports.Operation = Operation;
_c = JSII_RTTI_SYMBOL_1;
Operation[_c] = { fqn: "@scope/jsii-calc-lib.Operation", version: "0.0.0" };
/**
 * (deprecated) Check that enums from \@scoped packages can be references.
 *
 * See awslabs/jsii#138
 *
 * @deprecated
 */
var EnumFromScopedModule;
(function (EnumFromScopedModule) {
    EnumFromScopedModule[EnumFromScopedModule["VALUE1"] = 0] = "VALUE1";
    EnumFromScopedModule[EnumFromScopedModule["VALUE2"] = 1] = "VALUE2";
})(EnumFromScopedModule = exports.EnumFromScopedModule || (exports.EnumFromScopedModule = {}));
/**
 * (deprecated) A base class for testing #2647.
 *
 * The method `foo` has a parameter that uses a type
 * from a dependent module. Since Go "reimplments" this method, it will also need
 * to include an "import" statement for the calc-base module.
 *
 * @see https://github.com/aws/jsii/issues/2647
 * @deprecated
 */
class BaseFor2647 {
    /**
     * @deprecated
     */
    constructor(very) {
        very.hey();
    }
    /**
     * @deprecated
     */
    foo(obj) {
        obj.bar();
    }
}
exports.BaseFor2647 = BaseFor2647;
_d = JSII_RTTI_SYMBOL_1;
BaseFor2647[_d] = { fqn: "@scope/jsii-calc-lib.BaseFor2647", version: "0.0.0" };
exports.submodule = require("./submodule");
__exportStar(require("./duplicate-inherited-prop"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQThDOzs7Ozs7QUFJOUMsTUFBc0IsWUFBYSxTQUFRLElBQUksQ0FBQyxJQUFJOzs7Ozs7SUFLM0MsUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDOztBQVBILG9DQVFDOzs7Ozs7OztBQVFELE1BQWEsTUFBTyxTQUFRLFlBQVk7Ozs7Ozs7SUFFdEMsWUFBbUMsS0FBYTtRQUM5QyxLQUFLLEVBQUUsQ0FBQztRQUR5QixVQUFLLEdBQUwsS0FBSyxDQUFRO0lBRWhELENBQUM7Ozs7OztJQUdELElBQVcsV0FBVztRQUNwQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7O0FBVEgsd0JBVUM7Ozs7Ozs7O0FBR0QsTUFBc0IsU0FBVSxTQUFRLFlBQVk7O0FBQXBELDhCQUVDOzs7Ozs7Ozs7O0FBMkJELElBQVksb0JBR1g7QUFIRCxXQUFZLG9CQUFvQjtJQUM5QixtRUFBTSxDQUFBO0lBQ04sbUVBQU0sQ0FBQTtBQUNSLENBQUMsRUFIVyxvQkFBb0IsR0FBcEIsNEJBQW9CLEtBQXBCLDRCQUFvQixRQUcvQjs7Ozs7Ozs7Ozs7QUFRRCxNQUFhLFdBQVc7Ozs7SUFDdEIsWUFBbUIsSUFBVTtRQUMzQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDYixDQUFDOzs7O0lBRU0sR0FBRyxDQUFDLEdBQXdCO1FBQ2pDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNaLENBQUM7O0FBUEgsa0NBUUM7OztBQUVELDJDQUF5QztBQUN6Qyw2REFBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJ0BzY29wZS9qc2lpLWNhbGMtYmFzZSc7XG5pbXBvcnQgeyBWZXJ5IH0gZnJvbSAnQHNjb3BlL2pzaWktY2FsYy1iYXNlLW9mLWJhc2UnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE51bWVyaWNWYWx1ZSBleHRlbmRzIGJhc2UuQmFzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHZhbHVlOiBudW1iZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIElEb3VibGFibGUge1xuICByZWFkb25seSBkb3VibGVWYWx1ZTogbnVtYmVyO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgTnVtYmVyIGV4dGVuZHMgTnVtZXJpY1ZhbHVlIGltcGxlbWVudHMgSURvdWJsYWJsZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHZhbHVlOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBnZXQgZG91YmxlVmFsdWUoKSB7XG4gICAgcmV0dXJuIDIgKiB0aGlzLnZhbHVlO1xuICB9XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE9wZXJhdGlvbiBleHRlbmRzIE51bWVyaWNWYWx1ZSB7XG4gIHB1YmxpYyBhYnN0cmFjdCB0b1N0cmluZygpOiBzdHJpbmc7XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIElGcmllbmRseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgaGVsbG8oKTogc3RyaW5nO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGludGVyZmFjZSBNeUZpcnN0U3RydWN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgYXN0cmluZzogc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGFudW1iZXI6IG51bWJlcjtcbiAgcmVhZG9ubHkgZmlyc3RPcHRpb25hbD86IHN0cmluZ1tdO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdFdpdGhPbmx5T3B0aW9uYWxzIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBvcHRpb25hbDE/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IG9wdGlvbmFsMj86IG51bWJlcjtcbiAgcmVhZG9ubHkgb3B0aW9uYWwzPzogYm9vbGVhbjtcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgZW51bSBFbnVtRnJvbVNjb3BlZE1vZHVsZSB7XG4gIFZBTFVFMSxcbiAgVkFMVUUyLFxufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGludGVyZmFjZSBJVGhyZWVMZXZlbHNJbnRlcmZhY2UgZXh0ZW5kcyBiYXNlLklCYXNlSW50ZXJmYWNlIHtcbiAgYmF6KCk6IHZvaWQ7XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgQmFzZUZvcjI2NDcge1xuICBwdWJsaWMgY29uc3RydWN0b3IodmVyeTogVmVyeSkge1xuICAgIHZlcnkuaGV5KCk7XG4gIH1cblxuICBwdWJsaWMgZm9vKG9iajogYmFzZS5JQmFzZUludGVyZmFjZSk6IHZvaWQge1xuICAgIG9iai5iYXIoKTtcbiAgfVxufVxuXG5leHBvcnQgKiBhcyBzdWJtb2R1bGUgZnJvbSAnLi9zdWJtb2R1bGUnO1xuZXhwb3J0ICogZnJvbSAnLi9kdXBsaWNhdGUtaW5oZXJpdGVkLXByb3AnO1xuIl19