import * as base from '@scope/jsii-calc-base';
import { Very } from '@scope/jsii-calc-base-of-base';
/**
 * (deprecated) Abstract class which represents a numeric value.
 *
 * @deprecated
 */
export declare abstract class NumericValue extends base.Base {
    /**
     * (deprecated) The value.
     *
     * @deprecated
     */
    abstract readonly value: number;
    /**
     * (deprecated) String representation of the value.
     *
     * @deprecated
     */
    toString(): string;
}
/**
 * (deprecated) The general contract for a concrete number.
 *
 * @deprecated
 */
export interface IDoublable {
    /**
     * @deprecated
     */
    readonly doubleValue: number;
}
/**
 * (deprecated) Represents a concrete number.
 *
 * @deprecated
 */
export declare class Number extends NumericValue implements IDoublable {
    readonly value: number;
    /**
     * (deprecated) Creates a Number object.
     *
     * @param value The number.
     * @deprecated
     */
    constructor(value: number);
    /**
     * (deprecated) The number multiplied by 2.
     *
     * @deprecated
     */
    get doubleValue(): number;
}
/**
 * (deprecated) Represents an operation on values.
 *
 * @deprecated
 */
export declare abstract class Operation extends NumericValue {
    /**
     * (deprecated) String representation of the value.
     *
     * @deprecated
     */
    abstract toString(): string;
}
/**
 * (deprecated) Applies to classes that are considered friendly.
 *
 * These classes can be greeted with
 * a "hello" or "goodbye" blessing and they will respond back in a fun and friendly manner.
 *
 * @deprecated
 */
export interface IFriendly {
    /**
     * (deprecated) Say hello!
     *
     * @deprecated
     */
    hello(): string;
}
/**
 * (deprecated) This is the first struct we have created in jsii.
 *
 * @deprecated
 */
export interface MyFirstStruct {
    /**
     * (deprecated) A string value.
     *
     * @deprecated
     */
    readonly astring: string;
    /**
     * (deprecated) An awesome number value.
     *
     * @deprecated
     */
    readonly anumber: number;
    /**
     * @deprecated
     */
    readonly firstOptional?: string[];
}
/**
 * (deprecated) This is a struct with only optional properties.
 *
 * @deprecated
 */
export interface StructWithOnlyOptionals {
    /**
     * (deprecated) The first optional!
     *
     * @deprecated
     */
    readonly optional1?: string;
    /**
     * @deprecated
     */
    readonly optional2?: number;
    /**
     * @deprecated
     */
    readonly optional3?: boolean;
}
/**
 * (deprecated) Check that enums from \@scoped packages can be references.
 *
 * See awslabs/jsii#138
 *
 * @deprecated
 */
export declare enum EnumFromScopedModule {
    /**
     * @deprecated
     */
    VALUE1 = 0,
    /**
     * @deprecated
     */
    VALUE2 = 1
}
/**
 * (deprecated) Interface that inherits from packages 2 levels up the tree.
 *
 * Their presence validates that .NET/Java/jsii-reflect can track all fields
 * far enough up the tree.
 *
 * @deprecated
 */
export interface IThreeLevelsInterface extends base.IBaseInterface {
    /**
     * @deprecated
     */
    baz(): void;
}
/**
 * (deprecated) A base class for testing #2647.
 *
 * The method `foo` has a parameter that uses a type
 * from a dependent module. Since Go "reimplments" this method, it will also need
 * to include an "import" statement for the calc-base module.
 *
 * @see https://github.com/aws/jsii/issues/2647
 * @deprecated
 */
export declare class BaseFor2647 {
    /**
     * @deprecated
     */
    constructor(very: Very);
    /**
     * @deprecated
     */
    foo(obj: base.IBaseInterface): void;
}
export * as submodule from './submodule';
export * from './duplicate-inherited-prop';
