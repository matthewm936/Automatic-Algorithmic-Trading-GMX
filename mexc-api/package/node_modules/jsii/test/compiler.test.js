"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const os_1 = require("os");
const path_1 = require("path");
const compiler_1 = require("../lib/compiler");
describe(compiler_1.Compiler, () => {
    describe('generated tsconfig', () => {
        test('default is tsconfig.json', async () => {
            const sourceDir = await fs_extra_1.mkdtemp(path_1.join(os_1.tmpdir(), 'jsii-compiler-watch-mode-'));
            const compiler = new compiler_1.Compiler({
                projectInfo: _makeProjectInfo(sourceDir, 'index.d.ts'),
            });
            await compiler.emit();
            expect(await fs_extra_1.readJson(path_1.join(sourceDir, 'tsconfig.json'), 'utf-8')).toEqual(expectedTypeScriptConfig());
        });
        test('file name can be customized', async () => {
            const sourceDir = await fs_extra_1.mkdtemp(path_1.join(os_1.tmpdir(), 'jsii-compiler-watch-mode-'));
            const compiler = new compiler_1.Compiler({
                projectInfo: _makeProjectInfo(sourceDir, 'index.d.ts'),
                generateTypeScriptConfig: 'tsconfig.jsii.json',
            });
            await compiler.emit();
            expect(await fs_extra_1.readJson(path_1.join(sourceDir, 'tsconfig.jsii.json'), 'utf-8')).toEqual(expectedTypeScriptConfig());
        });
    });
    test('"watch" mode', async () => {
        // This can be a little slow, allowing 15 seconds maximum here (default is 5 seconds)
        jest.setTimeout(15000);
        const sourceDir = await fs_extra_1.mkdtemp(path_1.join(os_1.tmpdir(), 'jsii-compiler-watch-mode-'));
        try {
            await fs_extra_1.writeFile(path_1.join(sourceDir, 'index.ts'), 'export class MarkerA {}');
            // Intentionally using lower case name - it should be case-insensitive
            await fs_extra_1.writeFile(path_1.join(sourceDir, 'readme.md'), '# Test Package');
            const compiler = new compiler_1.Compiler({
                projectInfo: _makeProjectInfo(sourceDir, 'index.d.ts'),
                failOnWarnings: true,
                projectReferences: false,
            });
            let firstCompilation = true;
            let onWatchClosed;
            let onWatchFailed;
            const watchClosed = new Promise((ok, ko) => {
                onWatchClosed = ok;
                onWatchFailed = ko;
            });
            const watch = await compiler.watch({
                nonBlocking: true,
                // Ignore diagnostics reporting (not to pollute test console output)
                reportDiagnostics: () => null,
                // Ignore watch status reporting (not to pollute test console output)
                reportWatchStatus: () => null,
                // Verify everything goes according to plan
                compilationComplete: async (emitResult) => {
                    try {
                        expect(emitResult.emitSkipped).toBeFalsy();
                        const output = await fs_extra_1.readFile(path_1.join(sourceDir, '.jsii'), {
                            encoding: 'utf-8',
                        });
                        if (firstCompilation) {
                            firstCompilation = false;
                            expect(output).toContain('"MarkerA"');
                            await fs_extra_1.writeFile(path_1.join(sourceDir, 'index.ts'), 'export class MarkerB {}');
                            return;
                        }
                        expect(output).toContain('"MarkerB"');
                        watch.close();
                        // Tell the test suite we're done here!
                        onWatchClosed();
                    }
                    catch (e) {
                        watch.close();
                        onWatchFailed(e);
                    }
                },
            });
            await watchClosed;
        }
        finally {
            await fs_extra_1.remove(sourceDir);
        }
    });
});
function _makeProjectInfo(sourceDir, types) {
    return {
        projectRoot: sourceDir,
        packageJson: undefined,
        types,
        main: types.replace(/(?:\.d)?\.ts(x?)/, '.js$1'),
        name: 'jsii',
        version: '0.0.1',
        jsiiVersionFormat: 'short',
        license: 'Apache-2.0',
        author: { name: 'John Doe', roles: ['author'] },
        repository: { type: 'git', url: 'https://github.com/aws/jsii.git' },
        dependencies: {},
        peerDependencies: {},
        dependencyClosure: [],
        bundleDependencies: {},
        targets: {},
        excludeTypescript: [],
    };
}
function expectedTypeScriptConfig() {
    return {
        _generated_by_jsii_: 'Generated by jsii - safe to delete, and ideally should be in .gitignore',
        compilerOptions: {
            alwaysStrict: true,
            charset: 'utf8',
            composite: false,
            declaration: true,
            experimentalDecorators: true,
            incremental: true,
            inlineSourceMap: true,
            inlineSources: true,
            lib: ['es2019'],
            module: 'CommonJS',
            newLine: 'lf',
            noEmitOnError: true,
            noFallthroughCasesInSwitch: true,
            noImplicitAny: true,
            noImplicitReturns: true,
            noImplicitThis: true,
            noUnusedLocals: true,
            noUnusedParameters: true,
            resolveJsonModule: true,
            strict: true,
            strictNullChecks: true,
            strictPropertyInitialization: true,
            stripInternal: false,
            target: 'ES2019',
            tsBuildInfoFile: 'tsconfig.tsbuildinfo',
        },
        exclude: ['node_modules'],
        include: [path_1.join('**', '*.ts')],
    };
}
//# sourceMappingURL=data:application/json;base64,