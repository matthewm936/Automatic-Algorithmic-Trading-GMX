"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const spec = require("@jsii/spec");
const spec_1 = require("@jsii/spec");
const lib_1 = require("../lib");
const docs_1 = require("../lib/docs");
jest.setTimeout(60000);
// ----------------------------------------------------------------------
test('extract summary line from doc block, ends with a period', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * Hello this is the documentation for this class
     */
    export class Foo {
      public bar() { }
    }
  `);
    expect(assembly.types['testpkg.Foo'].docs).toEqual({
        summary: 'Hello this is the documentation for this class.',
    });
});
// ----------------------------------------------------------------------
test('extract remarks from whitespace-separated doc block', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * Hello this is the documentation for this class.
     *
     * Here are some more details about it.
     *
     * It looks pretty good, doesn't it?
     */
    export class Foo {
      public bar() { }
    }
  `);
    expect(assembly.types['testpkg.Foo'].docs.remarks).toBe("Here are some more details about it.\n\nIt looks pretty good, doesn't it?");
});
// ----------------------------------------------------------------------
test('separate long doc comment into summary and remarks', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * Lots of people enjoy writing very long captions here. I think it's because they
     * copy/paste them out of CloudFormation, which has a tendency to just have one
     * doc block per API item and no structural separation.
     */
    export class Foo {
      public bar() { }
    }
  `);
    expect(assembly.types['testpkg.Foo'].docs).toEqual({
        summary: 'Lots of people enjoy writing very long captions here.',
        remarks: "I think it's because they\ncopy/paste them out of CloudFormation, which has a tendency to just have one\n" +
            'doc block per API item and no structural separation.',
    });
});
// ----------------------------------------------------------------------
test('separate non-space but newline terminated docs into summary&remarks', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * Lots of people enjoy writing very long captions here.
     * I think it's because they copy/paste them out of CloudFormation,
     * which has a tendency to just have one
     * doc block per API item and no structural separation.
     */
    export class Foo {
      public bar() { }
    }
  `);
    expect(assembly.types['testpkg.Foo'].docs).toEqual({
        summary: 'Lots of people enjoy writing very long captions here.',
        remarks: "I think it's because they copy/paste them out of CloudFormation,\nwhich has a tendency to just have one\n" +
            'doc block per API item and no structural separation.',
    });
});
// ----------------------------------------------------------------------
test('dont add period to summary that ends in exclamation mark', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * I'm happy about this class!
     */
    export class Foo {
      public bar() { }
    }
  `);
    expect(assembly.types['testpkg.Foo'].docs).toEqual({
        summary: "I'm happy about this class!",
    });
});
// ----------------------------------------------------------------------
test('parse method docs', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    export class Foo {
      /**
       * Do the foo
       */
      public bar(arg: string) { Array.isArray(arg); }
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.methods[0].docs).toEqual({
        summary: 'Do the foo.',
    });
});
// ----------------------------------------------------------------------
test('associate parameter comments with right parameter', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    export class Foo {
      /**
       * Do the foo
       *
       * @param arg First argument is best argument
       */
      public bar(arg: string) { Array.isArray(arg); }
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.methods[0].parameters[0].docs).toEqual({
        summary: 'First argument is best argument.',
    });
});
// ----------------------------------------------------------------------
test('read example', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    export class Foo {
      /**
       * Do the foo
       *
       * @example
       *
       * // Example of fooing it up:
       * new Foo().bar();
       */
      public bar() {}
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.methods[0].docs.example).toBe('// Example of fooing it up:\n' + 'new Foo().bar();');
});
// ----------------------------------------------------------------------
test('read default value', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    export interface Foo {
      /**
       * The foo we're talking about
       *
       * @default Some foo
       */
      readonly foo?: string;
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.properties[0].docs.default).toBe('Some foo');
});
// ----------------------------------------------------------------------
test('read "see" annotation', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * @see http://lmgtfy.com/
     */
    export class Foo {
    }
  `);
    expect(assembly.types['testpkg.Foo'].docs.see).toBe('http://lmgtfy.com/');
});
// ----------------------------------------------------------------------
test('read "returns" annotation', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    export class Foo {
      /**
       * Do the foo
       *
       * @returns Nothing, why would it?
       */
      public bar(arg: string) { Array.isArray(arg); }
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.methods[0].docs.returns).toBe('Nothing, why would it?');
});
// ----------------------------------------------------------------------
test('can haz deprecated', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    export class Foo {
      /**
       * Do the foo
       *
       * @deprecated These days we do the bar
       */
      public bar(arg: string) { Array.isArray(arg); }
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.methods[0].docs.deprecated).toBe('These days we do the bar');
});
// ----------------------------------------------------------------------
test('can mark stable', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * Rock solid Foo
     *
     * @stable
     */
    export class Foo {
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.docs.stability).toBe(spec.Stability.Stable);
});
// ----------------------------------------------------------------------
test('can mark experimental', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * Slightly less solid Foo
     *
     * @experimental
     */
    export class Foo {
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.docs.stability).toBe(spec.Stability.Experimental);
});
// ----------------------------------------------------------------------
test('can mark external', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * @stability external
     */
    export class Foo {
      public floop() {
        Array.isArray(3);
      }
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    const method = classType.methods.find((m) => m.name === 'floop');
    expect(classType.docs.stability).toBe(spec.Stability.External);
    expect(method.docs.stability).toBe(spec.Stability.External);
});
// ----------------------------------------------------------------------
test('can mark subclassable', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * Become this Foo
     *
     * @subclassable
     */
    export class Foo {
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.docs.subclassable).toBeTruthy();
});
// ----------------------------------------------------------------------
test('can add arbitrary tags', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * @boop
     */
    export class Foo {
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.docs.custom).toEqual({ boop: 'true' });
});
// ----------------------------------------------------------------------
test('stability is inherited from parent type', async () => {
    const stabilities = [
        ['@deprecated Not good no more', spec_1.Stability.Deprecated],
        ['@experimental', spec_1.Stability.Experimental],
        ['@stable', spec_1.Stability.Stable],
    ];
    for (const [tag, stability] of stabilities) {
        // eslint-disable-next-line no-await-in-loop
        const assembly = await lib_1.sourceToAssemblyHelper(`
      /**
       * ${tag}
       */
      export class Foo {
        constructor() {
          Array.isArray(3);
        }

        public bar() {
          Array.isArray(3);
        }
      }
    `);
        /* eslint-enable no-await-in-loop */
        const classType = assembly.types['testpkg.Foo'];
        const initializer = classType.initializer;
        const method = classType.methods.find((m) => m.name === 'bar');
        expect(classType.docs.stability).toBe(stability);
        expect(initializer.docs.stability).toBe(stability);
        expect(method.docs.stability).toBe(stability);
    }
});
// ----------------------------------------------------------------------
test('@example can contain @ sign', async () => {
    const assembly = await lib_1.sourceToAssemblyHelper(`
    /**
     * An IAM role to associate with the instance profile assigned to this Auto Scaling Group.
     *
     * @example
     *
     * import * as x from '@banana';
     */
    export class Foo {
    }
  `);
    const classType = assembly.types['testpkg.Foo'];
    expect(classType.docs.example).toBe("import * as x from '@banana';");
});
// ----------------------------------------------------------------------
test('@experimental status is reflected in generated docstring', async () => {
    const result = await lib_1.compileJsiiForTest(`
    /**
     * Here is a fresh class
     *
     * @experimental
     */
    export class Foo {
    }
  `);
    expect(result.files['index.js']).toContain(lines('/**', ' * (experimental) Here is a fresh class.', ' *', ' * @experimental', ' */', 'class Foo {', '}'));
    expect(result.files['index.d.ts']).toContain(lines('/**', ' * (experimental) Here is a fresh class.', ' *', ' * @experimental', ' */', 'export declare class Foo {', '}'));
});
// ----------------------------------------------------------------------
test('@deprecated status is reflected in generated docstring', async () => {
    const result = await lib_1.compileJsiiForTest(`
    /**
     * Here is an old class
     *
     * @deprecated Use something else
     */
    export class Fogey {
    }
  `);
    expect(result.files['index.js']).toContain(lines('/**', ' * (deprecated) Here is an old class.', ' *', ' * @deprecated Use something else', ' */', 'class Fogey {', '}'));
    expect(result.files['index.d.ts']).toContain(lines('/**', ' * (deprecated) Here is an old class.', ' *', ' * @deprecated Use something else', ' */', 'export declare class Fogey {', '}'));
});
// ----------------------------------------------------------------------
test('Rendering jsii docs back to a doc comment', () => {
    expect(docs_1.renderSymbolDocumentation({
        summary: 'This is the summary',
        remarks: 'You can use this\nor not, as you see fit.',
        default: 'thas a default value',
        see: 'https://some.url/',
        subclassable: true,
        returns: 'A value',
        example: 'print("a thing");',
        custom: {
            sing: 'whenyourewinning',
        },
    })).toEqual(lines('This is the summary', '', 'You can use this', 'or not, as you see fit.', '', '@returns A value', '@default thas a default value', '@see https://some.url/', '@subclassable', '@sing whenyourewinning', '@example', '', 'print("a thing");'));
});
// ----------------------------------------------------------------------
function lines(...ls) {
    return indented(0, ...ls);
}
function indented(indent, ...lines) {
    const prefix = ' '.repeat(indent);
    return lines.map((l) => `${prefix}${l}`).join('\n');
}
//# sourceMappingURL=data:application/json;base64,