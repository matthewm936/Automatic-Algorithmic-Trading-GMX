"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const literate_1 = require("../lib/literate");
test('simple file gets wrapped in tags', () => {
    assertRendersTo(['const x = 1;', 'console.log(x);'], ['```ts', 'const x = 1;', 'console.log(x);', '```']);
});
test('can switch on and off', () => {
    assertRendersTo([
        'const x = 1;',
        '/// !show',
        'console.log(x);',
        '/// !hide',
        'console.log("It worked")',
    ], ['```ts', 'console.log(x);', '```']);
});
test('common whitespace in a single block gets stripped', () => {
    assertRendersTo([
        'const x = 1;',
        'if (x) {',
        '    /// !show',
        '    console.log(x);',
        '    /// !hide',
        '}',
    ], ['```ts', 'console.log(x);', '```']);
});
test('inline markdown with indentation still gets rendered', () => {
    assertRendersTo([
        'const x = 1;',
        'if (x) {',
        '    /// This is how we render x',
        '    console.log(x);',
        '}',
    ], [
        '```ts',
        'const x = 1;',
        'if (x) {',
        '```',
        'This is how we render x',
        '```ts',
        '    console.log(x);',
        '}',
        '```',
    ]);
});
test('subsequent code blocks get joined', () => {
    assertRendersTo([
        '/// !show',
        'let x = 1;',
        '/// !hide',
        'x += 1;',
        '/// !show',
        'console.log(x);',
        '/// !hide',
    ], ['```ts', 'let x = 1;', 'console.log(x);', '```']);
});
test('can add inline MarkDown', () => {
    assertRendersTo(['const x = 1;', '/// This is how we print x', 'console.log(x);'], [
        '```ts',
        'const x = 1;',
        '```',
        'This is how we print x',
        '```ts',
        'console.log(x);',
        '```',
    ]);
});
test('can do example inclusion', async () => {
    const inputMarkDown = [
        'This is a preamble',
        '[included here](test/something.lit.ts)',
        'This is a postamble',
    ];
    const fakeLoader = (fileName) => {
        expect(fileName).toBe('test/something.lit.ts');
        return ['const x = 1;', '/// This is how we print x', 'console.log(x);'];
    };
    const rendered = await literate_1.includeAndRenderExamples(inputMarkDown, fakeLoader);
    expect(rendered).toEqual([
        'This is a preamble',
        '```ts lit=test/something.lit.ts',
        'const x = 1;',
        '```',
        'This is how we print x',
        '```ts lit=test/something.lit.ts',
        'console.log(x);',
        '```',
        'This is a postamble',
    ]);
});
function assertRendersTo(source, expected) {
    const rendered = literate_1.typescriptSourceToMarkdown(source, []);
    expect(expected).toEqual(rendered);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl0ZXJhdGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpdGVyYXRlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FHeUI7QUFFekIsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtJQUM1QyxlQUFlLENBQ2IsQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUMsRUFDbkMsQ0FBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUNwRCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLGVBQWUsQ0FDYjtRQUNFLGNBQWM7UUFDZCxXQUFXO1FBQ1gsaUJBQWlCO1FBQ2pCLFdBQVc7UUFDWCwwQkFBMEI7S0FDM0IsRUFDRCxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FDcEMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtJQUM3RCxlQUFlLENBQ2I7UUFDRSxjQUFjO1FBQ2QsVUFBVTtRQUNWLGVBQWU7UUFDZixxQkFBcUI7UUFDckIsZUFBZTtRQUNmLEdBQUc7S0FDSixFQUNELENBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUNwQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO0lBQ2hFLGVBQWUsQ0FDYjtRQUNFLGNBQWM7UUFDZCxVQUFVO1FBQ1YsaUNBQWlDO1FBQ2pDLHFCQUFxQjtRQUNyQixHQUFHO0tBQ0osRUFDRDtRQUNFLE9BQU87UUFDUCxjQUFjO1FBQ2QsVUFBVTtRQUNWLEtBQUs7UUFDTCx5QkFBeUI7UUFDekIsT0FBTztRQUNQLHFCQUFxQjtRQUNyQixHQUFHO1FBQ0gsS0FBSztLQUNOLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtJQUM3QyxlQUFlLENBQ2I7UUFDRSxXQUFXO1FBQ1gsWUFBWTtRQUNaLFdBQVc7UUFDWCxTQUFTO1FBQ1QsV0FBVztRQUNYLGlCQUFpQjtRQUNqQixXQUFXO0tBQ1osRUFDRCxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQ2xELENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsZUFBZSxDQUNiLENBQUMsY0FBYyxFQUFFLDRCQUE0QixFQUFFLGlCQUFpQixDQUFDLEVBQ2pFO1FBQ0UsT0FBTztRQUNQLGNBQWM7UUFDZCxLQUFLO1FBQ0wsd0JBQXdCO1FBQ3hCLE9BQU87UUFDUCxpQkFBaUI7UUFDakIsS0FBSztLQUNOLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzFDLE1BQU0sYUFBYSxHQUFHO1FBQ3BCLG9CQUFvQjtRQUNwQix3Q0FBd0M7UUFDeEMscUJBQXFCO0tBQ3RCLENBQUM7SUFFRixNQUFNLFVBQVUsR0FBRyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtRQUN0QyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDL0MsT0FBTyxDQUFDLGNBQWMsRUFBRSw0QkFBNEIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNFLENBQUMsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sbUNBQXdCLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDdkIsb0JBQW9CO1FBQ3BCLGlDQUFpQztRQUNqQyxjQUFjO1FBQ2QsS0FBSztRQUNMLHdCQUF3QjtRQUN4QixpQ0FBaUM7UUFDakMsaUJBQWlCO1FBQ2pCLEtBQUs7UUFDTCxxQkFBcUI7S0FDdEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLGVBQWUsQ0FBQyxNQUFnQixFQUFFLFFBQWtCO0lBQzNELE1BQU0sUUFBUSxHQUFHLHFDQUEwQixDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBpbmNsdWRlQW5kUmVuZGVyRXhhbXBsZXMsXG4gIHR5cGVzY3JpcHRTb3VyY2VUb01hcmtkb3duLFxufSBmcm9tICcuLi9saWIvbGl0ZXJhdGUnO1xuXG50ZXN0KCdzaW1wbGUgZmlsZSBnZXRzIHdyYXBwZWQgaW4gdGFncycsICgpID0+IHtcbiAgYXNzZXJ0UmVuZGVyc1RvKFxuICAgIFsnY29uc3QgeCA9IDE7JywgJ2NvbnNvbGUubG9nKHgpOyddLFxuICAgIFsnYGBgdHMnLCAnY29uc3QgeCA9IDE7JywgJ2NvbnNvbGUubG9nKHgpOycsICdgYGAnXSxcbiAgKTtcbn0pO1xuXG50ZXN0KCdjYW4gc3dpdGNoIG9uIGFuZCBvZmYnLCAoKSA9PiB7XG4gIGFzc2VydFJlbmRlcnNUbyhcbiAgICBbXG4gICAgICAnY29uc3QgeCA9IDE7JyxcbiAgICAgICcvLy8gIXNob3cnLFxuICAgICAgJ2NvbnNvbGUubG9nKHgpOycsXG4gICAgICAnLy8vICFoaWRlJyxcbiAgICAgICdjb25zb2xlLmxvZyhcIkl0IHdvcmtlZFwiKScsXG4gICAgXSxcbiAgICBbJ2BgYHRzJywgJ2NvbnNvbGUubG9nKHgpOycsICdgYGAnXSxcbiAgKTtcbn0pO1xuXG50ZXN0KCdjb21tb24gd2hpdGVzcGFjZSBpbiBhIHNpbmdsZSBibG9jayBnZXRzIHN0cmlwcGVkJywgKCkgPT4ge1xuICBhc3NlcnRSZW5kZXJzVG8oXG4gICAgW1xuICAgICAgJ2NvbnN0IHggPSAxOycsXG4gICAgICAnaWYgKHgpIHsnLFxuICAgICAgJyAgICAvLy8gIXNob3cnLFxuICAgICAgJyAgICBjb25zb2xlLmxvZyh4KTsnLFxuICAgICAgJyAgICAvLy8gIWhpZGUnLFxuICAgICAgJ30nLFxuICAgIF0sXG4gICAgWydgYGB0cycsICdjb25zb2xlLmxvZyh4KTsnLCAnYGBgJ10sXG4gICk7XG59KTtcblxudGVzdCgnaW5saW5lIG1hcmtkb3duIHdpdGggaW5kZW50YXRpb24gc3RpbGwgZ2V0cyByZW5kZXJlZCcsICgpID0+IHtcbiAgYXNzZXJ0UmVuZGVyc1RvKFxuICAgIFtcbiAgICAgICdjb25zdCB4ID0gMTsnLFxuICAgICAgJ2lmICh4KSB7JyxcbiAgICAgICcgICAgLy8vIFRoaXMgaXMgaG93IHdlIHJlbmRlciB4JyxcbiAgICAgICcgICAgY29uc29sZS5sb2coeCk7JyxcbiAgICAgICd9JyxcbiAgICBdLFxuICAgIFtcbiAgICAgICdgYGB0cycsXG4gICAgICAnY29uc3QgeCA9IDE7JyxcbiAgICAgICdpZiAoeCkgeycsXG4gICAgICAnYGBgJyxcbiAgICAgICdUaGlzIGlzIGhvdyB3ZSByZW5kZXIgeCcsXG4gICAgICAnYGBgdHMnLFxuICAgICAgJyAgICBjb25zb2xlLmxvZyh4KTsnLFxuICAgICAgJ30nLFxuICAgICAgJ2BgYCcsXG4gICAgXSxcbiAgKTtcbn0pO1xuXG50ZXN0KCdzdWJzZXF1ZW50IGNvZGUgYmxvY2tzIGdldCBqb2luZWQnLCAoKSA9PiB7XG4gIGFzc2VydFJlbmRlcnNUbyhcbiAgICBbXG4gICAgICAnLy8vICFzaG93JyxcbiAgICAgICdsZXQgeCA9IDE7JyxcbiAgICAgICcvLy8gIWhpZGUnLFxuICAgICAgJ3ggKz0gMTsnLFxuICAgICAgJy8vLyAhc2hvdycsXG4gICAgICAnY29uc29sZS5sb2coeCk7JyxcbiAgICAgICcvLy8gIWhpZGUnLFxuICAgIF0sXG4gICAgWydgYGB0cycsICdsZXQgeCA9IDE7JywgJ2NvbnNvbGUubG9nKHgpOycsICdgYGAnXSxcbiAgKTtcbn0pO1xuXG50ZXN0KCdjYW4gYWRkIGlubGluZSBNYXJrRG93bicsICgpID0+IHtcbiAgYXNzZXJ0UmVuZGVyc1RvKFxuICAgIFsnY29uc3QgeCA9IDE7JywgJy8vLyBUaGlzIGlzIGhvdyB3ZSBwcmludCB4JywgJ2NvbnNvbGUubG9nKHgpOyddLFxuICAgIFtcbiAgICAgICdgYGB0cycsXG4gICAgICAnY29uc3QgeCA9IDE7JyxcbiAgICAgICdgYGAnLFxuICAgICAgJ1RoaXMgaXMgaG93IHdlIHByaW50IHgnLFxuICAgICAgJ2BgYHRzJyxcbiAgICAgICdjb25zb2xlLmxvZyh4KTsnLFxuICAgICAgJ2BgYCcsXG4gICAgXSxcbiAgKTtcbn0pO1xuXG50ZXN0KCdjYW4gZG8gZXhhbXBsZSBpbmNsdXNpb24nLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGlucHV0TWFya0Rvd24gPSBbXG4gICAgJ1RoaXMgaXMgYSBwcmVhbWJsZScsXG4gICAgJ1tpbmNsdWRlZCBoZXJlXSh0ZXN0L3NvbWV0aGluZy5saXQudHMpJyxcbiAgICAnVGhpcyBpcyBhIHBvc3RhbWJsZScsXG4gIF07XG5cbiAgY29uc3QgZmFrZUxvYWRlciA9IChmaWxlTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgZXhwZWN0KGZpbGVOYW1lKS50b0JlKCd0ZXN0L3NvbWV0aGluZy5saXQudHMnKTtcbiAgICByZXR1cm4gWydjb25zdCB4ID0gMTsnLCAnLy8vIFRoaXMgaXMgaG93IHdlIHByaW50IHgnLCAnY29uc29sZS5sb2coeCk7J107XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyZWQgPSBhd2FpdCBpbmNsdWRlQW5kUmVuZGVyRXhhbXBsZXMoaW5wdXRNYXJrRG93biwgZmFrZUxvYWRlcik7XG5cbiAgZXhwZWN0KHJlbmRlcmVkKS50b0VxdWFsKFtcbiAgICAnVGhpcyBpcyBhIHByZWFtYmxlJyxcbiAgICAnYGBgdHMgbGl0PXRlc3Qvc29tZXRoaW5nLmxpdC50cycsXG4gICAgJ2NvbnN0IHggPSAxOycsXG4gICAgJ2BgYCcsXG4gICAgJ1RoaXMgaXMgaG93IHdlIHByaW50IHgnLFxuICAgICdgYGB0cyBsaXQ9dGVzdC9zb21ldGhpbmcubGl0LnRzJyxcbiAgICAnY29uc29sZS5sb2coeCk7JyxcbiAgICAnYGBgJyxcbiAgICAnVGhpcyBpcyBhIHBvc3RhbWJsZScsXG4gIF0pO1xufSk7XG5cbmZ1bmN0aW9uIGFzc2VydFJlbmRlcnNUbyhzb3VyY2U6IHN0cmluZ1tdLCBleHBlY3RlZDogc3RyaW5nW10pIHtcbiAgY29uc3QgcmVuZGVyZWQgPSB0eXBlc2NyaXB0U291cmNlVG9NYXJrZG93bihzb3VyY2UsIFtdKTtcbiAgZXhwZWN0KGV4cGVjdGVkKS50b0VxdWFsKHJlbmRlcmVkKTtcbn1cbiJdfQ==