"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = require("typescript");
const jsii_diagnostic_1 = require("../lib/jsii-diagnostic");
describe('jsii diagnostics', () => {
    describe('configureCategories', () => {
        beforeEach(() => {
            const code = jsii_diagnostic_1.Code.lookup(1);
            code.category = typescript_1.DiagnosticCategory.Suggestion;
        });
        test('diagnostic by name', () => {
            jsii_diagnostic_1.configureCategories({
                'metadata/package-json-missing-description': typescript_1.DiagnosticCategory.Error,
            });
            expect(jsii_diagnostic_1.Code.lookup(1).category).toEqual(typescript_1.DiagnosticCategory.Error);
        });
        test('diagnostic by code', () => {
            jsii_diagnostic_1.configureCategories({
                JSII1: typescript_1.DiagnosticCategory.Error,
            });
            expect(jsii_diagnostic_1.Code.lookup(1).category).toEqual(typescript_1.DiagnosticCategory.Error);
        });
        test('diagnostic by code zero prefixed', () => {
            jsii_diagnostic_1.configureCategories({
                JSII001: typescript_1.DiagnosticCategory.Error,
            });
            expect(jsii_diagnostic_1.Code.lookup(1).category).toEqual(typescript_1.DiagnosticCategory.Error);
        });
        test('invalid diagnostic code - NaN', () => {
            expect(() => {
                jsii_diagnostic_1.configureCategories({
                    JSIIPP: typescript_1.DiagnosticCategory.Error,
                });
            }).toThrow(/number must follow code/);
        });
        test('invalid diagnostic code - number', () => {
            expect(() => {
                jsii_diagnostic_1.configureCategories({
                    JSII77778888: typescript_1.DiagnosticCategory.Error,
                });
            }).toThrow(/Unrecognized diagnostic code/);
        });
        test('invalid diagnostic code - string', () => {
            expect(() => {
                jsii_diagnostic_1.configureCategories({
                    'invalid/does-not-exist': typescript_1.DiagnosticCategory.Error,
                });
            }).toThrow(/Unrecognized diagnostic code/);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNpaS1kaWFnbm9zdGljLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJqc2lpLWRpYWdub3N0aWMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFnRDtBQUVoRCw0REFBbUU7QUFFbkUsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxNQUFNLElBQUksR0FBRyxzQkFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLCtCQUFrQixDQUFDLFVBQVUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7WUFDOUIscUNBQW1CLENBQUM7Z0JBQ2xCLDJDQUEyQyxFQUFFLCtCQUFrQixDQUFDLEtBQUs7YUFDdEUsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLHNCQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQywrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7WUFDOUIscUNBQW1CLENBQUM7Z0JBQ2xCLEtBQUssRUFBRSwrQkFBa0IsQ0FBQyxLQUFLO2FBQ2hDLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxzQkFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsK0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1lBQzVDLHFDQUFtQixDQUFDO2dCQUNsQixPQUFPLEVBQUUsK0JBQWtCLENBQUMsS0FBSzthQUNsQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsc0JBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLCtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtZQUN6QyxNQUFNLENBQUMsR0FBRyxFQUFFO2dCQUNWLHFDQUFtQixDQUFDO29CQUNsQixNQUFNLEVBQUUsK0JBQWtCLENBQUMsS0FBSztpQkFDakMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1lBQzVDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YscUNBQW1CLENBQUM7b0JBQ2xCLFlBQVksRUFBRSwrQkFBa0IsQ0FBQyxLQUFLO2lCQUN2QyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7WUFDNUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtnQkFDVixxQ0FBbUIsQ0FBQztvQkFDbEIsd0JBQXdCLEVBQUUsK0JBQWtCLENBQUMsS0FBSztpQkFDbkQsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlhZ25vc3RpY0NhdGVnb3J5IH0gZnJvbSAndHlwZXNjcmlwdCc7XG5cbmltcG9ydCB7IENvZGUsIGNvbmZpZ3VyZUNhdGVnb3JpZXMgfSBmcm9tICcuLi9saWIvanNpaS1kaWFnbm9zdGljJztcblxuZGVzY3JpYmUoJ2pzaWkgZGlhZ25vc3RpY3MnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjb25maWd1cmVDYXRlZ29yaWVzJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IENvZGUubG9va3VwKDEpITtcbiAgICAgIGNvZGUuY2F0ZWdvcnkgPSBEaWFnbm9zdGljQ2F0ZWdvcnkuU3VnZ2VzdGlvbjtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RpYWdub3N0aWMgYnkgbmFtZScsICgpID0+IHtcbiAgICAgIGNvbmZpZ3VyZUNhdGVnb3JpZXMoe1xuICAgICAgICAnbWV0YWRhdGEvcGFja2FnZS1qc29uLW1pc3NpbmctZGVzY3JpcHRpb24nOiBEaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChDb2RlLmxvb2t1cCgxKSEuY2F0ZWdvcnkpLnRvRXF1YWwoRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RpYWdub3N0aWMgYnkgY29kZScsICgpID0+IHtcbiAgICAgIGNvbmZpZ3VyZUNhdGVnb3JpZXMoe1xuICAgICAgICBKU0lJMTogRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QoQ29kZS5sb29rdXAoMSkhLmNhdGVnb3J5KS50b0VxdWFsKERpYWdub3N0aWNDYXRlZ29yeS5FcnJvcik7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdkaWFnbm9zdGljIGJ5IGNvZGUgemVybyBwcmVmaXhlZCcsICgpID0+IHtcbiAgICAgIGNvbmZpZ3VyZUNhdGVnb3JpZXMoe1xuICAgICAgICBKU0lJMDAxOiBEaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChDb2RlLmxvb2t1cCgxKSEuY2F0ZWdvcnkpLnRvRXF1YWwoRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2ludmFsaWQgZGlhZ25vc3RpYyBjb2RlIC0gTmFOJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgY29uZmlndXJlQ2F0ZWdvcmllcyh7XG4gICAgICAgICAgSlNJSVBQOiBEaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IsXG4gICAgICAgIH0pO1xuICAgICAgfSkudG9UaHJvdygvbnVtYmVyIG11c3QgZm9sbG93IGNvZGUvKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2ludmFsaWQgZGlhZ25vc3RpYyBjb2RlIC0gbnVtYmVyJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgY29uZmlndXJlQ2F0ZWdvcmllcyh7XG4gICAgICAgICAgSlNJSTc3Nzc4ODg4OiBEaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IsXG4gICAgICAgIH0pO1xuICAgICAgfSkudG9UaHJvdygvVW5yZWNvZ25pemVkIGRpYWdub3N0aWMgY29kZS8pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnaW52YWxpZCBkaWFnbm9zdGljIGNvZGUgLSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBjb25maWd1cmVDYXRlZ29yaWVzKHtcbiAgICAgICAgICAnaW52YWxpZC9kb2VzLW5vdC1leGlzdCc6IERpYWdub3N0aWNDYXRlZ29yeS5FcnJvcixcbiAgICAgICAgfSk7XG4gICAgICB9KS50b1Rocm93KC9VbnJlY29nbml6ZWQgZGlhZ25vc3RpYyBjb2RlLyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=