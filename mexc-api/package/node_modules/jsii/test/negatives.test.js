"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const ts = require("typescript");
const compiler_1 = require("../lib/compiler");
const utils_1 = require("../lib/utils");
const SOURCE_DIR = path.join(__dirname, 'negatives');
expect.addSnapshotSerializer({
    test: (val) => typeof val === 'string',
    serialize: (val) => val,
});
for (const source of fs.readdirSync(SOURCE_DIR)) {
    if (!source.startsWith('neg.') ||
        !source.endsWith('.ts') ||
        source.endsWith('.d.ts')) {
        continue;
    }
    const filePath = path.join(SOURCE_DIR, source);
    test(source.replace(/neg\.(.+)\.ts/, '$1'), async () => {
        const { strict, stripDeprecated } = await _getPragmas(filePath);
        // Change in dir, so relative paths are processed correctly.
        process.chdir(SOURCE_DIR);
        const compiler = new compiler_1.Compiler({
            projectInfo: _makeProjectInfo(source),
            failOnWarnings: strict,
            stripDeprecated,
        });
        const emitResult = await compiler.emit(path.join(SOURCE_DIR, source));
        expect(emitResult.emitSkipped).toBeTruthy();
        const diagnostics = emitResult.diagnostics
            .filter(
        // Remove suggestion diagnostics, we don't care much for those for now...
        (diag) => diag.category !== ts.DiagnosticCategory.Suggestion)
            .map((diag) => utils_1.formatDiagnostic(diag, SOURCE_DIR))
            .sort();
        expect(diagnostics.length).toBeGreaterThan(0);
        expect(diagnostics
            // Remove ANSI color codes from the message so it's nicer in the snapshots file
            // eslint-disable-next-line no-control-regex
            .map((diag) => diag.replace(/\x1B\[[0-9;]*[a-z]/gi, ''))
            .join('')).toMatchSnapshot();
        // Cleaning up...
        return Promise.all((await fs.readdir(SOURCE_DIR)).map((file) => {
            const promises = new Array();
            if (file.startsWith('neg.') &&
                (file.endsWith('.d.ts') || file.endsWith('.js'))) {
                promises.push(fs.remove(path.join(SOURCE_DIR, file)));
            }
            promises.push(fs.remove(path.join(SOURCE_DIR, '.jsii')), fs.remove(path.join(SOURCE_DIR, 'tsconfig.json')), fs.remove(path.join(SOURCE_DIR, '.build')));
            return Promise.all(promises);
        }));
    }, 50000);
}
const STRICT_MARKER = '///!STRICT!';
const STRIP_DEPRECATED_MARKER = '///!STRIP_DEPRECATED!';
async function _getPragmas(file) {
    const data = await fs.readFile(file, { encoding: 'utf8' });
    const lines = data.split('\n');
    const strict = lines.some((line) => line.startsWith(STRICT_MARKER));
    const stripDeprecated = lines.some((line) => line.startsWith(STRIP_DEPRECATED_MARKER));
    return { strict, stripDeprecated };
}
function _makeProjectInfo(types) {
    const outDir = '.build';
    return {
        projectRoot: SOURCE_DIR,
        packageJson: undefined,
        types: path.join(outDir, types.replace(/\.d\.ts(x?)/, '.d.ts$1')),
        main: path.join(outDir, types.replace(/(?:\.d)?\.ts(x?)/, '.js$1')),
        name: 'jsii',
        version: '0.0.1',
        jsiiVersionFormat: 'short',
        license: 'Apache-2.0',
        author: { name: 'John Doe', roles: ['author'] },
        repository: { type: 'git', url: 'https://github.com/aws/jsii.git' },
        dependencies: {},
        peerDependencies: {},
        dependencyClosure: [],
        bundleDependencies: {},
        targets: {},
        excludeTypescript: [],
        tsc: { outDir },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVnYXRpdmVzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZWdhdGl2ZXMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUMvQiw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBRWpDLDhDQUEyQztBQUUzQyx3Q0FBZ0Q7QUFFaEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFFckQsTUFBTSxDQUFDLHFCQUFxQixDQUFDO0lBQzNCLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUTtJQUN0QyxTQUFTLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUc7Q0FDaEMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxNQUFNLE1BQU0sSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0lBQy9DLElBQ0UsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUMxQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQ3hCO1FBQ0EsU0FBUztLQUNWO0lBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsSUFBSSxDQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUNyQyxLQUFLLElBQUksRUFBRTtRQUNULE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsTUFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEUsNERBQTREO1FBQzVELE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFD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bnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5pbXBvcnQgeyBDb21waWxlciB9IGZyb20gJy4uL2xpYi9jb21waWxlcic7XG5pbXBvcnQgeyBQcm9qZWN0SW5mbyB9IGZyb20gJy4uL2xpYi9wcm9qZWN0LWluZm8nO1xuaW1wb3J0IHsgZm9ybWF0RGlhZ25vc3RpYyB9IGZyb20gJy4uL2xpYi91dGlscyc7XG5cbmNvbnN0IFNPVVJDRV9ESVIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnbmVnYXRpdmVzJyk7XG5cbmV4cGVjdC5hZGRTbmFwc2hvdFNlcmlhbGl6ZXIoe1xuICB0ZXN0OiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyxcbiAgc2VyaWFsaXplOiAodmFsOiBzdHJpbmcpID0+IHZhbCxcbn0pO1xuXG5mb3IgKGNvbnN0IHNvdXJjZSBvZiBmcy5yZWFkZGlyU3luYyhTT1VSQ0VfRElSKSkge1xuICBpZiAoXG4gICAgIXNvdXJjZS5zdGFydHNXaXRoKCduZWcuJykgfHxcbiAgICAhc291cmNlLmVuZHNXaXRoKCcudHMnKSB8fFxuICAgIHNvdXJjZS5lbmRzV2l0aCgnLmQudHMnKVxuICApIHtcbiAgICBjb250aW51ZTtcbiAgfVxuICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihTT1VSQ0VfRElSLCBzb3VyY2UpO1xuICB0ZXN0KFxuICAgIHNvdXJjZS5yZXBsYWNlKC9uZWdcXC4oLispXFwudHMvLCAnJDEnKSxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHN0cmljdCwgc3RyaXBEZXByZWNhdGVkIH0gPSBhd2FpdCBfZ2V0UHJhZ21hcyhmaWxlUGF0aCk7XG5cbiAgICAgIC8vIENoYW5nZSBpbiBkaXIsIHNvIHJlbGF0aXZlIHBhdGhzIGFyZSBwcm9jZXNzZWQgY29ycmVjdGx5LlxuICAgICAgcHJvY2Vzcy5jaGRpcihTT1VSQ0VfRElSKTtcblxuICAgICAgY29uc3QgY29tcGlsZXIgPSBuZXcgQ29tcGlsZXIoe1xuICAgICAgICBwcm9qZWN0SW5mbzogX21ha2VQcm9qZWN0SW5mbyhzb3VyY2UpLFxuICAgICAgICBmYWlsT25XYXJuaW5nczogc3RyaWN0LFxuICAgICAgICBzdHJpcERlcHJlY2F0ZWQsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGVtaXRSZXN1bHQgPSBhd2FpdCBjb21waWxlci5lbWl0KHBhdGguam9pbihTT1VSQ0VfRElSLCBzb3VyY2UpKTtcblxuICAgICAgZXhwZWN0KGVtaXRSZXN1bHQuZW1pdFNraXBwZWQpLnRvQmVUcnV0aHkoKTtcblxuICAgICAgY29uc3QgZGlhZ25vc3RpY3MgPSBlbWl0UmVzdWx0LmRpYWdub3N0aWNzXG4gICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgLy8gUmVtb3ZlIHN1Z2dlc3Rpb24gZGlhZ25vc3RpY3MsIHdlIGRvbid0IGNhcmUgbXVjaCBmb3IgdGhvc2UgZm9yIG5vdy4uLlxuICAgICAgICAgIChkaWFnKSA9PiBkaWFnLmNhdGVnb3J5ICE9PSB0cy5EaWFnbm9zdGljQ2F0ZWdvcnkuU3VnZ2VzdGlvbixcbiAgICAgICAgKVxuICAgICAgICAubWFwKChkaWFnKSA9PiBmb3JtYXREaWFnbm9zdGljKGRpYWcsIFNPVVJDRV9ESVIpKVxuICAgICAgICAuc29ydCgpO1xuXG4gICAgICBleHBlY3QoZGlhZ25vc3RpY3MubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIGRpYWdub3N0aWNzXG4gICAgICAgICAgLy8gUmVtb3ZlIEFOU0kgY29sb3IgY29kZXMgZnJvbSB0aGUgbWVzc2FnZSBzbyBpdCdzIG5pY2VyIGluIHRoZSBzbmFwc2hvdHMgZmlsZVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgICAgICAgLm1hcCgoZGlhZykgPT4gZGlhZy5yZXBsYWNlKC9cXHgxQlxcW1swLTk7XSpbYS16XS9naSwgJycpKVxuICAgICAgICAgIC5qb2luKCcnKSxcbiAgICAgICkudG9NYXRjaFNuYXBzaG90KCk7XG5cbiAgICAgIC8vIENsZWFuaW5nIHVwLi4uXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgIChhd2FpdCBmcy5yZWFkZGlyKFNPVVJDRV9ESVIpKS5tYXAoKGZpbGUpID0+IHtcbiAgICAgICAgICBjb25zdCBwcm9taXNlcyA9IG5ldyBBcnJheTxQcm9taXNlPGFueT4+KCk7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZmlsZS5zdGFydHNXaXRoKCduZWcuJykgJiZcbiAgICAgICAgICAgIChmaWxlLmVuZHNXaXRoKCcuZC50cycpIHx8IGZpbGUuZW5kc1dpdGgoJy5qcycpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChmcy5yZW1vdmUocGF0aC5qb2luKFNPVVJDRV9ESVIsIGZpbGUpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb21pc2VzLnB1c2goXG4gICAgICAgICAgICBmcy5yZW1vdmUocGF0aC5qb2luKFNPVVJDRV9ESVIsICcuanNpaScpKSxcbiAgICAgICAgICAgIGZzLnJlbW92ZShwYXRoLmpvaW4oU09VUkNFX0RJUiwgJ3RzY29uZmlnLmpzb24nKSksXG4gICAgICAgICAgICBmcy5yZW1vdmUocGF0aC5qb2luKFNPVVJDRV9ESVIsICcuYnVpbGQnKSksXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSxcbiAgICA1MDAwMCxcbiAgKTtcbn1cblxuY29uc3QgU1RSSUNUX01BUktFUiA9ICcvLy8hU1RSSUNUISc7XG5jb25zdCBTVFJJUF9ERVBSRUNBVEVEX01BUktFUiA9ICcvLy8hU1RSSVBfREVQUkVDQVRFRCEnO1xuYXN5bmMgZnVuY3Rpb24gX2dldFByYWdtYXMoXG4gIGZpbGU6IHN0cmluZyxcbik6IFByb21pc2U8eyBzdHJpY3Q6IGJvb2xlYW47IHN0cmlwRGVwcmVjYXRlZDogYm9vbGVhbiB9PiB7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBmcy5yZWFkRmlsZShmaWxlLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gIGNvbnN0IGxpbmVzID0gZGF0YS5zcGxpdCgnXFxuJyk7XG4gIGNvbnN0IHN0cmljdCA9IGxpbmVzLnNvbWUoKGxpbmUpID0+IGxpbmUuc3RhcnRzV2l0aChTVFJJQ1RfTUFSS0VSKSk7XG4gIGNvbnN0IHN0cmlwRGVwcmVjYXRlZCA9IGxpbmVzLnNvbWUoKGxpbmUpID0+XG4gICAgbGluZS5zdGFydHNXaXRoKFNUUklQX0RFUFJFQ0FURURfTUFSS0VSKSxcbiAgKTtcbiAgcmV0dXJuIHsgc3RyaWN0LCBzdHJpcERlcHJlY2F0ZWQgfTtcbn1cblxuZnVuY3Rpb24gX21ha2VQcm9qZWN0SW5mbyh0eXBlczogc3RyaW5nKTogUHJvamVjdEluZm8ge1xuICBjb25zdCBvdXREaXIgPSAnLmJ1aWxkJztcbiAgcmV0dXJuIHtcbiAgICBwcm9qZWN0Um9vdDogU09VUkNFX0RJUixcbiAgICBwYWNrYWdlSnNvbjogdW5kZWZpbmVkLFxuICAgIHR5cGVzOiBwYXRoLmpvaW4ob3V0RGlyLCB0eXBlcy5yZXBsYWNlKC9cXC5kXFwudHMoeD8pLywgJy5kLnRzJDEnKSksXG4gICAgbWFpbjogcGF0aC5qb2luKG91dERpciwgdHlwZXMucmVwbGFjZSgvKD86XFwuZCk/XFwudHMoeD8pLywgJy5qcyQxJykpLFxuICAgIG5hbWU6ICdqc2lpJywgLy8gVGhhdCdzIHdoYXQgcGFja2FnZS5qc29uIHdvdWxkIHRlbGwgaWYgd2UgbG9vayB1cC4uLlxuICAgIHZlcnNpb246ICcwLjAuMScsXG4gICAganNpaVZlcnNpb25Gb3JtYXQ6ICdzaG9ydCcsXG4gICAgbGljZW5zZTogJ0FwYWNoZS0yLjAnLFxuICAgIGF1dGhvcjogeyBuYW1lOiAnSm9obiBEb2UnLCByb2xlczogWydhdXRob3InXSB9LFxuICAgIHJlcG9zaXRvcnk6IHsgdHlwZTogJ2dpdCcsIHVybDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hd3MvanNpaS5naXQnIH0sXG4gICAgZGVwZW5kZW5jaWVzOiB7fSxcbiAgICBwZWVyRGVwZW5kZW5jaWVzOiB7fSxcbiAgICBkZXBlbmRlbmN5Q2xvc3VyZTogW10sXG4gICAgYnVuZGxlRGVwZW5kZW5jaWVzOiB7fSxcbiAgICB0YXJnZXRzOiB7fSxcbiAgICBleGNsdWRlVHlwZXNjcmlwdDogW10sXG4gICAgdHNjOiB7IG91dERpciB9LFxuICB9O1xufVxuIl19