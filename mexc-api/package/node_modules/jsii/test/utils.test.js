"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../lib/utils");
describe('parsePerson', () => {
    test('correctly parses NPM documentation example', () => {
        const parsed = utils_1.parsePerson('Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)');
        expect(parsed).toEqual({
            name: 'Barney Rubble',
            email: 'b@rubble.com',
            url: 'http://barnyrubble.tumblr.com/',
        });
    });
    test('correctly parses NPM documentation example (minus URL)', () => {
        const parsed = utils_1.parsePerson('Barney Rubble <b@rubble.com>');
        expect(parsed).toEqual({
            name: 'Barney Rubble',
            email: 'b@rubble.com',
        });
    });
    test('correctly parses NPM documentation example (minus email)', () => {
        const parsed = utils_1.parsePerson('Barney Rubble (http://barnyrubble.tumblr.com/)');
        expect(parsed).toEqual({
            name: 'Barney Rubble',
            url: 'http://barnyrubble.tumblr.com/',
        });
    });
    test('correctly parses NPM documentation example (minus email and URL)', () => {
        const parsed = utils_1.parsePerson('Barney Rubble');
        expect(parsed).toEqual({
            name: 'Barney Rubble',
        });
    });
});
describe('parseRepository', () => {
    test('correctly parses npm/npm', () => {
        const parsed = utils_1.parseRepository('npm/npm');
        expect(parsed).toEqual({
            url: 'https://github.com/npm/npm.git',
        });
    });
    test('correctly parses github:user/repo', () => {
        const parsed = utils_1.parseRepository('github:user/repo');
        expect(parsed).toEqual({
            url: 'https://github.com/user/repo.git',
        });
    });
    test('correctly parses gist:user/11081aaa281', () => {
        const parsed = utils_1.parseRepository('gist:user/11081aaa281');
        expect(parsed).toEqual({
            url: 'https://gist.github.com/user/11081aaa281.git',
        });
    });
    test('correctly parses bitbucket:user/repo', () => {
        const parsed = utils_1.parseRepository('bitbucket:user/repo');
        expect(parsed).toEqual({
            url: 'https://bitbucket.org/user/repo.git',
        });
    });
    test('correctly parses gitlab:user/repo', () => {
        const parsed = utils_1.parseRepository('gitlab:user/repo');
        expect(parsed).toEqual({
            url: 'https://gitlab.com/user/repo.git',
        });
    });
    test('passes through other values', () => {
        const parsed = utils_1.parseRepository('not-even-a-url-:sadface:');
        expect(parsed).toEqual({
            url: 'not-even-a-url-:sadface:',
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWxzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBNEQ7QUFFNUQsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDM0IsSUFBSSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtRQUN0RCxNQUFNLE1BQU0sR0FBRyxtQkFBVyxDQUN4QiwrREFBK0QsQ0FDaEUsQ0FBQztRQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsSUFBSSxFQUFFLGVBQWU7WUFDckIsS0FBSyxFQUFFLGNBQWM7WUFDckIsR0FBRyxFQUFFLGdDQUFnQztTQUN0QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7UUFDbEUsTUFBTSxNQUFNLEdBQUcsbUJBQVcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsSUFBSSxFQUFFLGVBQWU7WUFDckIsS0FBSyxFQUFFLGNBQWM7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMERBQTBELEVBQUUsR0FBRyxFQUFFO1FBQ3BFLE1BQU0sTUFBTSxHQUFHLG1CQUFXLENBQ3hCLGdEQUFnRCxDQUNqRCxDQUFDO1FBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNyQixJQUFJLEVBQUUsZUFBZTtZQUNyQixHQUFHLEVBQUUsZ0NBQWdDO1NBQ3RDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGtFQUFrRSxFQUFFLEdBQUcsRUFBRTtRQUM1RSxNQUFNLE1BQU0sR0FBRyxtQkFBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsSUFBSSxFQUFFLGVBQWU7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNwQyxNQUFNLE1BQU0sR0FBRyx1QkFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsR0FBRyxFQUFFLGdDQUFnQztTQUN0QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsTUFBTSxNQUFNLEdBQUcsdUJBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsR0FBRyxFQUFFLGtDQUFrQztTQUN4QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7UUFDbEQsTUFBTSxNQUFNLEdBQUcsdUJBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsR0FBRyxFQUFFLDhDQUE4QztTQUNwRCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsTUFBTSxNQUFNLEdBQUcsdUJBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsR0FBRyxFQUFFLHFDQUFxQztTQUMzQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsTUFBTSxNQUFNLEdBQUcsdUJBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsR0FBRyxFQUFFLGtDQUFrQztTQUN4QyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDdkMsTUFBTSxNQUFNLEdBQUcsdUJBQWUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDckIsR0FBRyxFQUFFLDBCQUEwQjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VQZXJzb24sIHBhcnNlUmVwb3NpdG9yeSB9IGZyb20gJy4uL2xpYi91dGlscyc7XG5cbmRlc2NyaWJlKCdwYXJzZVBlcnNvbicsICgpID0+IHtcbiAgdGVzdCgnY29ycmVjdGx5IHBhcnNlcyBOUE0gZG9jdW1lbnRhdGlvbiBleGFtcGxlJywgKCkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlUGVyc29uKFxuICAgICAgJ0Jhcm5leSBSdWJibGUgPGJAcnViYmxlLmNvbT4gKGh0dHA6Ly9iYXJueXJ1YmJsZS50dW1ibHIuY29tLyknLFxuICAgICk7XG4gICAgZXhwZWN0KHBhcnNlZCkudG9FcXVhbCh7XG4gICAgICBuYW1lOiAnQmFybmV5IFJ1YmJsZScsXG4gICAgICBlbWFpbDogJ2JAcnViYmxlLmNvbScsXG4gICAgICB1cmw6ICdodHRwOi8vYmFybnlydWJibGUudHVtYmxyLmNvbS8nLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdjb3JyZWN0bHkgcGFyc2VzIE5QTSBkb2N1bWVudGF0aW9uIGV4YW1wbGUgKG1pbnVzIFVSTCknLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VQZXJzb24oJ0Jhcm5leSBSdWJibGUgPGJAcnViYmxlLmNvbT4nKTtcbiAgICBleHBlY3QocGFyc2VkKS50b0VxdWFsKHtcbiAgICAgIG5hbWU6ICdCYXJuZXkgUnViYmxlJyxcbiAgICAgIGVtYWlsOiAnYkBydWJibGUuY29tJyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY29ycmVjdGx5IHBhcnNlcyBOUE0gZG9jdW1lbnRhdGlvbiBleGFtcGxlIChtaW51cyBlbWFpbCknLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VQZXJzb24oXG4gICAgICAnQmFybmV5IFJ1YmJsZSAoaHR0cDovL2Jhcm55cnViYmxlLnR1bWJsci5jb20vKScsXG4gICAgKTtcbiAgICBleHBlY3QocGFyc2VkKS50b0VxdWFsKHtcbiAgICAgIG5hbWU6ICdCYXJuZXkgUnViYmxlJyxcbiAgICAgIHVybDogJ2h0dHA6Ly9iYXJueXJ1YmJsZS50dW1ibHIuY29tLycsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NvcnJlY3RseSBwYXJzZXMgTlBNIGRvY3VtZW50YXRpb24gZXhhbXBsZSAobWludXMgZW1haWwgYW5kIFVSTCknLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VQZXJzb24oJ0Jhcm5leSBSdWJibGUnKTtcbiAgICBleHBlY3QocGFyc2VkKS50b0VxdWFsKHtcbiAgICAgIG5hbWU6ICdCYXJuZXkgUnViYmxlJyxcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3BhcnNlUmVwb3NpdG9yeScsICgpID0+IHtcbiAgdGVzdCgnY29ycmVjdGx5IHBhcnNlcyBucG0vbnBtJywgKCkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlUmVwb3NpdG9yeSgnbnBtL25wbScpO1xuICAgIGV4cGVjdChwYXJzZWQpLnRvRXF1YWwoe1xuICAgICAgdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL25wbS9ucG0uZ2l0JyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY29ycmVjdGx5IHBhcnNlcyBnaXRodWI6dXNlci9yZXBvJywgKCkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlUmVwb3NpdG9yeSgnZ2l0aHViOnVzZXIvcmVwbycpO1xuICAgIGV4cGVjdChwYXJzZWQpLnRvRXF1YWwoe1xuICAgICAgdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL3VzZXIvcmVwby5naXQnLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdjb3JyZWN0bHkgcGFyc2VzIGdpc3Q6dXNlci8xMTA4MWFhYTI4MScsICgpID0+IHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZVJlcG9zaXRvcnkoJ2dpc3Q6dXNlci8xMTA4MWFhYTI4MScpO1xuICAgIGV4cGVjdChwYXJzZWQpLnRvRXF1YWwoe1xuICAgICAgdXJsOiAnaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vdXNlci8xMTA4MWFhYTI4MS5naXQnLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdjb3JyZWN0bHkgcGFyc2VzIGJpdGJ1Y2tldDp1c2VyL3JlcG8nLCAoKSA9PiB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VSZXBvc2l0b3J5KCdiaXRidWNrZXQ6dXNlci9yZXBvJyk7XG4gICAgZXhwZWN0KHBhcnNlZCkudG9FcXVhbCh7XG4gICAgICB1cmw6ICdodHRwczovL2JpdGJ1Y2tldC5vcmcvdXNlci9yZXBvLmdpdCcsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NvcnJlY3RseSBwYXJzZXMgZ2l0bGFiOnVzZXIvcmVwbycsICgpID0+IHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZVJlcG9zaXRvcnkoJ2dpdGxhYjp1c2VyL3JlcG8nKTtcbiAgICBleHBlY3QocGFyc2VkKS50b0VxdWFsKHtcbiAgICAgIHVybDogJ2h0dHBzOi8vZ2l0bGFiLmNvbS91c2VyL3JlcG8uZ2l0JyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncGFzc2VzIHRocm91Z2ggb3RoZXIgdmFsdWVzJywgKCkgPT4ge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlUmVwb3NpdG9yeSgnbm90LWV2ZW4tYS11cmwtOnNhZGZhY2U6Jyk7XG4gICAgZXhwZWN0KHBhcnNlZCkudG9FcXVhbCh7XG4gICAgICB1cmw6ICdub3QtZXZlbi1hLXVybC06c2FkZmFjZTonLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19