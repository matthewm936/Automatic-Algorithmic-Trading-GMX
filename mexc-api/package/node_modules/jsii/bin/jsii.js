"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@jsii/check-node/run");
const log4js = require("log4js");
const path = require("path");
const yargs = require("yargs");
const compiler_1 = require("../lib/compiler");
const jsii_diagnostic_1 = require("../lib/jsii-diagnostic");
const project_info_1 = require("../lib/project-info");
const utils = require("../lib/utils");
const version_1 = require("../lib/version");
const warnings_1 = require("../lib/warnings");
const warningTypes = Object.keys(warnings_1.enabledWarnings);
(async () => {
    var _a;
    const argv = yargs
        .env('JSII')
        .command(['$0 [PROJECT_ROOT]', 'compile [PROJECT_ROOT]'], 'Compiles a jsii/TypeScript project', (argv) => argv
        .positional('PROJECT_ROOT', {
        type: 'string',
        desc: 'The root of the project to be compiled',
        default: '.',
        normalize: true,
    })
        .option('watch', {
        alias: 'w',
        type: 'boolean',
        desc: 'Watch for file changes and recompile automatically',
    })
        .option('project-references', {
        alias: 'r',
        type: 'boolean',
        desc: 'Generate TypeScript project references (also [package.json].jsii.projectReferences)',
    })
        .option('fix-peer-dependencies', {
        type: 'boolean',
        default: true,
        desc: 'This option no longer has any effect.',
        hidden: true,
    })
        .options('fail-on-warnings', {
        alias: 'Werr',
        type: 'boolean',
        desc: 'Treat warnings as errors',
    })
        .option('silence-warnings', {
        type: 'array',
        default: [],
        desc: `List of warnings to silence (warnings: ${warningTypes.join(',')})`,
    })
        .option('strip-deprecated', {
        type: 'string',
        desc: '[EXPERIMENTAL] Hides all @deprecated members from the API (implementations remain). If an optional file name is given, only FQNs present in the file will be stripped.',
    })
        .option('add-deprecation-warnings', {
        type: 'boolean',
        default: false,
        desc: '[EXPERIMENTAL] Injects warning statements for all deprecated elements, to be printed at runtime',
    })
        .option('generate-tsconfig', {
        type: 'string',
        default: 'tsconfig.json',
        desc: 'Name of the typescript configuration file to generate with compiler settings',
    }))
        .option('verbose', {
        alias: 'v',
        type: 'count',
        desc: 'Increase the verbosity of output',
        global: true,
    })
        .help()
        .version(
    // eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires
    `${version_1.VERSION}, typescript ${require('typescript/package.json').version}`).argv;
    _configureLog4js(argv.verbose);
    const projectRoot = path.normalize(path.resolve(process.cwd(), argv.PROJECT_ROOT));
    const { projectInfo, diagnostics: projectInfoDiagnostics } = await project_info_1.loadProjectInfo(projectRoot);
    // disable all silenced warnings
    for (const key of argv['silence-warnings']) {
        if (!(key in warnings_1.enabledWarnings)) {
            throw new Error(`Unknown warning type ${key}. Must be one of: ${warningTypes.join(', ')}`);
        }
        warnings_1.enabledWarnings[key] = false;
    }
    jsii_diagnostic_1.configureCategories((_a = projectInfo.diagnostics) !== null && _a !== void 0 ? _a : {});
    const compiler = new compiler_1.Compiler({
        projectInfo,
        projectReferences: argv['project-references'],
        failOnWarnings: argv['fail-on-warnings'],
        stripDeprecated: !!argv['strip-deprecated'],
        stripDeprecatedAllowListFile: argv['strip-deprecated'],
        addDeprecationWarnings: argv['add-deprecation-warnings'],
        generateTypeScriptConfig: argv['generate-tsconfig'],
    });
    const emitResult = await (argv.watch ? compiler.watch() : compiler.emit());
    const allDiagnostics = [...projectInfoDiagnostics, ...emitResult.diagnostics];
    for (const diagnostic of allDiagnostics) {
        utils.logDiagnostic(diagnostic, projectRoot);
    }
    if (emitResult.emitSkipped) {
        process.exitCode = 1;
    }
})().catch((e) => {
    console.error(`Error: ${e.stack}`);
    process.exitCode = -1;
});
function _configureLog4js(verbosity) {
    log4js.configure({
        appenders: {
            console: {
                type: 'stderr',
                layout: { type: 'colored' },
            },
            [utils.DIAGNOSTICS]: {
                type: 'stdout',
                layout: { type: 'messagePassThrough' },
            },
        },
        categories: {
            default: { appenders: ['console'], level: _logLevel() },
            // The diagnostics logger must be set to INFO or more verbose, or watch won't show important messages
            [utils.DIAGNOSTICS]: {
                appenders: ['diagnostics'],
                level: _logLevel(Math.max(verbosity, 1)),
            },
        },
    });
    function _logLevel(verbosityLevel = verbosity) {
        switch (verbosityLevel) {
            case 0:
                return 'WARN';
            case 1:
                return 'INFO';
            case 2:
                return 'DEBUG';
            case 3:
                return 'TRACE';
            default:
                return 'ALL';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNpaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImpzaWkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnQ0FBOEI7QUFFOUIsaUNBQWlDO0FBQ2pDLDZCQUE2QjtBQUM3QiwrQkFBK0I7QUFFL0IsOENBQTJDO0FBQzNDLDREQUE2RDtBQUM3RCxzREFBc0Q7QUFDdEQsc0NBQXNDO0FBQ3RDLDRDQUF5QztBQUN6Qyw4Q0FBa0Q7QUFFbEQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQywwQkFBZSxDQUFDLENBQUM7QUFFbEQsQ0FBQyxLQUFLLElBQUksRUFBRTs7SUFDVixNQUFNLElBQUksR0FBRyxLQUFLO1NBQ2YsR0FBRyxDQUFDLE1BQU0sQ0FBQztTQUNYLE9BQU8sQ0FDTixDQUFDLG1CQUFtQixFQUFFLHdCQUF3QixDQUFDLEVBQy9DLG9DQUFvQyxFQUNwQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQ1AsSUFBSTtTQUNELFVBQVUsQ0FBQyxjQUFjLEVBQUU7UUFDMUIsSUFBSSxFQUFFLFFBQVE7UUFDZCxJQUFJLEVBQUUsd0NBQXdDO1FBQzlDLE9BQU8sRUFBRSxHQUFHO1FBQ1osU0FBUyxFQUFFLElBQUk7S0FDaEIsQ0FBQztTQUNELE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDZixLQUFLLEVBQUUsR0FBRztRQUNWLElBQUksRUFBRSxTQUFTO1FBQ2YsSUFBSSxFQUFFLG9EQUFvRDtLQUMzRCxDQUFDO1NBQ0QsTUFBTSxDQUFDLG9CQUFvQixFQUFFO1FBQzVCLEtBQUssRUFBRSxHQUFHO1FBQ1YsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUscUZBQXFGO0tBQzVGLENBQUM7U0FDRCxNQUFNLENBQUMsdUJBQXVCLEVBQUU7UUFDL0IsSUFBSSxFQUFFLFNBQVM7UUFDZixPQUFPLEVBQUUsSUFBSTtRQUNiLElBQUksRUFBRSx1Q0FBdUM7UUFDN0MsTUFBTSxFQUFFLElBQUk7S0FDYixDQUFDO1NBQ0QsT0FBTyxDQUFDLGtCQUFrQixFQUFFO1FBQzNCLEtBQUssRUFBRSxNQUFNO1FBQ2IsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsMEJBQTBCO0tBQ2pDLENBQUM7U0FDRCxNQUFNLENBQUMsa0JBQWtCLEVBQUU7UUFDMUIsSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsRUFBRTtRQUNYLElBQUksRUFBRSwwQ0FBMEMsWUFBWSxDQUFDLElBQUksQ0FDL0QsR0FBRyxDQUNKLEdBQUc7S0FDTCxDQUFDO1NBQ0QsTUFBTSxDQUFDLGtCQUFrQixFQUFFO1FBQzFCLElBQUksRUFBRSxRQUFRO1FBQ2QsSUFBSSxFQUFFLHdLQUF3SztLQUMvSyxDQUFDO1NBQ0QsTUFBTSxDQUFDLDBCQUEwQixFQUFFO1FBQ2xDLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsaUdBQWlHO0tBQ3hHLENBQUM7U0FDRCxNQUFNLENBQUMsbUJBQW1CLEVBQUU7UUFDM0IsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsZUFBZTtRQUN4QixJQUFJLEVBQUUsOEVBQThFO0tBQ3JGLENBQUMsQ0FDUDtTQUNBLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDakIsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsT0FBTztRQUNiLElBQUksRUFBRSxrQ0FBa0M7UUFDeEMsTUFBTSxFQUFFLElBQUk7S0FDYixDQUFDO1NBQ0QsSUFBSSxFQUFFO1NBQ04sT0FBTztJQUNOLG9HQUFvRztJQUNwRyxHQUFHLGlCQUFPLGdCQUFnQixPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FDdkUsQ0FBQyxJQUFJLENBQUM7SUFFVCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFL0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUMvQyxDQUFDO0lBRUYsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsR0FDeEQsTUFBTSw4QkFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXJDLGdDQUFnQztJQUNoQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1FBQzFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSwwQkFBZSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FDYix3QkFDRSxHQUNGLHFCQUFxQixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQy9DLENBQUM7U0FDSDtRQUVELDBCQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQzlCO0lBRUQscUNBQW1CLE9BQUMsV0FBVyxDQUFDLFdBQVcsbUNBQUksRUFBRSxDQUFDLENBQUM7SUFFbkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDO1FBQzVCLFdBQVc7UUFDWCxpQkFBaUIsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUM7UUFDN0MsY0FBYyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUN4QyxlQUFlLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUMzQyw0QkFBNEIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDdEQsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLDBCQUEwQixDQUFDO1FBQ3hELHdCQUF3QixFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztLQUNwRCxDQUFDLENBQUM7SUFFSCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUzRSxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQUcsc0JBQXNCLEVBQUUsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFOUUsS0FBSyxNQUFNLFVBQVUsSUFBSSxjQUFjLEVBQUU7UUFDdkMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDOUM7SUFDRCxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7UUFDMUIsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7S0FDdEI7QUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLGdCQUFnQixDQUFDLFNBQWlCO0lBQ3pDLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDZixTQUFTLEVBQUU7WUFDVCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTthQUM1QjtZQUNELENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNuQixJQUFJLEVBQUUsUUFBUTtnQkFDZCxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUU7YUFDdkM7U0FDRjtRQUNELFVBQVUsRUFBRTtZQUNWLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRTtZQUN2RCxxR0FBcUc7WUFDckcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ25CLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQztnQkFDMUIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN6QztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsU0FBUyxTQUFTLENBQUMsY0FBYyxHQUFHLFNBQVM7UUFDM0MsUUFBUSxjQUFjLEVBQUU7WUFDdEIsS0FBSyxDQUFDO2dCQUNKLE9BQU8sTUFBTSxDQUFDO1lBQ2hCLEtBQUssQ0FBQztnQkFDSixPQUFPLE1BQU0sQ0FBQztZQUNoQixLQUFLLENBQUM7Z0JBQ0osT0FBTyxPQUFPLENBQUM7WUFDakIsS0FBSyxDQUFDO2dCQUNKLE9BQU8sT0FBTyxDQUFDO1lBQ2pCO2dCQUNFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0Bqc2lpL2NoZWNrLW5vZGUvcnVuJztcblxuaW1wb3J0ICogYXMgbG9nNGpzIGZyb20gJ2xvZzRqcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuXG5pbXBvcnQgeyBDb21waWxlciB9IGZyb20gJy4uL2xpYi9jb21waWxlcic7XG5pbXBvcnQgeyBjb25maWd1cmVDYXRlZ29yaWVzIH0gZnJvbSAnLi4vbGliL2pzaWktZGlhZ25vc3RpYyc7XG5pbXBvcnQgeyBsb2FkUHJvamVjdEluZm8gfSBmcm9tICcuLi9saWIvcHJvamVjdC1pbmZvJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL2xpYi91dGlscyc7XG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi4vbGliL3ZlcnNpb24nO1xuaW1wb3J0IHsgZW5hYmxlZFdhcm5pbmdzIH0gZnJvbSAnLi4vbGliL3dhcm5pbmdzJztcblxuY29uc3Qgd2FybmluZ1R5cGVzID0gT2JqZWN0LmtleXMoZW5hYmxlZFdhcm5pbmdzKTtcblxuKGFzeW5jICgpID0+IHtcbiAgY29uc3QgYXJndiA9IHlhcmdzXG4gICAgLmVudignSlNJSScpXG4gICAgLmNvbW1hbmQoXG4gICAgICBbJyQwIFtQUk9KRUNUX1JPT1RdJywgJ2NvbXBpbGUgW1BST0pFQ1RfUk9PVF0nXSxcbiAgICAgICdDb21waWxlcyBhIGpzaWkvVHlwZVNjcmlwdCBwcm9qZWN0JyxcbiAgICAgIChhcmd2KSA9PlxuICAgICAgICBhcmd2XG4gICAgICAgICAgLnBvc2l0aW9uYWwoJ1BST0pFQ1RfUk9PVCcsIHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgZGVzYzogJ1RoZSByb290IG9mIHRoZSBwcm9qZWN0IHRvIGJlIGNvbXBpbGVkJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcuJyxcbiAgICAgICAgICAgIG5vcm1hbGl6ZTogdHJ1ZSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb24oJ3dhdGNoJywge1xuICAgICAgICAgICAgYWxpYXM6ICd3JyxcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgIGRlc2M6ICdXYXRjaCBmb3IgZmlsZSBjaGFuZ2VzIGFuZCByZWNvbXBpbGUgYXV0b21hdGljYWxseScsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAub3B0aW9uKCdwcm9qZWN0LXJlZmVyZW5jZXMnLCB7XG4gICAgICAgICAgICBhbGlhczogJ3InLFxuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgZGVzYzogJ0dlbmVyYXRlIFR5cGVTY3JpcHQgcHJvamVjdCByZWZlcmVuY2VzIChhbHNvIFtwYWNrYWdlLmpzb25dLmpzaWkucHJvamVjdFJlZmVyZW5jZXMpJyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb24oJ2ZpeC1wZWVyLWRlcGVuZGVuY2llcycsIHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICBkZXNjOiAnVGhpcyBvcHRpb24gbm8gbG9uZ2VyIGhhcyBhbnkgZWZmZWN0LicsXG4gICAgICAgICAgICBoaWRkZW46IHRydWUsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAub3B0aW9ucygnZmFpbC1vbi13YXJuaW5ncycsIHtcbiAgICAgICAgICAgIGFsaWFzOiAnV2VycicsXG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBkZXNjOiAnVHJlYXQgd2FybmluZ3MgYXMgZXJyb3JzJyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb24oJ3NpbGVuY2Utd2FybmluZ3MnLCB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgICAgICBkZXNjOiBgTGlzdCBvZiB3YXJuaW5ncyB0byBzaWxlbmNlICh3YXJuaW5nczogJHt3YXJuaW5nVHlwZXMuam9pbihcbiAgICAgICAgICAgICAgJywnLFxuICAgICAgICAgICAgKX0pYCxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb24oJ3N0cmlwLWRlcHJlY2F0ZWQnLCB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGRlc2M6ICdbRVhQRVJJTUVOVEFMXSBIaWRlcyBhbGwgQGRlcHJlY2F0ZWQgbWVtYmVycyBmcm9tIHRoZSBBUEkgKGltcGxlbWVudGF0aW9ucyByZW1haW4pLiBJZiBhbiBvcHRpb25hbCBmaWxlIG5hbWUgaXMgZ2l2ZW4sIG9ubHkgRlFOcyBwcmVzZW50IGluIHRoZSBmaWxlIHdpbGwgYmUgc3RyaXBwZWQuJyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb24oJ2FkZC1kZXByZWNhdGlvbi13YXJuaW5ncycsIHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVzYzogJ1tFWFBFUklNRU5UQUxdIEluamVjdHMgd2FybmluZyBzdGF0ZW1lbnRzIGZvciBhbGwgZGVwcmVjYXRlZCBlbGVtZW50cywgdG8gYmUgcHJpbnRlZCBhdCBydW50aW1lJyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb24oJ2dlbmVyYXRlLXRzY29uZmlnJywge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAndHNjb25maWcuanNvbicsXG4gICAgICAgICAgICBkZXNjOiAnTmFtZSBvZiB0aGUgdHlwZXNjcmlwdCBjb25maWd1cmF0aW9uIGZpbGUgdG8gZ2VuZXJhdGUgd2l0aCBjb21waWxlciBzZXR0aW5ncycsXG4gICAgICAgICAgfSksXG4gICAgKVxuICAgIC5vcHRpb24oJ3ZlcmJvc2UnLCB7XG4gICAgICBhbGlhczogJ3YnLFxuICAgICAgdHlwZTogJ2NvdW50JyxcbiAgICAgIGRlc2M6ICdJbmNyZWFzZSB0aGUgdmVyYm9zaXR5IG9mIG91dHB1dCcsXG4gICAgICBnbG9iYWw6IHRydWUsXG4gICAgfSlcbiAgICAuaGVscCgpXG4gICAgLnZlcnNpb24oXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gICAgICBgJHtWRVJTSU9OfSwgdHlwZXNjcmlwdCAke3JlcXVpcmUoJ3R5cGVzY3JpcHQvcGFja2FnZS5qc29uJykudmVyc2lvbn1gLFxuICAgICkuYXJndjtcblxuICBfY29uZmlndXJlTG9nNGpzKGFyZ3YudmVyYm9zZSk7XG5cbiAgY29uc3QgcHJvamVjdFJvb3QgPSBwYXRoLm5vcm1hbGl6ZShcbiAgICBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgYXJndi5QUk9KRUNUX1JPT1QpLFxuICApO1xuXG4gIGNvbnN0IHsgcHJvamVjdEluZm8sIGRpYWdub3N0aWNzOiBwcm9qZWN0SW5mb0RpYWdub3N0aWNzIH0gPVxuICAgIGF3YWl0IGxvYWRQcm9qZWN0SW5mbyhwcm9qZWN0Um9vdCk7XG5cbiAgLy8gZGlzYWJsZSBhbGwgc2lsZW5jZWQgd2FybmluZ3NcbiAgZm9yIChjb25zdCBrZXkgb2YgYXJndlsnc2lsZW5jZS13YXJuaW5ncyddKSB7XG4gICAgaWYgKCEoa2V5IGluIGVuYWJsZWRXYXJuaW5ncykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFVua25vd24gd2FybmluZyB0eXBlICR7XG4gICAgICAgICAga2V5IGFzIGFueVxuICAgICAgICB9LiBNdXN0IGJlIG9uZSBvZjogJHt3YXJuaW5nVHlwZXMuam9pbignLCAnKX1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlbmFibGVkV2FybmluZ3Nba2V5XSA9IGZhbHNlO1xuICB9XG5cbiAgY29uZmlndXJlQ2F0ZWdvcmllcyhwcm9qZWN0SW5mby5kaWFnbm9zdGljcyA/PyB7fSk7XG5cbiAgY29uc3QgY29tcGlsZXIgPSBuZXcgQ29tcGlsZXIoe1xuICAgIHByb2plY3RJbmZvLFxuICAgIHByb2plY3RSZWZlcmVuY2VzOiBhcmd2Wydwcm9qZWN0LXJlZmVyZW5jZXMnXSxcbiAgICBmYWlsT25XYXJuaW5nczogYXJndlsnZmFpbC1vbi13YXJuaW5ncyddLFxuICAgIHN0cmlwRGVwcmVjYXRlZDogISFhcmd2WydzdHJpcC1kZXByZWNhdGVkJ10sXG4gICAgc3RyaXBEZXByZWNhdGVkQWxsb3dMaXN0RmlsZTogYXJndlsnc3RyaXAtZGVwcmVjYXRlZCddLFxuICAgIGFkZERlcHJlY2F0aW9uV2FybmluZ3M6IGFyZ3ZbJ2FkZC1kZXByZWNhdGlvbi13YXJuaW5ncyddLFxuICAgIGdlbmVyYXRlVHlwZVNjcmlwdENvbmZpZzogYXJndlsnZ2VuZXJhdGUtdHNjb25maWcnXSxcbiAgfSk7XG5cbiAgY29uc3QgZW1pdFJlc3VsdCA9IGF3YWl0IChhcmd2LndhdGNoID8gY29tcGlsZXIud2F0Y2goKSA6IGNvbXBpbGVyLmVtaXQoKSk7XG5cbiAgY29uc3QgYWxsRGlhZ25vc3RpY3MgPSBbLi4ucHJvamVjdEluZm9EaWFnbm9zdGljcywgLi4uZW1pdFJlc3VsdC5kaWFnbm9zdGljc107XG5cbiAgZm9yIChjb25zdCBkaWFnbm9zdGljIG9mIGFsbERpYWdub3N0aWNzKSB7XG4gICAgdXRpbHMubG9nRGlhZ25vc3RpYyhkaWFnbm9zdGljLCBwcm9qZWN0Um9vdCk7XG4gIH1cbiAgaWYgKGVtaXRSZXN1bHQuZW1pdFNraXBwZWQpIHtcbiAgICBwcm9jZXNzLmV4aXRDb2RlID0gMTtcbiAgfVxufSkoKS5jYXRjaCgoZSkgPT4ge1xuICBjb25zb2xlLmVycm9yKGBFcnJvcjogJHtlLnN0YWNrfWApO1xuICBwcm9jZXNzLmV4aXRDb2RlID0gLTE7XG59KTtcblxuZnVuY3Rpb24gX2NvbmZpZ3VyZUxvZzRqcyh2ZXJib3NpdHk6IG51bWJlcikge1xuICBsb2c0anMuY29uZmlndXJlKHtcbiAgICBhcHBlbmRlcnM6IHtcbiAgICAgIGNvbnNvbGU6IHtcbiAgICAgICAgdHlwZTogJ3N0ZGVycicsXG4gICAgICAgIGxheW91dDogeyB0eXBlOiAnY29sb3JlZCcgfSxcbiAgICAgIH0sXG4gICAgICBbdXRpbHMuRElBR05PU1RJQ1NdOiB7XG4gICAgICAgIHR5cGU6ICdzdGRvdXQnLFxuICAgICAgICBsYXlvdXQ6IHsgdHlwZTogJ21lc3NhZ2VQYXNzVGhyb3VnaCcgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjYXRlZ29yaWVzOiB7XG4gICAgICBkZWZhdWx0OiB7IGFwcGVuZGVyczogWydjb25zb2xlJ10sIGxldmVsOiBfbG9nTGV2ZWwoKSB9LFxuICAgICAgLy8gVGhlIGRpYWdub3N0aWNzIGxvZ2dlciBtdXN0IGJlIHNldCB0byBJTkZPIG9yIG1vcmUgdmVyYm9zZSwgb3Igd2F0Y2ggd29uJ3Qgc2hvdyBpbXBvcnRhbnQgbWVzc2FnZXNcbiAgICAgIFt1dGlscy5ESUFHTk9TVElDU106IHtcbiAgICAgICAgYXBwZW5kZXJzOiBbJ2RpYWdub3N0aWNzJ10sXG4gICAgICAgIGxldmVsOiBfbG9nTGV2ZWwoTWF0aC5tYXgodmVyYm9zaXR5LCAxKSksXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIF9sb2dMZXZlbCh2ZXJib3NpdHlMZXZlbCA9IHZlcmJvc2l0eSk6IGtleW9mIGxvZzRqcy5MZXZlbHMge1xuICAgIHN3aXRjaCAodmVyYm9zaXR5TGV2ZWwpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuICdXQVJOJztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuICdJTkZPJztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuICdERUJVRyc7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAnVFJBQ0UnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdBTEwnO1xuICAgIH1cbiAgfVxufVxuIl19