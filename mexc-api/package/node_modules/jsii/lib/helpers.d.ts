/**
 * Helper routines for use with the jsii compiler
 *
 * These are mostly used for testing, but all projects that need to exercise
 * the JSII compiler to test something need to share this code, so might as
 * well put it in one reusable place.
 */
import * as spec from '@jsii/spec';
import { CompilerOptions } from './compiler';
/**
 * Compile a piece of source and return the JSII assembly for it
 *
 * Only usable for trivial cases and tests.
 *
 * @param source can either be a single `string` (the content of `index.ts`), or
 *               a map of fileName to content, which *must* include `index.ts`.
 */
export declare function sourceToAssemblyHelper(source: string | {
    'index.ts': string;
    [name: string]: string;
}, cb?: (obj: PackageInfo) => void): Promise<spec.Assembly>;
export interface HelperCompilationResult {
    /**
     * The generated assembly
     */
    readonly assembly: spec.Assembly;
    /**
     * Generated .js/.d.ts file(s)
     */
    readonly files: Record<string, string>;
}
/**
 * Compile a piece of source and return the assembly and compiled sources for it
 *
 * Only usable for trivial cases and tests.
 *
 * @param source can either be a single `string` (the content of `index.ts`), or
 *               a map of fileName to content, which *must* include `index.ts`.
 */
export declare function compileJsiiForTest(source: string | {
    'index.ts': string;
    [name: string]: string;
}, cb?: (obj: PackageInfo) => void, compilerOptions?: Omit<CompilerOptions, 'projectInfo' | 'watch'>): Promise<HelperCompilationResult>;
export declare type PackageInfo = {
    name: string;
    version: string;
    license: string;
    types: string;
    author: {
        name: string;
        roles: string[];
        [key: string]: any;
    };
    repository: {
        type?: string;
        url: string;
        directory?: string;
        [key: string]: any;
    };
    jsii: {
        [key: string]: any;
    };
    [key: string]: any;
};
