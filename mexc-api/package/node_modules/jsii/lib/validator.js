"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = void 0;
const spec = require("@jsii/spec");
const Case = require("case");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const deepEqual = require("deep-equal");
const ts = require("typescript");
const jsii_diagnostic_1 = require("./jsii-diagnostic");
const node_bindings_1 = require("./node-bindings");
const bindings = require("./node-bindings");
class Validator {
    constructor(projectInfo, assembly) {
        this.projectInfo = projectInfo;
        this.assembly = assembly;
        this._diagnostics = new Array();
    }
    async emit() {
        this._diagnostics = [];
        for (const validation of Validator.VALIDATIONS) {
            validation(this, this.assembly, (diag) => this._diagnostics.push(diag));
        }
        try {
            return await Promise.resolve({
                diagnostics: this._diagnostics,
                emitSkipped: this._diagnostics.some((diag) => diag.category === ts.DiagnosticCategory.Error),
            });
        }
        finally {
            // Clearing ``this._diagnostics`` to allow contents to be garbage-collected.
            delete this._diagnostics;
        }
    }
}
exports.Validator = Validator;
Validator.VALIDATIONS = _defaultValidations();
function _defaultValidations() {
    return [
        _typeNamesMustUsePascalCase,
        _enumMembersMustUserUpperSnakeCase,
        _memberNamesMustUseCamelCase,
        _staticConstantNamesMustUseUpperSnakeCase,
        _memberNamesMustNotLookLikeJavaGettersOrSetters,
        _allTypeReferencesAreValid,
        _inehritanceDoesNotChangeContracts,
        _staticMembersAndNestedTypesMustNotSharePascalCaseName,
    ];
    function _typeNamesMustUsePascalCase(_, assembly, diagnostic) {
        for (const type of _allTypes(assembly)) {
            if (type.name !== Case.pascal(type.name)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8000_PASCAL_CASED_TYPE_NAMES.createDetached(type.name));
            }
        }
    }
    function _enumMembersMustUserUpperSnakeCase(_, assembly, diagnostic) {
        for (const type of _allTypes(assembly)) {
            if (!spec.isEnumType(type)) {
                continue;
            }
            for (const member of type.members) {
                if (member.name && member.name !== Case.constant(member.name)) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8001_ALL_CAPS_ENUM_MEMBERS.createDetached(member.name, type.fqn));
                }
            }
        }
    }
    function _memberNamesMustUseCamelCase(_, assembly, diagnostic) {
        for (const { member, type } of _allMembers(assembly)) {
            if (member.static && member.const) {
                continue;
            }
            if (member.name && member.name !== Case.camel(member.name)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8002_CAMEL_CASED_MEMBERS.createDetached(member.name, type.fqn));
            }
        }
    }
    function _staticConstantNamesMustUseUpperSnakeCase(_, assembly, diagnostic) {
        for (const { member, type } of _allMembers(assembly)) {
            if (!member.static || !member.const) {
                continue;
            }
            if (member.name &&
                member.name !== Case.constant(member.name) &&
                member.name !== Case.pascal(member.name) &&
                member.name !== Case.camel(member.name)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8003_STATIC_CONST_CASING.createDetached(member.name, type.name));
            }
        }
    }
    function _memberNamesMustNotLookLikeJavaGettersOrSetters(_, assembly, diagnostic) {
        var _a;
        for (const { member, type } of _allMembers(assembly)) {
            if (!member.name) {
                continue;
            }
            const snakeName = Case.snake(member.name);
            if (snakeName.startsWith('get_') &&
                _isEmpty(member.parameters)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5000_JAVA_GETTERS.createDetached(member.name, type.name));
            }
            else if (snakeName.startsWith('set_') &&
                ((_a = member.parameters) !== null && _a !== void 0 ? _a : []).length === 1) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5001_JAVA_SETTERS.createDetached(member.name, type.name));
            }
        }
    }
    function _allTypeReferencesAreValid(validator, assembly, diagnostic) {
        var _a, _b;
        for (const typeRef of _allTypeReferences(assembly)) {
            const [assm] = typeRef.fqn.split('.');
            if (assembly.name === assm) {
                if (!(typeRef.fqn in ((_a = assembly.types) !== null && _a !== void 0 ? _a : {}))) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_3000_EXPORTED_API_USES_HIDDEN_TYPE.create(typeRef.node, // Pretend there is always a value
                    typeRef.fqn));
                }
                continue;
            }
            const foreignAssm = validator.projectInfo.dependencyClosure.find((dep) => dep.name === assm);
            if (!foreignAssm) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_9000_UNKNOWN_MODULE.createDetached(assm));
                continue;
            }
            if (!(typeRef.fqn in ((_b = foreignAssm.types) !== null && _b !== void 0 ? _b : {}))) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_9001_TYPE_NOT_FOUND.createDetached(typeRef));
            }
        }
    }
    function _inehritanceDoesNotChangeContracts(validator, assembly, diagnostic) {
        var _a, _b, _c, _d, _e, _f;
        for (const type of _allTypes(assembly)) {
            if (spec.isClassType(type)) {
                for (const method of (_a = type.methods) !== null && _a !== void 0 ? _a : []) {
                    _validateMethodOverride(method, type);
                }
                for (const property of (_b = type.properties) !== null && _b !== void 0 ? _b : []) {
                    _validatePropertyOverride(property, type);
                }
            }
            if (spec.isClassOrInterfaceType(type) &&
                ((_d = (_c = type.interfaces) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0) {
                for (const method of (_e = type.methods) !== null && _e !== void 0 ? _e : []) {
                    // Overrides "win" over implementations
                    if (method.overrides) {
                        continue;
                    }
                    _validateMethodImplementation(method, type);
                }
                for (const property of (_f = type.properties) !== null && _f !== void 0 ? _f : []) {
                    _validatePropertyImplementation(property, type);
                }
            }
        }
        function _validateMethodOverride(method, type) {
            var _a;
            if (!type.base) {
                return false;
            }
            const baseType = _dereference(type.base, assembly, validator);
            if (!baseType) {
                return false;
            }
            const overridden = ((_a = baseType.methods) !== null && _a !== void 0 ? _a : []).find((m) => m.name === method.name);
            if (!overridden) {
                return _validateMethodOverride(method, baseType);
            }
            _assertSignaturesMatch(overridden, method, `${type.fqn}#${method.name}`, `overriding ${baseType.fqn}`);
            method.overrides = baseType.fqn;
            return true;
        }
        function _validatePropertyOverride(property, type) {
            var _a;
            if (!type.base) {
                return false;
            }
            const baseType = _dereference(type.base, assembly, validator);
            if (!baseType) {
                return false;
            }
            const overridden = ((_a = baseType.properties) !== null && _a !== void 0 ? _a : []).find((p) => p.name === property.name);
            if (!overridden) {
                return _validatePropertyOverride(property, baseType);
            }
            _assertPropertiesMatch(overridden, property, `${type.fqn}#${property.name}`, `overriding ${baseType.fqn}`);
            property.overrides = baseType.fqn;
            return true;
        }
        function _validateMethodImplementation(method, type) {
            var _a;
            if (!type.interfaces) {
                // Abstract classes may not directly implement all members, need to check their supertypes...
                if (spec.isClassType(type) && type.base && type.abstract) {
                    return _validateMethodImplementation(method, _dereference(type.base, assembly, validator));
                }
                return false;
            }
            for (const iface of type.interfaces) {
                const ifaceType = _dereference(iface, assembly, validator);
                const implemented = ((_a = ifaceType.methods) !== null && _a !== void 0 ? _a : []).find((m) => m.name === method.name);
                if (implemented) {
                    _assertSignaturesMatch(implemented, method, `${type.fqn}#${method.name}`, `implementing ${ifaceType.fqn}`);
                    method.overrides = iface;
                    return true;
                }
                if (_validateMethodImplementation(method, ifaceType)) {
                    return true;
                }
            }
            return false;
        }
        function _validatePropertyImplementation(property, type) {
            var _a;
            if (!type.interfaces) {
                // Abstract classes may not directly implement all members, need to check their supertypes...
                if (spec.isClassType(type) && type.base && type.abstract) {
                    return _validatePropertyImplementation(property, _dereference(type.base, assembly, validator));
                }
                return false;
            }
            for (const iface of type.interfaces) {
                const ifaceType = _dereference(iface, assembly, validator);
                const implemented = ((_a = ifaceType.properties) !== null && _a !== void 0 ? _a : []).find((p) => p.name === property.name);
                if (implemented) {
                    _assertPropertiesMatch(implemented, property, `${type.fqn}#${property.name}`, `implementing ${ifaceType.fqn}`);
                    property.overrides = ifaceType.fqn;
                    return true;
                }
                if (_validatePropertyImplementation(property, ifaceType)) {
                    return true;
                }
            }
            return false;
        }
        function _assertSignaturesMatch(expected, actual, label, action) {
            var _a, _b, _c, _d;
            if (!!expected.protected !== !!actual.protected) {
                const expVisibility = expected.protected ? 'protected' : 'public';
                const actVisibility = actual.protected ? 'protected' : 'public';
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5002_OVERRIDE_CHANGES_VISIBILITY.createDetached(label, action, actVisibility, expVisibility));
            }
            if (!deepEqual(actual.returns, expected.returns)) {
                const expType = spec.describeTypeReference((_a = expected.returns) === null || _a === void 0 ? void 0 : _a.type);
                const actType = spec.describeTypeReference((_b = actual.returns) === null || _b === void 0 ? void 0 : _b.type);
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5003_OVERRIDE_CHANGES_RETURN_TYPE.createDetached(label, action, actType, expType));
            }
            const expectedParams = (_c = expected.parameters) !== null && _c !== void 0 ? _c : [];
            const actualParams = (_d = actual.parameters) !== null && _d !== void 0 ? _d : [];
            if (expectedParams.length !== actualParams.length) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5005_OVERRIDE_CHANGES_PARAM_COUNT.createDetached(label, action, actualParams.length, expectedParams.length));
                return;
            }
            for (let i = 0; i < expectedParams.length; i++) {
                const expParam = expectedParams[i];
                const actParam = actualParams[i];
                if (!deepEqual(expParam.type, actParam.type)) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5006_OVERRIDE_CHANGES_PARAM_TYPE.createDetached(label, action, actParam, expParam));
                }
                // Not-ing those to force the values to a strictly boolean context (they're optional, undefined means false)
                if (expParam.variadic !== actParam.variadic) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5007_OVERRIDE_CHANGES_VARIADIC.createDetached(label, action, actParam.variadic, expParam.variadic));
                }
                if (expParam.optional !== actParam.optional) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5008_OVERRIDE_CHANGES_PARAM_OPTIONAL.createDetached(label, action, actParam, expParam));
                }
            }
        }
        function _assertPropertiesMatch(expected, actual, label, action) {
            if (!!expected.protected !== !!actual.protected) {
                const expVisibility = expected.protected ? 'protected' : 'public';
                const actVisibility = actual.protected ? 'protected' : 'public';
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5002_OVERRIDE_CHANGES_VISIBILITY.createDetached(label, action, actVisibility, expVisibility));
            }
            if (!deepEqual(expected.type, actual.type)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5004_OVERRIDE_CHANGES_PROP_TYPE.createDetached(label, action, actual.type, expected.type));
            }
            if (expected.immutable !== actual.immutable) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5010_OVERRIDE_CHANGES_MUTABILITY.createDetached(label, action, actual.immutable, expected.immutable));
            }
            if (expected.optional !== actual.optional) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5009_OVERRIDE_CHANGES_PROP_OPTIONAL.createDetached(label, action, actual.optional, expected.optional));
            }
        }
    }
    function _staticMembersAndNestedTypesMustNotSharePascalCaseName(_, assembly, diagnostic) {
        var _a;
        for (const nestedType of Object.values((_a = assembly.types) !== null && _a !== void 0 ? _a : {})) {
            if (nestedType.namespace == null) {
                continue;
            }
            const nestingType = assembly.types[`${assembly.name}.${nestedType.namespace}`];
            if (nestingType == null) {
                continue;
            }
            const nestedTypeName = Case.pascal(nestedType.name);
            for (const { name, member } of staticMembers(nestingType)) {
                if (name === nestedTypeName) {
                    let diag = jsii_diagnostic_1.JsiiDiagnostic.JSII_5020_STATIC_MEMBER_CONFLICTS_WITH_NESTED_TYPE.create(node_bindings_1.getRelatedNode(member), nestingType, member, nestedType);
                    const nestedTypeNode = node_bindings_1.getRelatedNode(nestedType);
                    if (nestedTypeNode != null) {
                        diag = diag.addRelatedInformation(nestedTypeNode, 'This is the conflicting nested type declaration');
                    }
                    diagnostic(diag);
                }
            }
        }
        function staticMembers(type) {
            var _a, _b, _c, _d;
            if (spec.isClassOrInterfaceType(type)) {
                return [
                    ...((_b = (_a = type.methods) === null || _a === void 0 ? void 0 : _a.filter((method) => method.static)) !== null && _b !== void 0 ? _b : []),
                    ...((_d = (_c = type.properties) === null || _c === void 0 ? void 0 : _c.filter((prop) => prop.static)) !== null && _d !== void 0 ? _d : []),
                ].map((member) => ({ name: Case.pascal(member.name), member }));
            }
            return type.members.map((member) => ({ name: member.name, member }));
        }
    }
}
function _allTypes(assm) {
    var _a;
    return Object.values((_a = assm.types) !== null && _a !== void 0 ? _a : {});
}
function _allMethods(assm) {
    const methods = new Array();
    for (const type of _allTypes(assm)) {
        if (!spec.isClassOrInterfaceType(type)) {
            continue;
        }
        if (!type.methods) {
            continue;
        }
        type.methods.forEach((method) => methods.push({ member: method, type }));
    }
    return methods;
}
function _allProperties(assm) {
    const properties = new Array();
    for (const type of _allTypes(assm)) {
        if (!spec.isClassOrInterfaceType(type)) {
            continue;
        }
        if (!type.properties) {
            continue;
        }
        type.properties.forEach((property) => properties.push({ member: property, type }));
    }
    return properties;
}
function _allMembers(assm) {
    return [..._allMethods(assm), ..._allProperties(assm)];
}
function _allTypeReferences(assm) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const typeReferences = new Array();
    for (const type of _allTypes(assm)) {
        if (!spec.isClassOrInterfaceType(type)) {
            continue;
        }
        if (spec.isClassType(type)) {
            const node = bindings.getClassRelatedNode(type);
            if (type.base) {
                typeReferences.push({
                    fqn: type.base,
                    node: (_b = (_a = node === null || node === void 0 ? void 0 : node.heritageClauses) === null || _a === void 0 ? void 0 : _a.find((hc) => hc.token === ts.SyntaxKind.ExtendsKeyword)) === null || _b === void 0 ? void 0 : _b.types[0],
                });
            }
            if ((_c = type.initializer) === null || _c === void 0 ? void 0 : _c.parameters) {
                for (const param of type.initializer.parameters) {
                    _collectTypeReferences(param.type, (_d = bindings.getParameterRelatedNode(param)) === null || _d === void 0 ? void 0 : _d.type);
                }
            }
        }
        if (type.interfaces) {
            const node = bindings.getClassOrInterfaceRelatedNode(type);
            type.interfaces.forEach((iface) => {
                var _a;
                return typeReferences.push({
                    fqn: iface,
                    node: (_a = node === null || node === void 0 ? void 0 : node.heritageClauses) === null || _a === void 0 ? void 0 : _a.find((hc) => hc.token ===
                        (spec.isInterfaceType(type)
                            ? ts.SyntaxKind.ImplementsKeyword
                            : ts.SyntaxKind.ExtendsKeyword)),
                });
            });
        }
    }
    for (const { member: prop } of _allProperties(assm)) {
        _collectTypeReferences(prop.type, (_e = bindings.getPropertyRelatedNode(prop)) === null || _e === void 0 ? void 0 : _e.type);
    }
    for (const { member: meth } of _allMethods(assm)) {
        if (meth.returns) {
            _collectTypeReferences(meth.returns.type, (_f = bindings.getMethodRelatedNode(meth)) === null || _f === void 0 ? void 0 : _f.type);
        }
        for (const param of (_g = meth.parameters) !== null && _g !== void 0 ? _g : []) {
            _collectTypeReferences(param.type, (_h = bindings.getParameterRelatedNode(param)) === null || _h === void 0 ? void 0 : _h.type);
        }
    }
    return typeReferences;
    function _collectTypeReferences(type, node) {
        if (spec.isNamedTypeReference(type)) {
            typeReferences.push({ ...type, node });
        }
        else if (spec.isCollectionTypeReference(type)) {
            _collectTypeReferences(type.collection.elementtype, node);
        }
        else if (spec.isUnionTypeReference(type)) {
            type.union.types.forEach((type) => _collectTypeReferences(type, node));
        }
    }
}
function _dereference(typeRef, assembly, validator) {
    var _a, _b;
    if (typeof typeRef !== 'string') {
        typeRef = typeRef.fqn;
    }
    const [assm] = typeRef.split('.');
    if (assembly.name === assm) {
        return (_a = assembly.types) === null || _a === void 0 ? void 0 : _a[typeRef];
    }
    const foreignAssm = validator.projectInfo.dependencyClosure.find((dep) => dep.name === assm);
    return (_b = foreignAssm === null || foreignAssm === void 0 ? void 0 : foreignAssm.types) === null || _b === void 0 ? void 0 : _b[typeRef];
}
function _isEmpty(array) {
    return array == null || array.length === 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQyw2QkFBNkI7QUFDN0IsaUVBQWlFO0FBQ2pFLHdDQUF5QztBQUN6QyxpQ0FBaUM7QUFHakMsdURBQW1EO0FBQ25ELG1EQUFpRDtBQUNqRCw0Q0FBNEM7QUFHNUMsTUFBYSxTQUFTO0lBS3BCLFlBQ2tCLFdBQXdCLEVBQ3hCLFFBQXVCO1FBRHZCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGFBQVEsR0FBUixRQUFRLENBQWU7UUFKakMsaUJBQVksR0FBRyxJQUFJLEtBQUssRUFBa0IsQ0FBQztJQUtoRCxDQUFDO0lBRUcsS0FBSyxDQUFDLElBQUk7UUFDZixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUV2QixLQUFLLE1BQU0sVUFBVSxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUU7WUFDOUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsSUFBSTtZQUNGLE9BQU8sTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUMzQixXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVk7Z0JBQzlCLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDakMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssRUFBRSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FDeEQ7YUFDRixDQUFDLENBQUM7U0FDSjtnQkFBUztZQUNSLDRFQUE0RTtZQUM1RSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUI7SUFDSCxDQUFDOztBQTVCSCw4QkE2QkM7QUE1QmUscUJBQVcsR0FB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dGVudCI6WyJpbXBvcnQgKiBhcyBzcGVjIGZyb20gJ0Bqc2lpL3NwZWMnO1xuaW1wb3J0ICogYXMgQ2FzZSBmcm9tICdjYXNlJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG5pbXBvcnQgZGVlcEVxdWFsID0gcmVxdWlyZSgnZGVlcC1lcXVhbCcpO1xuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuL2VtaXR0ZXInO1xuaW1wb3J0IHsgSnNpaURpYWdub3N0aWMgfSBmcm9tICcuL2pzaWktZGlhZ25vc3RpYyc7XG5pbXBvcnQgeyBnZXRSZWxhdGVkTm9kZSB9IGZyb20gJy4vbm9kZS1iaW5kaW5ncyc7XG5pbXBvcnQgKiBhcyBiaW5kaW5ncyBmcm9tICcuL25vZGUtYmluZGluZ3MnO1xuaW1wb3J0IHsgUHJvamVjdEluZm8gfSBmcm9tICcuL3Byb2plY3QtaW5mbyc7XG5cbmV4cG9ydCBjbGFzcyBWYWxpZGF0b3IgaW1wbGVtZW50cyBFbWl0dGVyIHtcbiAgcHVibGljIHN0YXRpYyBWQUxJREFUSU9OUzogVmFsaWRhdGlvbkZ1bmN0aW9uW10gPSBfZGVmYXVsdFZhbGlkYXRpb25zKCk7XG5cbiAgcHJpdmF0ZSBfZGlhZ25vc3RpY3MgPSBuZXcgQXJyYXk8SnNpaURpYWdub3N0aWM+KCk7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBwcm9qZWN0SW5mbzogUHJvamVjdEluZm8sXG4gICAgcHVibGljIHJlYWRvbmx5IGFzc2VtYmx5OiBzcGVjLkFzc2VtYmx5LFxuICApIHt9XG5cbiAgcHVibGljIGFzeW5jIGVtaXQoKTogUHJvbWlzZTx0cy5FbWl0UmVzdWx0PiB7XG4gICAgdGhpcy5fZGlhZ25vc3RpY3MgPSBbXTtcblxuICAgIGZvciAoY29uc3QgdmFsaWRhdGlvbiBvZiBWYWxpZGF0b3IuVkFMSURBVElPTlMpIHtcbiAgICAgIHZhbGlkYXRpb24odGhpcywgdGhpcy5hc3NlbWJseSwgKGRpYWcpID0+IHRoaXMuX2RpYWdub3N0aWNzLnB1c2goZGlhZykpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgZGlhZ25vc3RpY3M6IHRoaXMuX2RpYWdub3N0aWNzLFxuICAgICAgICBlbWl0U2tpcHBlZDogdGhpcy5fZGlhZ25vc3RpY3Muc29tZShcbiAgICAgICAgICAoZGlhZykgPT4gZGlhZy5jYXRlZ29yeSA9PT0gdHMuRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yLFxuICAgICAgICApLFxuICAgICAgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIENsZWFyaW5nIGBgdGhpcy5fZGlhZ25vc3RpY3NgYCB0byBhbGxvdyBjb250ZW50cyB0byBiZSBnYXJiYWdlLWNvbGxlY3RlZC5cbiAgICAgIGRlbGV0ZSB0aGlzLl9kaWFnbm9zdGljcztcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgRGlhZ25vc3RpY0VtaXR0ZXIgPSAoZGlhZzogSnNpaURpYWdub3N0aWMpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBWYWxpZGF0aW9uRnVuY3Rpb24gPSAoXG4gIHZhbGlkYXRvcjogVmFsaWRhdG9yLFxuICBhc3NlbWJseTogc3BlYy5Bc3NlbWJseSxcbiAgZGlhZ25vc3RpYzogRGlhZ25vc3RpY0VtaXR0ZXIsXG4pID0+IHZvaWQ7XG5cbmZ1bmN0aW9uIF9kZWZhdWx0VmFsaWRhdGlvbnMoKTogVmFsaWRhdGlvbkZ1bmN0aW9uW10ge1xuICByZXR1cm4gW1xuICAgIF90eXBlTmFtZXNNdXN0VXNlUGFzY2FsQ2FzZSxcbiAgICBfZW51bU1lbWJlcnNNdXN0VXNlclVwcGVyU25ha2VDYXNlLFxuICAgIF9tZW1iZXJOYW1lc011c3RVc2VDYW1lbENhc2UsXG4gICAgX3N0YXRpY0NvbnN0YW50TmFtZXNNdXN0VXNlVXBwZXJTbmFrZUNhc2UsXG4gICAgX21lbWJlck5hbWVzTXVzdE5vdExvb2tMaWtlSmF2YUdldHRlcnNPclNldHRlcnMsXG4gICAgX2FsbFR5cGVSZWZlcmVuY2VzQXJlVmFsaWQsXG4gICAgX2luZWhyaXRhbmNlRG9lc05vdENoYW5nZUNvbnRyYWN0cyxcbiAgICBfc3RhdGljTWVtYmVyc0FuZE5lc3RlZFR5cGVzTXVzdE5vdFNoYXJlUGFzY2FsQ2FzZU5hbWUsXG4gIF07XG5cbiAgZnVuY3Rpb24gX3R5cGVOYW1lc011c3RVc2VQYXNjYWxDYXNlKFxuICAgIF86IFZhbGlkYXRvcixcbiAgICBhc3NlbWJseTogc3BlYy5Bc3NlbWJseSxcbiAgICBkaWFnbm9zdGljOiBEaWFnbm9zdGljRW1pdHRlcixcbiAgKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIF9hbGxUeXBlcyhhc3NlbWJseSkpIHtcbiAgICAgIGlmICh0eXBlLm5hbWUgIT09IENhc2UucGFzY2FsKHR5cGUubmFtZSkpIHtcbiAgICAgICAgZGlhZ25vc3RpYyhcbiAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzgwMDBfUEFTQ0FMX0NBU0VEX1RZUEVfTkFNRVMuY3JlYXRlRGV0YWNoZWQoXG4gICAgICAgICAgICB0eXBlLm5hbWUsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZW51bU1lbWJlcnNNdXN0VXNlclVwcGVyU25ha2VDYXNlKFxuICAgIF86IFZhbGlkYXRvcixcbiAgICBhc3NlbWJseTogc3BlYy5Bc3NlbWJseSxcbiAgICBkaWFnbm9zdGljOiBEaWFnbm9zdGljRW1pdHRlcixcbiAgKSB7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIF9hbGxUeXBlcyhhc3NlbWJseSkpIHtcbiAgICAgIGlmICghc3BlYy5pc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0eXBlLm1lbWJlcnMpIHtcbiAgICAgICAgaWYgKG1lbWJlci5uYW1lICYmIG1lbWJlci5uYW1lICE9PSBDYXNlLmNvbnN0YW50KG1lbWJlci5uYW1lKSkge1xuICAgICAgICAgIGRpYWdub3N0aWMoXG4gICAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzgwMDFfQUxMX0NBUFNfRU5VTV9NRU1CRVJTLmNyZWF0ZURldGFjaGVkKFxuICAgICAgICAgICAgICBtZW1iZXIubmFtZSxcbiAgICAgICAgICAgICAgdHlwZS5mcW4sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfbWVtYmVyTmFtZXNNdXN0VXNlQ2FtZWxDYXNlKFxuICAgIF86IFZhbGlkYXRvcixcbiAgICBhc3NlbWJseTogc3BlYy5Bc3NlbWJseSxcbiAgICBkaWFnbm9zdGljOiBEaWFnbm9zdGljRW1pdHRlcixcbiAgKSB7XG4gICAgZm9yIChjb25zdCB7IG1lbWJlciwgdHlwZSB9IG9mIF9hbGxNZW1iZXJzKGFzc2VtYmx5KSkge1xuICAgICAgaWYgKG1lbWJlci5zdGF0aWMgJiYgKG1lbWJlciBhcyBzcGVjLlByb3BlcnR5KS5jb25zdCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChtZW1iZXIubmFtZSAmJiBtZW1iZXIubmFtZSAhPT0gQ2FzZS5jYW1lbChtZW1iZXIubmFtZSkpIHtcbiAgICAgICAgZGlhZ25vc3RpYyhcbiAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzgwMDJfQ0FNRUxfQ0FTRURfTUVNQkVSUy5jcmVhdGVEZXRhY2hlZChcbiAgICAgICAgICAgIG1lbWJlci5uYW1lLFxuICAgICAgICAgICAgdHlwZS5mcW4sXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhdGljQ29uc3RhbnROYW1lc011c3RVc2VVcHBlclNuYWtlQ2FzZShcbiAgICBfOiBWYWxpZGF0b3IsXG4gICAgYXNzZW1ibHk6IHNwZWMuQXNzZW1ibHksXG4gICAgZGlhZ25vc3RpYzogRGlhZ25vc3RpY0VtaXR0ZXIsXG4gICkge1xuICAgIGZvciAoY29uc3QgeyBtZW1iZXIsIHR5cGUgfSBvZiBfYWxsTWVtYmVycyhhc3NlbWJseSkpIHtcbiAgICAgIGlmICghbWVtYmVyLnN0YXRpYyB8fCAhKG1lbWJlciBhcyBzcGVjLlByb3BlcnR5KS5jb25zdCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbWVtYmVyLm5hbWUgJiZcbiAgICAgICAgbWVtYmVyLm5hbWUgIT09IENhc2UuY29uc3RhbnQobWVtYmVyLm5hbWUpICYmXG4gICAgICAgIG1lbWJlci5uYW1lICE9PSBDYXNlLnBhc2NhbChtZW1iZXIubmFtZSkgJiZcbiAgICAgICAgbWVtYmVyLm5hbWUgIT09IENhc2UuY2FtZWwobWVtYmVyLm5hbWUpXG4gICAgICApIHtcbiAgICAgICAgZGlhZ25vc3RpYyhcbiAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzgwMDNfU1RBVElDX0NPTlNUX0NBU0lORy5jcmVhdGVEZXRhY2hlZChcbiAgICAgICAgICAgIG1lbWJlci5uYW1lLFxuICAgICAgICAgICAgdHlwZS5uYW1lLFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX21lbWJlck5hbWVzTXVzdE5vdExvb2tMaWtlSmF2YUdldHRlcnNPclNldHRlcnMoXG4gICAgXzogVmFsaWRhdG9yLFxuICAgIGFzc2VtYmx5OiBzcGVjLkFzc2VtYmx5LFxuICAgIGRpYWdub3N0aWM6IERpYWdub3N0aWNFbWl0dGVyLFxuICApIHtcbiAgICBmb3IgKGNvbnN0IHsgbWVtYmVyLCB0eXBlIH0gb2YgX2FsbE1lbWJlcnMoYXNzZW1ibHkpKSB7XG4gICAgICBpZiAoIW1lbWJlci5uYW1lKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc25ha2VOYW1lID0gQ2FzZS5zbmFrZShtZW1iZXIubmFtZSk7XG4gICAgICBpZiAoXG4gICAgICAgIHNuYWtlTmFtZS5zdGFydHNXaXRoKCdnZXRfJykgJiZcbiAgICAgICAgX2lzRW1wdHkoKG1lbWJlciBhcyBzcGVjLk1ldGhvZCkucGFyYW1ldGVycylcbiAgICAgICkge1xuICAgICAgICBkaWFnbm9zdGljKFxuICAgICAgICAgIEpzaWlEaWFnbm9zdGljLkpTSUlfNTAwMF9KQVZBX0dFVFRFUlMuY3JlYXRlRGV0YWNoZWQoXG4gICAgICAgICAgICBtZW1iZXIubmFtZSxcbiAgICAgICAgICAgIHR5cGUubmFtZSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc25ha2VOYW1lLnN0YXJ0c1dpdGgoJ3NldF8nKSAmJlxuICAgICAgICAoKG1lbWJlciBhcyBzcGVjLk1ldGhvZCkucGFyYW1ldGVycyA/PyBbXSkubGVuZ3RoID09PSAxXG4gICAgICApIHtcbiAgICAgICAgZGlhZ25vc3RpYyhcbiAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzUwMDFfSkFWQV9TRVRURVJTLmNyZWF0ZURldGFjaGVkKFxuICAgICAgICAgICAgbWVtYmVyLm5hbWUsXG4gICAgICAgICAgICB0eXBlLm5hbWUsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfYWxsVHlwZVJlZmVyZW5jZXNBcmVWYWxpZChcbiAgICB2YWxpZGF0b3I6IFZhbGlkYXRvcixcbiAgICBhc3NlbWJseTogc3BlYy5Bc3NlbWJseSxcbiAgICBkaWFnbm9zdGljOiBEaWFnbm9zdGljRW1pdHRlcixcbiAgKSB7XG4gICAgZm9yIChjb25zdCB0eXBlUmVmIG9mIF9hbGxUeXBlUmVmZXJlbmNlcyhhc3NlbWJseSkpIHtcbiAgICAgIGNvbnN0IFthc3NtXSA9IHR5cGVSZWYuZnFuLnNwbGl0KCcuJyk7XG4gICAgICBpZiAoYXNzZW1ibHkubmFtZSA9PT0gYXNzbSkge1xuICAgICAgICBpZiAoISh0eXBlUmVmLmZxbiBpbiAoYXNzZW1ibHkudHlwZXMgPz8ge30pKSkge1xuICAgICAgICAgIGRpYWdub3N0aWMoXG4gICAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzMwMDBfRVhQT1JURURfQVBJX1VTRVNfSElEREVOX1RZUEUuY3JlYXRlKFxuICAgICAgICAgICAgICB0eXBlUmVmLm5vZGUhLCAvLyBQcmV0ZW5kIHRoZXJlIGlzIGFsd2F5cyBhIHZhbHVlXG4gICAgICAgICAgICAgIHR5cGVSZWYuZnFuLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgZm9yZWlnbkFzc20gPSB2YWxpZGF0b3IucHJvamVjdEluZm8uZGVwZW5kZW5jeUNsb3N1cmUuZmluZChcbiAgICAgICAgKGRlcCkgPT4gZGVwLm5hbWUgPT09IGFzc20sXG4gICAgICApO1xuICAgICAgaWYgKCFmb3JlaWduQXNzbSkge1xuICAgICAgICBkaWFnbm9zdGljKFxuICAgICAgICAgIEpzaWlEaWFnbm9zdGljLkpTSUlfOTAwMF9VTktOT1dOX01PRFVMRS5jcmVhdGVEZXRhY2hlZChhc3NtKSxcbiAgICAgICAgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoISh0eXBlUmVmLmZxbiBpbiAoZm9yZWlnbkFzc20udHlwZXMgPz8ge30pKSkge1xuICAgICAgICBkaWFnbm9zdGljKFxuICAgICAgICAgIEpzaWlEaWFnbm9zdGljLkpTSUlfOTAwMV9UWVBFX05PVF9GT1VORC5jcmVhdGVEZXRhY2hlZCh0eXBlUmVmKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfaW5laHJpdGFuY2VEb2VzTm90Q2hhbmdlQ29udHJhY3RzKFxuICAgIHZhbGlkYXRvcjogVmFsaWRhdG9yLFxuICAgIGFzc2VtYmx5OiBzcGVjLkFzc2VtYmx5LFxuICAgIGRpYWdub3N0aWM6IERpYWdub3N0aWNFbWl0dGVyLFxuICApIHtcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgX2FsbFR5cGVzKGFzc2VtYmx5KSkge1xuICAgICAgaWYgKHNwZWMuaXNDbGFzc1R5cGUodHlwZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBtZXRob2Qgb2YgdHlwZS5tZXRob2RzID8/IFtdKSB7XG4gICAgICAgICAgX3ZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUobWV0aG9kLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHR5cGUucHJvcGVydGllcyA/PyBbXSkge1xuICAgICAgICAgIF92YWxpZGF0ZVByb3BlcnR5T3ZlcnJpZGUocHJvcGVydHksIHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHNwZWMuaXNDbGFzc09ySW50ZXJmYWNlVHlwZSh0eXBlKSAmJlxuICAgICAgICAodHlwZS5pbnRlcmZhY2VzPy5sZW5ndGggPz8gMCkgPiAwXG4gICAgICApIHtcbiAgICAgICAgZm9yIChjb25zdCBtZXRob2Qgb2YgdHlwZS5tZXRob2RzID8/IFtdKSB7XG4gICAgICAgICAgLy8gT3ZlcnJpZGVzIFwid2luXCIgb3ZlciBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgICBpZiAobWV0aG9kLm92ZXJyaWRlcykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIF92YWxpZGF0ZU1ldGhvZEltcGxlbWVudGF0aW9uKG1ldGhvZCwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiB0eXBlLnByb3BlcnRpZXMgPz8gW10pIHtcbiAgICAgICAgICBfdmFsaWRhdGVQcm9wZXJ0eUltcGxlbWVudGF0aW9uKHByb3BlcnR5LCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF92YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKFxuICAgICAgbWV0aG9kOiBzcGVjLk1ldGhvZCxcbiAgICAgIHR5cGU6IHNwZWMuQ2xhc3NUeXBlLFxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgaWYgKCF0eXBlLmJhc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgYmFzZVR5cGUgPSBfZGVyZWZlcmVuY2UoXG4gICAgICAgIHR5cGUuYmFzZSxcbiAgICAgICAgYXNzZW1ibHksXG4gICAgICAgIHZhbGlkYXRvcixcbiAgICAgICkgYXMgc3BlYy5DbGFzc1R5cGU7XG4gICAgICBpZiAoIWJhc2VUeXBlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG92ZXJyaWRkZW4gPSAoYmFzZVR5cGUubWV0aG9kcyA/PyBbXSkuZmluZChcbiAgICAgICAgKG0pID0+IG0ubmFtZSA9PT0gbWV0aG9kLm5hbWUsXG4gICAgICApO1xuICAgICAgaWYgKCFvdmVycmlkZGVuKSB7XG4gICAgICAgIHJldHVybiBfdmFsaWRhdGVNZXRob2RPdmVycmlkZShtZXRob2QsIGJhc2VUeXBlKTtcbiAgICAgIH1cbiAgICAgIF9hc3NlcnRTaWduYXR1cmVzTWF0Y2goXG4gICAgICAgIG92ZXJyaWRkZW4sXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgYCR7dHlwZS5mcW59IyR7bWV0aG9kLm5hbWV9YCxcbiAgICAgICAgYG92ZXJyaWRpbmcgJHtiYXNlVHlwZS5mcW59YCxcbiAgICAgICk7XG4gICAgICBtZXRob2Qub3ZlcnJpZGVzID0gYmFzZVR5cGUuZnFuO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3ZhbGlkYXRlUHJvcGVydHlPdmVycmlkZShcbiAgICAgIHByb3BlcnR5OiBzcGVjLlByb3BlcnR5LFxuICAgICAgdHlwZTogc3BlYy5DbGFzc1R5cGUsXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICBpZiAoIXR5cGUuYmFzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBiYXNlVHlwZSA9IF9kZXJlZmVyZW5jZShcbiAgICAgICAgdHlwZS5iYXNlLFxuICAgICAgICBhc3NlbWJseSxcbiAgICAgICAgdmFsaWRhdG9yLFxuICAgICAgKSBhcyBzcGVjLkNsYXNzVHlwZTtcbiAgICAgIGlmICghYmFzZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3ZlcnJpZGRlbiA9IChiYXNlVHlwZS5wcm9wZXJ0aWVzID8/IFtdKS5maW5kKFxuICAgICAgICAocCkgPT4gcC5uYW1lID09PSBwcm9wZXJ0eS5uYW1lLFxuICAgICAgKTtcbiAgICAgIGlmICghb3ZlcnJpZGRlbikge1xuICAgICAgICByZXR1cm4gX3ZhbGlkYXRlUHJvcGVydHlPdmVycmlkZShwcm9wZXJ0eSwgYmFzZVR5cGUpO1xuICAgICAgfVxuICAgICAgX2Fzc2VydFByb3BlcnRpZXNNYXRjaChcbiAgICAgICAgb3ZlcnJpZGRlbixcbiAgICAgICAgcHJvcGVydHksXG4gICAgICAgIGAke3R5cGUuZnFufSMke3Byb3BlcnR5Lm5hbWV9YCxcbiAgICAgICAgYG92ZXJyaWRpbmcgJHtiYXNlVHlwZS5mcW59YCxcbiAgICAgICk7XG4gICAgICBwcm9wZXJ0eS5vdmVycmlkZXMgPSBiYXNlVHlwZS5mcW47XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfdmFsaWRhdGVNZXRob2RJbXBsZW1lbnRhdGlvbihcbiAgICAgIG1ldGhvZDogc3BlYy5NZXRob2QsXG4gICAgICB0eXBlOiBzcGVjLkNsYXNzVHlwZSB8IHNwZWMuSW50ZXJmYWNlVHlwZSxcbiAgICApOiBib29sZWFuIHtcbiAgICAgIGlmICghdHlwZS5pbnRlcmZhY2VzKSB7XG4gICAgICAgIC8vIEFic3RyYWN0IGNsYXNzZXMgbWF5IG5vdCBkaXJlY3RseSBpbXBsZW1lbnQgYWxsIG1lbWJlcnMsIG5lZWQgdG8gY2hlY2sgdGhlaXIgc3VwZXJ0eXBlcy4uLlxuICAgICAgICBpZiAoc3BlYy5pc0NsYXNzVHlwZSh0eXBlKSAmJiB0eXBlLmJhc2UgJiYgdHlwZS5hYnN0cmFjdCkge1xuICAgICAgICAgIHJldHVybiBfdmFsaWRhdGVNZXRob2RJbXBsZW1lbnRhdGlvbihcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIF9kZXJlZmVyZW5jZSh0eXBlLmJhc2UsIGFzc2VtYmx5LCB2YWxpZGF0b3IpIGFzIHNwZWMuQ2xhc3NUeXBlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBpZmFjZSBvZiB0eXBlLmludGVyZmFjZXMpIHtcbiAgICAgICAgY29uc3QgaWZhY2VUeXBlID0gX2RlcmVmZXJlbmNlKFxuICAgICAgICAgIGlmYWNlLFxuICAgICAgICAgIGFzc2VtYmx5LFxuICAgICAgICAgIHZhbGlkYXRvcixcbiAgICAgICAgKSBhcyBzcGVjLkludGVyZmFjZVR5cGU7XG4gICAgICAgIGNvbnN0IGltcGxlbWVudGVkID0gKGlmYWNlVHlwZS5tZXRob2RzID8/IFtdKS5maW5kKFxuICAgICAgICAgIChtKSA9PiBtLm5hbWUgPT09IG1ldGhvZC5uYW1lLFxuICAgICAgICApO1xuICAgICAgICBpZiAoaW1wbGVtZW50ZWQpIHtcbiAgICAgICAgICBfYXNzZXJ0U2lnbmF0dXJlc01hdGNoKFxuICAgICAgICAgICAgaW1wbGVtZW50ZWQsXG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICBgJHt0eXBlLmZxbn0jJHttZXRob2QubmFtZX1gLFxuICAgICAgICAgICAgYGltcGxlbWVudGluZyAke2lmYWNlVHlwZS5mcW59YCxcbiAgICAgICAgICApO1xuICAgICAgICAgIG1ldGhvZC5vdmVycmlkZXMgPSBpZmFjZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3ZhbGlkYXRlTWV0aG9kSW1wbGVtZW50YXRpb24obWV0aG9kLCBpZmFjZVR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfdmFsaWRhdGVQcm9wZXJ0eUltcGxlbWVudGF0aW9uKFxuICAgICAgcHJvcGVydHk6IHNwZWMuUHJvcGVydHksXG4gICAgICB0eXBlOiBzcGVjLkNsYXNzVHlwZSB8IHNwZWMuSW50ZXJmYWNlVHlwZSxcbiAgICApOiBib29sZWFuIHtcbiAgICAgIGlmICghdHlwZS5pbnRlcmZhY2VzKSB7XG4gICAgICAgIC8vIEFic3RyYWN0IGNsYXNzZXMgbWF5IG5vdCBkaXJlY3RseSBpbXBsZW1lbnQgYWxsIG1lbWJlcnMsIG5lZWQgdG8gY2hlY2sgdGhlaXIgc3VwZXJ0eXBlcy4uLlxuICAgICAgICBpZiAoc3BlYy5pc0NsYXNzVHlwZSh0eXBlKSAmJiB0eXBlLmJhc2UgJiYgdHlwZS5hYnN0cmFjdCkge1xuICAgICAgICAgIHJldHVybiBfdmFsaWRhdGVQcm9wZXJ0eUltcGxlbWVudGF0aW9uKFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICBfZGVyZWZlcmVuY2UodHlwZS5iYXNlLCBhc3NlbWJseSwgdmFsaWRhdG9yKSBhcyBzcGVjLkNsYXNzVHlwZSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgaWZhY2Ugb2YgdHlwZS5pbnRlcmZhY2VzKSB7XG4gICAgICAgIGNvbnN0IGlmYWNlVHlwZSA9IF9kZXJlZmVyZW5jZShcbiAgICAgICAgICBpZmFjZSxcbiAgICAgICAgICBhc3NlbWJseSxcbiAgICAgICAgICB2YWxpZGF0b3IsXG4gICAgICAgICkgYXMgc3BlYy5JbnRlcmZhY2VUeXBlO1xuICAgICAgICBjb25zdCBpbXBsZW1lbnRlZCA9IChpZmFjZVR5cGUucHJvcGVydGllcyA/PyBbXSkuZmluZChcbiAgICAgICAgICAocCkgPT4gcC5uYW1lID09PSBwcm9wZXJ0eS5uYW1lLFxuICAgICAgICApO1xuICAgICAgICBpZiAoaW1wbGVtZW50ZWQpIHtcbiAgICAgICAgICBfYXNzZXJ0UHJvcGVydGllc01hdGNoKFxuICAgICAgICAgICAgaW1wbGVtZW50ZWQsXG4gICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgIGAke3R5cGUuZnFufSMke3Byb3BlcnR5Lm5hbWV9YCxcbiAgICAgICAgICAgIGBpbXBsZW1lbnRpbmcgJHtpZmFjZVR5cGUuZnFufWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwcm9wZXJ0eS5vdmVycmlkZXMgPSBpZmFjZVR5cGUuZnFuO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdmFsaWRhdGVQcm9wZXJ0eUltcGxlbWVudGF0aW9uKHByb3BlcnR5LCBpZmFjZVR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfYXNzZXJ0U2lnbmF0dXJlc01hdGNoKFxuICAgICAgZXhwZWN0ZWQ6IHNwZWMuTWV0aG9kLFxuICAgICAgYWN0dWFsOiBzcGVjLk1ldGhvZCxcbiAgICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgICBhY3Rpb246IHN0cmluZyxcbiAgICApIHtcbiAgICAgIGlmICghIWV4cGVjdGVkLnByb3RlY3RlZCAhPT0gISFhY3R1YWwucHJvdGVjdGVkKSB7XG4gICAgICAgIGNvbnN0IGV4cFZpc2liaWxpdHkgPSBleHBlY3RlZC5wcm90ZWN0ZWQgPyAncHJvdGVjdGVkJyA6ICdwdWJsaWMnO1xuICAgICAgICBjb25zdCBhY3RWaXNpYmlsaXR5ID0gYWN0dWFsLnByb3RlY3RlZCA/ICdwcm90ZWN0ZWQnIDogJ3B1YmxpYyc7XG4gICAgICAgIGRpYWdub3N0aWMoXG4gICAgICAgICAgSnNpaURpYWdub3N0aWMuSlNJSV81MDAyX09WRVJSSURFX0NIQU5HRVNfVklTSUJJTElUWS5jcmVhdGVEZXRhY2hlZChcbiAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgYWN0VmlzaWJpbGl0eSxcbiAgICAgICAgICAgIGV4cFZpc2liaWxpdHksXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVlcEVxdWFsKGFjdHVhbC5yZXR1cm5zLCBleHBlY3RlZC5yZXR1cm5zKSkge1xuICAgICAgICBjb25zdCBleHBUeXBlID0gc3BlYy5kZXNjcmliZVR5cGVSZWZlcmVuY2UoZXhwZWN0ZWQucmV0dXJucz8udHlwZSk7XG4gICAgICAgIGNvbnN0IGFjdFR5cGUgPSBzcGVjLmRlc2NyaWJlVHlwZVJlZmVyZW5jZShhY3R1YWwucmV0dXJucz8udHlwZSk7XG4gICAgICAgIGRpYWdub3N0aWMoXG4gICAgICAgICAgSnNpaURpYWdub3N0aWMuSlNJSV81MDAzX09WRVJSSURFX0NIQU5HRVNfUkVUVVJOX1RZUEUuY3JlYXRlRGV0YWNoZWQoXG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGFjdFR5cGUsXG4gICAgICAgICAgICBleHBUeXBlLFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBleHBlY3RlZFBhcmFtcyA9IGV4cGVjdGVkLnBhcmFtZXRlcnMgPz8gW107XG4gICAgICBjb25zdCBhY3R1YWxQYXJhbXMgPSBhY3R1YWwucGFyYW1ldGVycyA/PyBbXTtcbiAgICAgIGlmIChleHBlY3RlZFBhcmFtcy5sZW5ndGggIT09IGFjdHVhbFBhcmFtcy5sZW5ndGgpIHtcbiAgICAgICAgZGlhZ25vc3RpYyhcbiAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzUwMDVfT1ZFUlJJREVfQ0hBTkdFU19QQVJBTV9DT1VOVC5jcmVhdGVEZXRhY2hlZChcbiAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgYWN0dWFsUGFyYW1zLmxlbmd0aCxcbiAgICAgICAgICAgIGV4cGVjdGVkUGFyYW1zLmxlbmd0aCxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4cGVjdGVkUGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGV4cFBhcmFtID0gZXhwZWN0ZWRQYXJhbXNbaV07XG4gICAgICAgIGNvbnN0IGFjdFBhcmFtID0gYWN0dWFsUGFyYW1zW2ldO1xuICAgICAgICBpZiAoIWRlZXBFcXVhbChleHBQYXJhbS50eXBlLCBhY3RQYXJhbS50eXBlKSkge1xuICAgICAgICAgIGRpYWdub3N0aWMoXG4gICAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzUwMDZfT1ZFUlJJREVfQ0hBTkdFU19QQVJBTV9UWVBFLmNyZWF0ZURldGFjaGVkKFxuICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICBhY3RQYXJhbSxcbiAgICAgICAgICAgICAgZXhwUGFyYW0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90LWluZyB0aG9zZSB0byBmb3JjZSB0aGUgdmFsdWVzIHRvIGEgc3RyaWN0bHkgYm9vbGVhbiBjb250ZXh0ICh0aGV5J3JlIG9wdGlvbmFsLCB1bmRlZmluZWQgbWVhbnMgZmFsc2UpXG4gICAgICAgIGlmIChleHBQYXJhbS52YXJpYWRpYyAhPT0gYWN0UGFyYW0udmFyaWFkaWMpIHtcbiAgICAgICAgICBkaWFnbm9zdGljKFxuICAgICAgICAgICAgSnNpaURpYWdub3N0aWMuSlNJSV81MDA3X09WRVJSSURFX0NIQU5HRVNfVkFSSUFESUMuY3JlYXRlRGV0YWNoZWQoXG4gICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgIGFjdFBhcmFtLnZhcmlhZGljLFxuICAgICAgICAgICAgICBleHBQYXJhbS52YXJpYWRpYyxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwUGFyYW0ub3B0aW9uYWwgIT09IGFjdFBhcmFtLm9wdGlvbmFsKSB7XG4gICAgICAgICAgZGlhZ25vc3RpYyhcbiAgICAgICAgICAgIEpzaWlEaWFnbm9zdGljLkpTSUlfNTAwOF9PVkVSUklERV9DSEFOR0VTX1BBUkFNX09QVElPTkFMLmNyZWF0ZURldGFjaGVkKFxuICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICBhY3RQYXJhbSxcbiAgICAgICAgICAgICAgZXhwUGFyYW0sXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfYXNzZXJ0UHJvcGVydGllc01hdGNoKFxuICAgICAgZXhwZWN0ZWQ6IHNwZWMuUHJvcGVydHksXG4gICAgICBhY3R1YWw6IHNwZWMuUHJvcGVydHksXG4gICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgYWN0aW9uOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICBpZiAoISFleHBlY3RlZC5wcm90ZWN0ZWQgIT09ICEhYWN0dWFsLnByb3RlY3RlZCkge1xuICAgICAgICBjb25zdCBleHBWaXNpYmlsaXR5ID0gZXhwZWN0ZWQucHJvdGVjdGVkID8gJ3Byb3RlY3RlZCcgOiAncHVibGljJztcbiAgICAgICAgY29uc3QgYWN0VmlzaWJpbGl0eSA9IGFjdHVhbC5wcm90ZWN0ZWQgPyAncHJvdGVjdGVkJyA6ICdwdWJsaWMnO1xuICAgICAgICBkaWFnbm9zdGljKFxuICAgICAgICAgIEpzaWlEaWFnbm9zdGljLkpTSUlfNTAwMl9PVkVSUklERV9DSEFOR0VTX1ZJU0lCSUxJVFkuY3JlYXRlRGV0YWNoZWQoXG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGFjdFZpc2liaWxpdHksXG4gICAgICAgICAgICBleHBWaXNpYmlsaXR5LFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWRlZXBFcXVhbChleHBlY3RlZC50eXBlLCBhY3R1YWwudHlwZSkpIHtcbiAgICAgICAgZGlhZ25vc3RpYyhcbiAgICAgICAgICBKc2lpRGlhZ25vc3RpYy5KU0lJXzUwMDRfT1ZFUlJJREVfQ0hBTkdFU19QUk9QX1RZUEUuY3JlYXRlRGV0YWNoZWQoXG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGFjdHVhbC50eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQudHlwZSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGV4cGVjdGVkLmltbXV0YWJsZSAhPT0gYWN0dWFsLmltbXV0YWJsZSkge1xuICAgICAgICBkaWFnbm9zdGljKFxuICAgICAgICAgIEpzaWlEaWFnbm9zdGljLkpTSUlfNTAxMF9PVkVSUklERV9DSEFOR0VTX01VVEFCSUxJVFkuY3JlYXRlRGV0YWNoZWQoXG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGFjdHVhbC5pbW11dGFibGUsXG4gICAgICAgICAgICBleHBlY3RlZC5pbW11dGFibGUsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChleHBlY3RlZC5vcHRpb25hbCAhPT0gYWN0dWFsLm9wdGlvbmFsKSB7XG4gICAgICAgIGRpYWdub3N0aWMoXG4gICAgICAgICAgSnNpaURpYWdub3N0aWMuSlNJSV81MDA5X09WRVJSSURFX0NIQU5HRVNfUFJPUF9PUFRJT05BTC5jcmVhdGVEZXRhY2hlZChcbiAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgYWN0dWFsLm9wdGlvbmFsLFxuICAgICAgICAgICAgZXhwZWN0ZWQub3B0aW9uYWwsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhdGljTWVtYmVyc0FuZE5lc3RlZFR5cGVzTXVzdE5vdFNoYXJlUGFzY2FsQ2FzZU5hbWUoXG4gICAgXzogVmFsaWRhdG9yLFxuICAgIGFzc2VtYmx5OiBzcGVjLkFzc2VtYmx5LFxuICAgIGRpYWdub3N0aWM6IERpYWdub3N0aWNFbWl0dGVyLFxuICApIHtcbiAgICBmb3IgKGNvbnN0IG5lc3RlZFR5cGUgb2YgT2JqZWN0LnZhbHVlcyhhc3NlbWJseS50eXBlcyA/PyB7fSkpIHtcbiAgICAgIGlmIChuZXN0ZWRUeXBlLm5hbWVzcGFjZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgbmVzdGluZ1R5cGUgPVxuICAgICAgICBhc3NlbWJseS50eXBlcyFbYCR7YXNzZW1ibHkubmFtZX0uJHtuZXN0ZWRUeXBlLm5hbWVzcGFjZX1gXTtcbiAgICAgIGlmIChuZXN0aW5nVHlwZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgbmVzdGVkVHlwZU5hbWUgPSBDYXNlLnBhc2NhbChuZXN0ZWRUeXBlLm5hbWUpO1xuICAgICAgZm9yIChjb25zdCB7IG5hbWUsIG1lbWJlciB9IG9mIHN0YXRpY01lbWJlcnMobmVzdGluZ1R5cGUpKSB7XG4gICAgICAgIGlmIChuYW1lID09PSBuZXN0ZWRUeXBlTmFtZSkge1xuICAgICAgICAgIGxldCBkaWFnID1cbiAgICAgICAgICAgIEpzaWlEaWFnbm9zdGljLkpTSUlfNTAyMF9TVEFUSUNfTUVNQkVSX0NPTkZMSUNUU19XSVRIX05FU1RFRF9UWVBFLmNyZWF0ZShcbiAgICAgICAgICAgICAgZ2V0UmVsYXRlZE5vZGUobWVtYmVyKSEsXG4gICAgICAgICAgICAgIG5lc3RpbmdUeXBlLFxuICAgICAgICAgICAgICBtZW1iZXIsXG4gICAgICAgICAgICAgIG5lc3RlZFR5cGUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IG5lc3RlZFR5cGVOb2RlID0gZ2V0UmVsYXRlZE5vZGUobmVzdGVkVHlwZSk7XG4gICAgICAgICAgaWYgKG5lc3RlZFR5cGVOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRpYWcgPSBkaWFnLmFkZFJlbGF0ZWRJbmZvcm1hdGlvbihcbiAgICAgICAgICAgICAgbmVzdGVkVHlwZU5vZGUsXG4gICAgICAgICAgICAgICdUaGlzIGlzIHRoZSBjb25mbGljdGluZyBuZXN0ZWQgdHlwZSBkZWNsYXJhdGlvbicsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkaWFnbm9zdGljKGRpYWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhdGljTWVtYmVycyh0eXBlOiBzcGVjLlR5cGUpIHtcbiAgICAgIGlmIChzcGVjLmlzQ2xhc3NPckludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAuLi4odHlwZS5tZXRob2RzPy5maWx0ZXIoKG1ldGhvZCkgPT4gbWV0aG9kLnN0YXRpYykgPz8gW10pLFxuICAgICAgICAgIC4uLih0eXBlLnByb3BlcnRpZXM/LmZpbHRlcigocHJvcCkgPT4gcHJvcC5zdGF0aWMpID8/IFtdKSxcbiAgICAgICAgXS5tYXAoKG1lbWJlcikgPT4gKHsgbmFtZTogQ2FzZS5wYXNjYWwobWVtYmVyLm5hbWUpLCBtZW1iZXIgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGUubWVtYmVycy5tYXAoKG1lbWJlcikgPT4gKHsgbmFtZTogbWVtYmVyLm5hbWUsIG1lbWJlciB9KSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9hbGxUeXBlcyhhc3NtOiBzcGVjLkFzc2VtYmx5KTogc3BlYy5UeXBlW10ge1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhhc3NtLnR5cGVzID8/IHt9KTtcbn1cblxuZnVuY3Rpb24gX2FsbE1ldGhvZHMoXG4gIGFzc206IHNwZWMuQXNzZW1ibHksXG4pOiBBcnJheTx7IG1lbWJlcjogc3BlYy5NZXRob2Q7IHR5cGU6IHNwZWMuVHlwZSB9PiB7XG4gIGNvbnN0IG1ldGhvZHMgPSBuZXcgQXJyYXk8eyBtZW1iZXI6IHNwZWMuTWV0aG9kOyB0eXBlOiBzcGVjLlR5cGUgfT4oKTtcbiAgZm9yIChjb25zdCB0eXBlIG9mIF9hbGxUeXBlcyhhc3NtKSkge1xuICAgIGlmICghc3BlYy5pc0NsYXNzT3JJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCF0eXBlLm1ldGhvZHMpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0eXBlLm1ldGhvZHMuZm9yRWFjaCgobWV0aG9kKSA9PiBtZXRob2RzLnB1c2goeyBtZW1iZXI6IG1ldGhvZCwgdHlwZSB9KSk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59XG5cbmZ1bmN0aW9uIF9hbGxQcm9wZXJ0aWVzKFxuICBhc3NtOiBzcGVjLkFzc2VtYmx5LFxuKTogQXJyYXk8eyBtZW1iZXI6IHNwZWMuUHJvcGVydHk7IHR5cGU6IHNwZWMuVHlwZSB9PiB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSBuZXcgQXJyYXk8eyBtZW1iZXI6IHNwZWMuUHJvcGVydHk7IHR5cGU6IHNwZWMuVHlwZSB9PigpO1xuICBmb3IgKGNvbnN0IHR5cGUgb2YgX2FsbFR5cGVzKGFzc20pKSB7XG4gICAgaWYgKCFzcGVjLmlzQ2xhc3NPckludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIXR5cGUucHJvcGVydGllcykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHR5cGUucHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT5cbiAgICAgIHByb3BlcnRpZXMucHVzaCh7IG1lbWJlcjogcHJvcGVydHksIHR5cGUgfSksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydGllcztcbn1cblxuZnVuY3Rpb24gX2FsbE1lbWJlcnMoXG4gIGFzc206IHNwZWMuQXNzZW1ibHksXG4pOiBBcnJheTx7IG1lbWJlcjogc3BlYy5Qcm9wZXJ0eSB8IHNwZWMuTWV0aG9kOyB0eXBlOiBzcGVjLlR5cGUgfT4ge1xuICByZXR1cm4gWy4uLl9hbGxNZXRob2RzKGFzc20pLCAuLi5fYWxsUHJvcGVydGllcyhhc3NtKV07XG59XG5cbmludGVyZmFjZSBBbm5vdGF0ZWRUeXBlUmVmZXJlbmNlIGV4dGVuZHMgc3BlYy5OYW1lZFR5cGVSZWZlcmVuY2Uge1xuICByZWFkb25seSBub2RlOiB0cy5Ob2RlIHwgdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYWxsVHlwZVJlZmVyZW5jZXMoXG4gIGFzc206IHNwZWMuQXNzZW1ibHksXG4pOiByZWFkb25seSBBbm5vdGF0ZWRUeXBlUmVmZXJlbmNlW10ge1xuICBjb25zdCB0eXBlUmVmZXJlbmNlcyA9IG5ldyBBcnJheTxBbm5vdGF0ZWRUeXBlUmVmZXJlbmNlPigpO1xuICBmb3IgKGNvbnN0IHR5cGUgb2YgX2FsbFR5cGVzKGFzc20pKSB7XG4gICAgaWYgKCFzcGVjLmlzQ2xhc3NPckludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoc3BlYy5pc0NsYXNzVHlwZSh0eXBlKSkge1xuICAgICAgY29uc3Qgbm9kZSA9IGJpbmRpbmdzLmdldENsYXNzUmVsYXRlZE5vZGUodHlwZSk7XG4gICAgICBpZiAodHlwZS5iYXNlKSB7XG4gICAgICAgIHR5cGVSZWZlcmVuY2VzLnB1c2goe1xuICAgICAgICAgIGZxbjogdHlwZS5iYXNlLFxuICAgICAgICAgIG5vZGU6IG5vZGU/Lmhlcml0YWdlQ2xhdXNlcz8uZmluZChcbiAgICAgICAgICAgIChoYykgPT4gaGMudG9rZW4gPT09IHRzLlN5bnRheEtpbmQuRXh0ZW5kc0tleXdvcmQsXG4gICAgICAgICAgKT8udHlwZXNbMF0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUuaW5pdGlhbGl6ZXI/LnBhcmFtZXRlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYXJhbSBvZiB0eXBlLmluaXRpYWxpemVyLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICBfY29sbGVjdFR5cGVSZWZlcmVuY2VzKFxuICAgICAgICAgICAgcGFyYW0udHlwZSxcbiAgICAgICAgICAgIGJpbmRpbmdzLmdldFBhcmFtZXRlclJlbGF0ZWROb2RlKHBhcmFtKT8udHlwZSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlLmludGVyZmFjZXMpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBiaW5kaW5ncy5nZXRDbGFzc09ySW50ZXJmYWNlUmVsYXRlZE5vZGUodHlwZSk7XG4gICAgICB0eXBlLmludGVyZmFjZXMuZm9yRWFjaCgoaWZhY2UpID0+XG4gICAgICAgIHR5cGVSZWZlcmVuY2VzLnB1c2goe1xuICAgICAgICAgIGZxbjogaWZhY2UsXG4gICAgICAgICAgbm9kZTogbm9kZT8uaGVyaXRhZ2VDbGF1c2VzPy5maW5kKFxuICAgICAgICAgICAgKGhjKSA9PlxuICAgICAgICAgICAgICBoYy50b2tlbiA9PT1cbiAgICAgICAgICAgICAgKHNwZWMuaXNJbnRlcmZhY2VUeXBlKHR5cGUpXG4gICAgICAgICAgICAgICAgPyB0cy5TeW50YXhLaW5kLkltcGxlbWVudHNLZXl3b3JkXG4gICAgICAgICAgICAgICAgOiB0cy5TeW50YXhLaW5kLkV4dGVuZHNLZXl3b3JkKSxcbiAgICAgICAgICApLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgeyBtZW1iZXI6IHByb3AgfSBvZiBfYWxsUHJvcGVydGllcyhhc3NtKSkge1xuICAgIF9jb2xsZWN0VHlwZVJlZmVyZW5jZXMoXG4gICAgICBwcm9wLnR5cGUsXG4gICAgICBiaW5kaW5ncy5nZXRQcm9wZXJ0eVJlbGF0ZWROb2RlKHByb3ApPy50eXBlLFxuICAgICk7XG4gIH1cbiAgZm9yIChjb25zdCB7IG1lbWJlcjogbWV0aCB9IG9mIF9hbGxNZXRob2RzKGFzc20pKSB7XG4gICAgaWYgKG1ldGgucmV0dXJucykge1xuICAgICAgX2NvbGxlY3RUeXBlUmVmZXJlbmNlcyhcbiAgICAgICAgbWV0aC5yZXR1cm5zLnR5cGUsXG4gICAgICAgIGJpbmRpbmdzLmdldE1ldGhvZFJlbGF0ZWROb2RlKG1ldGgpPy50eXBlLFxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiBtZXRoLnBhcmFtZXRlcnMgPz8gW10pIHtcbiAgICAgIF9jb2xsZWN0VHlwZVJlZmVyZW5jZXMoXG4gICAgICAgIHBhcmFtLnR5cGUsXG4gICAgICAgIGJpbmRpbmdzLmdldFBhcmFtZXRlclJlbGF0ZWROb2RlKHBhcmFtKT8udHlwZSxcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0eXBlUmVmZXJlbmNlcztcblxuICBmdW5jdGlvbiBfY29sbGVjdFR5cGVSZWZlcmVuY2VzKFxuICAgIHR5cGU6IHNwZWMuVHlwZVJlZmVyZW5jZSxcbiAgICBub2RlOiB0cy5Ob2RlIHwgdW5kZWZpbmVkLFxuICApOiB2b2lkIHtcbiAgICBpZiAoc3BlYy5pc05hbWVkVHlwZVJlZmVyZW5jZSh0eXBlKSkge1xuICAgICAgdHlwZVJlZmVyZW5jZXMucHVzaCh7IC4uLnR5cGUsIG5vZGUgfSk7XG4gICAgfSBlbHNlIGlmIChzcGVjLmlzQ29sbGVjdGlvblR5cGVSZWZlcmVuY2UodHlwZSkpIHtcbiAgICAgIF9jb2xsZWN0VHlwZVJlZmVyZW5jZXModHlwZS5jb2xsZWN0aW9uLmVsZW1lbnR0eXBlLCBub2RlKTtcbiAgICB9IGVsc2UgaWYgKHNwZWMuaXNVbmlvblR5cGVSZWZlcmVuY2UodHlwZSkpIHtcbiAgICAgIHR5cGUudW5pb24udHlwZXMuZm9yRWFjaCgodHlwZSkgPT4gX2NvbGxlY3RUeXBlUmVmZXJlbmNlcyh0eXBlLCBub2RlKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9kZXJlZmVyZW5jZShcbiAgdHlwZVJlZjogc3RyaW5nIHwgc3BlYy5OYW1lZFR5cGVSZWZlcmVuY2UsXG4gIGFzc2VtYmx5OiBzcGVjLkFzc2VtYmx5LFxuICB2YWxpZGF0b3I6IFZhbGlkYXRvcixcbik6IHNwZWMuVHlwZSB8IHVuZGVmaW5lZCB7XG4gIGlmICh0eXBlb2YgdHlwZVJlZiAhPT0gJ3N0cmluZycpIHtcbiAgICB0eXBlUmVmID0gdHlwZVJlZi5mcW47XG4gIH1cbiAgY29uc3QgW2Fzc21dID0gdHlwZVJlZi5zcGxpdCgnLicpO1xuICBpZiAoYXNzZW1ibHkubmFtZSA9PT0gYXNzbSkge1xuICAgIHJldHVybiBhc3NlbWJseS50eXBlcz8uW3R5cGVSZWZdO1xuICB9XG4gIGNvbnN0IGZvcmVpZ25Bc3NtID0gdmFsaWRhdG9yLnByb2plY3RJbmZvLmRlcGVuZGVuY3lDbG9zdXJlLmZpbmQoXG4gICAgKGRlcCkgPT4gZGVwLm5hbWUgPT09IGFzc20sXG4gICk7XG4gIHJldHVybiBmb3JlaWduQXNzbT8udHlwZXM/Llt0eXBlUmVmXTtcbn1cblxuZnVuY3Rpb24gX2lzRW1wdHkoYXJyYXk6IHVuZGVmaW5lZCB8IGFueVtdKTogYXJyYXkgaXMgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoID09PSAwO1xufVxuIl19