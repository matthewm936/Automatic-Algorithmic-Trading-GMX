"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTypeRelatedNode = exports.getPropertyRelatedNode = exports.getParameterRelatedNode = exports.getMethodRelatedNode = exports.getInterfaceRelatedNode = exports.getEnumRelatedNode = exports.getClassOrInterfaceRelatedNode = exports.getClassRelatedNode = exports.getRelatedNode = exports.setPropertyRelatedNode = exports.setParameterRelatedNode = exports.setMethodRelatedNode = exports.setInterfaceRelatedNode = exports.setEnumRelatedNode = exports.setClassRelatedNode = void 0;
/**
 * This module provides typed method that can be used to access TypeScript Nodes
 * that are externally related to jsii assembly entities. This is backed by a
 * `WeakMap` so that attached metadata can be garbage collected once the note
 * they have been related to is no longer reachable.
 *
 * Methods have distinctive names based on the assembly node type they work with
 * because of how TypeScript does structural - and not nominal - type checking,
 * maling it impossible to use function overrides without having small
 * interfaces excessively match all types (e.g: spec.EnumMember is largely
 * equivalent to "anything that has a name").
 */
const STORAGE = new WeakMap();
//#region Attaching nodes
const setter = (object, node) => {
    STORAGE.set(object, node);
    return object;
};
exports.setClassRelatedNode = setter;
exports.setEnumRelatedNode = setter;
exports.setInterfaceRelatedNode = setter;
exports.setMethodRelatedNode = setter;
exports.setParameterRelatedNode = setter;
exports.setPropertyRelatedNode = setter;
//#endregion
//#region Inspecting attached nodes
function getRelatedNode(object) {
    return STORAGE.get(object);
}
exports.getRelatedNode = getRelatedNode;
exports.getClassRelatedNode = getRelatedNode;
exports.getClassOrInterfaceRelatedNode = getRelatedNode;
exports.getEnumRelatedNode = getRelatedNode;
exports.getInterfaceRelatedNode = getRelatedNode;
exports.getMethodRelatedNode = STORAGE.get.bind(STORAGE);
exports.getParameterRelatedNode = getRelatedNode;
exports.getPropertyRelatedNode = getRelatedNode;
exports.getTypeRelatedNode = getRelatedNode;
//#endregion
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1iaW5kaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5vZGUtYmluZGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0E7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBZ0IsQ0FBQztBQUU1Qyx5QkFBeUI7QUFFekIsTUFBTSxNQUFNLEdBQUcsQ0FBSSxNQUFTLEVBQUUsSUFBYSxFQUFLLEVBQUU7SUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxtQkFBbUIsR0FHVixNQUFNLENBQUM7QUFFaEIsUUFBQSxrQkFBa0IsR0FHVixNQUFNLENBQUM7QUFFZixRQUFBLHVCQUF1QixHQUdWLE1BQU0sQ0FBQztBQUVwQixRQUFBLG9CQUFvQixHQUtkLE1BQU0sQ0FBQztBQUViLFFBQUEsdUJBQXVCLEdBR2QsTUFBTSxDQUFDO0FBRWhCLFFBQUEsc0JBQXNCLEdBT2IsTUFBTSxDQUFDO0FBRTdCLFlBQVk7QUFFWixtQ0FBbUM7QUFFbkMsU0FBZ0IsY0FBYyxDQUM1QixNQUFXO0lBRVgsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBTSxDQUFDO0FBQ2xDLENBQUM7QUFKRCx3Q0FJQztBQUVZLFFBQUEsbUJBQW1CLEdBRU8sY0FBYyxDQUFDO0FBRXpDLFFBQUEsOEJBQThCLEdBRXNCLGNBQWMsQ0FBQztBQUVuRSxRQUFBLGtCQUFrQixHQUVPLGNBQWMsQ0FBQztBQUV4QyxRQUFBLHVCQUF1QixHQUVPLGNBQWMsQ0FBQztBQUU3QyxRQUFBLG9CQUFvQixHQUU0QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDM0UsT0FBTyxDQUNELENBQUM7QUFFSSxRQUFBLHVCQUF1QixHQU9wQixjQUFjLENBQUM7QUFFbEIsUUFBQSxzQkFBc0IsR0FPbkIsY0FBYyxDQUFDO0FBRWxCLFFBQUEsa0JBQWtCLEdBTWYsY0FBYyxDQUFDO0FBRS9CLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzcGVjIGZyb20gJ0Bqc2lpL3NwZWMnO1xuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdHlwZWQgbWV0aG9kIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWNjZXNzIFR5cGVTY3JpcHQgTm9kZXNcbiAqIHRoYXQgYXJlIGV4dGVybmFsbHkgcmVsYXRlZCB0byBqc2lpIGFzc2VtYmx5IGVudGl0aWVzLiBUaGlzIGlzIGJhY2tlZCBieSBhXG4gKiBgV2Vha01hcGAgc28gdGhhdCBhdHRhY2hlZCBtZXRhZGF0YSBjYW4gYmUgZ2FyYmFnZSBjb2xsZWN0ZWQgb25jZSB0aGUgbm90ZVxuICogdGhleSBoYXZlIGJlZW4gcmVsYXRlZCB0byBpcyBubyBsb25nZXIgcmVhY2hhYmxlLlxuICpcbiAqIE1ldGhvZHMgaGF2ZSBkaXN0aW5jdGl2ZSBuYW1lcyBiYXNlZCBvbiB0aGUgYXNzZW1ibHkgbm9kZSB0eXBlIHRoZXkgd29yayB3aXRoXG4gKiBiZWNhdXNlIG9mIGhvdyBUeXBlU2NyaXB0IGRvZXMgc3RydWN0dXJhbCAtIGFuZCBub3Qgbm9taW5hbCAtIHR5cGUgY2hlY2tpbmcsXG4gKiBtYWxpbmcgaXQgaW1wb3NzaWJsZSB0byB1c2UgZnVuY3Rpb24gb3ZlcnJpZGVzIHdpdGhvdXQgaGF2aW5nIHNtYWxsXG4gKiBpbnRlcmZhY2VzIGV4Y2Vzc2l2ZWx5IG1hdGNoIGFsbCB0eXBlcyAoZS5nOiBzcGVjLkVudW1NZW1iZXIgaXMgbGFyZ2VseVxuICogZXF1aXZhbGVudCB0byBcImFueXRoaW5nIHRoYXQgaGFzIGEgbmFtZVwiKS5cbiAqL1xuY29uc3QgU1RPUkFHRSA9IG5ldyBXZWFrTWFwPGFueSwgdHMuTm9kZT4oKTtcblxuLy8jcmVnaW9uIEF0dGFjaGluZyBub2Rlc1xuXG5jb25zdCBzZXR0ZXIgPSA8VD4ob2JqZWN0OiBULCBub2RlOiB0cy5Ob2RlKTogVCA9PiB7XG4gIFNUT1JBR0Uuc2V0KG9iamVjdCwgbm9kZSk7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0Q2xhc3NSZWxhdGVkTm9kZTogKFxuICBvYmplY3Q6IHNwZWMuQ2xhc3NUeXBlLFxuICBub2RlOiB0cy5DbGFzc0RlY2xhcmF0aW9uLFxuKSA9PiBzcGVjLkNsYXNzVHlwZSA9IHNldHRlcjtcblxuZXhwb3J0IGNvbnN0IHNldEVudW1SZWxhdGVkTm9kZTogKFxuICBvYmplY3Q6IHNwZWMuRW51bVR5cGUsXG4gIG5vZGU6IHRzLkVudW1EZWNsYXJhdGlvbixcbikgPT4gc3BlYy5FbnVtVHlwZSA9IHNldHRlcjtcblxuZXhwb3J0IGNvbnN0IHNldEludGVyZmFjZVJlbGF0ZWROb2RlOiAoXG4gIG9iamVjdDogc3BlYy5JbnRlcmZhY2VUeXBlLFxuICBub2RlOiB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbixcbikgPT4gc3BlYy5JbnRlcmZhY2VUeXBlID0gc2V0dGVyO1xuXG5leHBvcnQgY29uc3Qgc2V0TWV0aG9kUmVsYXRlZE5vZGU6IDxcbiAgVCBleHRlbmRzIHRzLk1ldGhvZERlY2xhcmF0aW9uIHwgdHMuTWV0aG9kU2lnbmF0dXJlLFxuPihcbiAgb2JqZWN0OiBzcGVjLk1ldGhvZCxcbiAgbm9kZTogVCxcbikgPT4gc3BlYy5NZXRob2QgPSBzZXR0ZXI7XG5cbmV4cG9ydCBjb25zdCBzZXRQYXJhbWV0ZXJSZWxhdGVkTm9kZTogKFxuICBvYmplY3Q6IHNwZWMuUGFyYW1ldGVyLFxuICBub2RlOiB0cy5QYXJhbWV0ZXJEZWNsYXJhdGlvbixcbikgPT4gc3BlYy5QYXJhbWV0ZXIgPSBzZXR0ZXI7XG5cbmV4cG9ydCBjb25zdCBzZXRQcm9wZXJ0eVJlbGF0ZWROb2RlOiAoXG4gIG9iamVjdDogc3BlYy5Qcm9wZXJ0eSxcbiAgbm9kZTpcbiAgICB8IHRzLkFjY2Vzc29yRGVjbGFyYXRpb25cbiAgICB8IHRzLlBhcmFtZXRlclByb3BlcnR5RGVjbGFyYXRpb25cbiAgICB8IHRzLlByb3BlcnR5RGVjbGFyYXRpb25cbiAgICB8IHRzLlByb3BlcnR5U2lnbmF0dXJlLFxuKSA9PiBzcGVjLlBhcmFtZXRlciA9IHNldHRlcjtcblxuLy8jZW5kcmVnaW9uXG5cbi8vI3JlZ2lvbiBJbnNwZWN0aW5nIGF0dGFjaGVkIG5vZGVzXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWxhdGVkTm9kZTxUIGV4dGVuZHMgdHMuTm9kZSA9IHRzLk5vZGU+KFxuICBvYmplY3Q6IGFueSxcbik6IFQgfCB1bmRlZmluZWQge1xuICByZXR1cm4gU1RPUkFHRS5nZXQob2JqZWN0KSBhcyBUO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0Q2xhc3NSZWxhdGVkTm9kZTogKFxuICBvYmplY3Q6IHNwZWMuQ2xhc3NUeXBlLFxuKSA9PiB0cy5DbGFzc0RlY2xhcmF0aW9uIHwgdW5kZWZpbmVkID0gZ2V0UmVsYXRlZE5vZGU7XG5cbmV4cG9ydCBjb25zdCBnZXRDbGFzc09ySW50ZXJmYWNlUmVsYXRlZE5vZGU6IChcbiAgb2JqZWN0OiBzcGVjLkNsYXNzVHlwZSB8IHNwZWMuSW50ZXJmYWNlVHlwZSxcbikgPT4gdHMuQ2xhc3NEZWNsYXJhdGlvbiB8IHRzLkludGVyZmFjZURlY2xhcmF0aW9uIHwgdW5kZWZpbmVkID0gZ2V0UmVsYXRlZE5vZGU7XG5cbmV4cG9ydCBjb25zdCBnZXRFbnVtUmVsYXRlZE5vZGU6IChcbiAgb2JqZWN0OiBzcGVjLkVudW1UeXBlLFxuKSA9PiB0cy5FbnVtRGVjbGFyYXRpb24gfCB1bmRlZmluZWQgPSBnZXRSZWxhdGVkTm9kZTtcblxuZXhwb3J0IGNvbnN0IGdldEludGVyZmFjZVJlbGF0ZWROb2RlOiAoXG4gIG9iamVjdDogc3BlYy5JbnRlcmZhY2VUeXBlLFxuKSA9PiB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbiB8IHVuZGVmaW5lZCA9IGdldFJlbGF0ZWROb2RlO1xuXG5leHBvcnQgY29uc3QgZ2V0TWV0aG9kUmVsYXRlZE5vZGU6IChcbiAgb2JqZWN0OiBzcGVjLk1ldGhvZCxcbikgPT4gdHMuTWV0aG9kRGVjbGFyYXRpb24gfCB0cy5NZXRob2RTaWduYXR1cmUgfCB1bmRlZmluZWQgPSBTVE9SQUdFLmdldC5iaW5kKFxuICBTVE9SQUdFLFxuKSBhcyBhbnk7XG5cbmV4cG9ydCBjb25zdCBnZXRQYXJhbWV0ZXJSZWxhdGVkTm9kZTogKFxuICBvYmplY3Q6IHNwZWMuUGFyYW1ldGVyLFxuKSA9PlxuICB8IHRzLkFjY2Vzc29yRGVjbGFyYXRpb25cbiAgfCB0cy5QYXJhbWV0ZXJQcm9wZXJ0eURlY2xhcmF0aW9uXG4gIHwgdHMuUHJvcGVydHlEZWNsYXJhdGlvblxuICB8IHRzLlByb3BlcnR5U2lnbmF0dXJlXG4gIHwgdW5kZWZpbmVkID0gZ2V0UmVsYXRlZE5vZGU7XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9wZXJ0eVJlbGF0ZWROb2RlOiAoXG4gIG9iamVjdDogc3BlYy5QYXJhbWV0ZXIsXG4pID0+XG4gIHwgdHMuQWNjZXNzb3JEZWNsYXJhdGlvblxuICB8IHRzLlBhcmFtZXRlclByb3BlcnR5RGVjbGFyYXRpb25cbiAgfCB0cy5Qcm9wZXJ0eURlY2xhcmF0aW9uXG4gIHwgdHMuUHJvcGVydHlTaWduYXR1cmVcbiAgfCB1bmRlZmluZWQgPSBnZXRSZWxhdGVkTm9kZTtcblxuZXhwb3J0IGNvbnN0IGdldFR5cGVSZWxhdGVkTm9kZTogKFxuICBvYmplY3Q6IHNwZWMuVHlwZSxcbikgPT5cbiAgfCB0cy5DbGFzc0RlY2xhcmF0aW9uXG4gIHwgdHMuRW51bURlY2xhcmF0aW9uXG4gIHwgdHMuSW50ZXJmYWNlRGVjbGFyYXRpb25cbiAgfCB1bmRlZmluZWQgPSBnZXRSZWxhdGVkTm9kZTtcblxuLy8jZW5kcmVnaW9uXG4iXX0=