"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadProjectInfo = void 0;
const spec = require("@jsii/spec");
const fs = require("fs-extra");
const log4js = require("log4js");
const path = require("path");
const semver = require("semver");
const semver_intersect_1 = require("semver-intersect");
const ts = require("typescript");
const jsii_diagnostic_1 = require("./jsii-diagnostic");
const utils_1 = require("./utils");
// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports
const spdx = require('spdx-license-list/simple');
const LOG = log4js.getLogger('jsii/package-info');
async function loadProjectInfo(projectRoot) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    const packageJsonPath = path.join(projectRoot, 'package.json');
    // eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-require-imports
    const pkg = require(packageJsonPath);
    const diagnostics = [];
    let bundleDependencies;
    for (const name of (_b = (_a = pkg.bundleDependencies) !== null && _a !== void 0 ? _a : pkg.bundledDependencies) !== null && _b !== void 0 ? _b : []) {
        const version = (_c = pkg.dependencies) === null || _c === void 0 ? void 0 : _c[name];
        if (!version) {
            throw new Error(`The "package.json" file has "${name}" in "bundleDependencies", but it is not declared in "dependencies"`);
        }
        if (pkg.peerDependencies && name in pkg.peerDependencies) {
            throw new Error(`The "package.json" file has "${name}" in "bundleDependencies", and also in "peerDependencies"`);
        }
        bundleDependencies = bundleDependencies !== null && bundleDependencies !== void 0 ? bundleDependencies : {};
        bundleDependencies[name] = _resolveVersion(version, projectRoot).version;
    }
    // Check peerDependencies are also in devDependencies
    // You need this to write tests properly. There are probably cases where
    // it makes sense to have this different, so most of what this checking
    // produces is warnings, not errors.
    const devDependencies = (_d = pkg.devDependencies) !== null && _d !== void 0 ? _d : {};
    for (const [name, rng] of Object.entries((_e = pkg.peerDependencies) !== null && _e !== void 0 ? _e : {})) {
        const range = new semver.Range(_resolveVersion(rng, projectRoot).version);
        const minVersion = (_f = semver.minVersion(range)) === null || _f === void 0 ? void 0 : _f.raw;
        if (!(name in devDependencies) ||
            devDependencies[name] !== `${minVersion}`) {
            diagnostics.push(jsii_diagnostic_1.JsiiDiagnostic.JSII_0006_MISSING_DEV_DEPENDENCY.createDetached(name, `${rng}`, `${minVersion}`, `${devDependencies[name]}`));
            continue;
        }
    }
    const transitiveAssemblies = {};
    const assemblyCache = new Map();
    const dependencies = await _loadDependencies(pkg.dependencies, projectRoot, transitiveAssemblies, assemblyCache, new Set(Object.keys(bundleDependencies !== null && bundleDependencies !== void 0 ? bundleDependencies : {})));
    const peerDependencies = await _loadDependencies(pkg.peerDependencies, projectRoot, transitiveAssemblies, assemblyCache);
    const transitiveDependencies = Object.values(transitiveAssemblies);
    const metadata = mergeMetadata({
        jsii: {
            pacmak: {
                // When `true`, `jsii-pacmak` will use the `Jsii$Default` implementation in code generation even for dependencies.
                hasDefaultInterfaces: true,
            },
        },
    }, (_g = pkg.jsii) === null || _g === void 0 ? void 0 : _g.metadata);
    const projectInfo = {
        projectRoot,
        packageJson: pkg,
        name: _required(pkg.name, 'The "package.json" file must specify the "name" attribute'),
        version: _required(pkg.version, 'The "package.json" file must specify the "version" attribute'),
        deprecated: pkg.deprecated,
        stability: _validateStability(pkg.stability, pkg.deprecated),
        author: _toPerson(_required(pkg.author, 'The "package.json" file must specify the "author" attribute'), 'author'),
        repository: _toRepository(_required(pkg.repository, 'The "package.json" file must specify the "repository" attribute')),
        license: _validateLicense(pkg.license),
        keywords: pkg.keywords,
        main: _required(pkg.main, 'The "package.json" file must specify the "main" attribute'),
        types: _required(pkg.types, 'The "package.json" file must specify the "types" attribute'),
        dependencies,
        peerDependencies,
        dependencyClosure: transitiveDependencies,
        bundleDependencies,
        targets: {
            ..._required(pkg.jsii, 'The "package.json" file must specify the "jsii" attribute').targets,
            js: { npm: pkg.name },
        },
        metadata,
        jsiiVersionFormat: _validateVersionFormat((_h = pkg.jsii.versionFormat) !== null && _h !== void 0 ? _h : 'full'),
        description: pkg.description,
        homepage: pkg.homepage,
        contributors: (_j = pkg.contributors) === null || _j === void 0 ? void 0 : _j.map((contrib, index) => _toPerson(contrib, `contributors[${index}]`, 'contributor')),
        excludeTypescript: (_l = (_k = pkg.jsii) === null || _k === void 0 ? void 0 : _k.excludeTypescript) !== null && _l !== void 0 ? _l : [],
        projectReferences: (_m = pkg.jsii) === null || _m === void 0 ? void 0 : _m.projectReferences,
        tsc: {
            outDir: (_p = (_o = pkg.jsii) === null || _o === void 0 ? void 0 : _o.tsc) === null || _p === void 0 ? void 0 : _p.outDir,
            rootDir: (_r = (_q = pkg.jsii) === null || _q === void 0 ? void 0 : _q.tsc) === null || _r === void 0 ? void 0 : _r.rootDir,
        },
        bin: pkg.bin,
        diagnostics: _loadDiagnostics((_s = pkg.jsii) === null || _s === void 0 ? void 0 : _s.diagnostics),
    };
    return { projectInfo, diagnostics };
}
exports.loadProjectInfo = loadProjectInfo;
function _guessRepositoryType(url) {
    if (url.endsWith('.git')) {
        return 'git';
    }
    const parts = /^([^:]+):\/\//.exec(url);
    if ((parts === null || parts === void 0 ? void 0 : parts[1]) !== 'http' && (parts === null || parts === void 0 ? void 0 : parts[1]) !== 'https') {
        return parts[1];
    }
    throw new Error(`The "package.json" file must specify the "repository.type" attribute (could not guess from ${url})`);
}
async function _loadDependencies(dependencies, searchPath, transitiveAssemblies, assemblyCache, bundled = new Set()) {
    if (!dependencies) {
        return {};
    }
    const packageVersions = {};
    for (const name of Object.keys(dependencies)) {
        if (bundled.has(name)) {
            continue;
        }
        const { version: versionString, localPackage } = _resolveVersion(dependencies[name], searchPath);
        const version = new semver.Range(versionString);
        if (!version) {
            throw new Error(`Invalid semver expression for ${name}: ${versionString}`);
        }
        const pkg = _tryResolveAssembly(name, localPackage, searchPath);
        LOG.debug(`Resolved dependency ${name} to ${pkg}`);
        // eslint-disable-next-line no-await-in-loop
        const assm = await loadAndValidateAssembly(pkg, assemblyCache);
        if (!semver.satisfies(assm.version, version)) {
            throw new Error(`Declared dependency on version ${versionString} of ${name}, but version ${assm.version} was found`);
        }
        packageVersions[assm.name] =
            packageVersions[assm.name] != null
                ? semver_intersect_1.intersect(versionString, packageVersions[assm.name])
                : versionString;
        transitiveAssemblies[assm.name] = assm;
        const pkgDir = path.dirname(pkg);
        if (assm.dependencies) {
            // eslint-disable-next-line no-await-in-loop
            await _loadDependencies(assm.dependencies, pkgDir, transitiveAssemblies, assemblyCache);
        }
    }
    return packageVersions;
}
/**
 * Load a JSII filename and validate it; cached to avoid redundant loads of the same JSII assembly
 */
async function loadAndValidateAssembly(jsiiFileName, cache) {
    if (!cache.has(jsiiFileName)) {
        try {
            cache.set(jsiiFileName, await fs.readJson(jsiiFileName));
        }
        catch (e) {
            throw new Error(`Error loading ${jsiiFileName}: ${e}`);
        }
    }
    return cache.get(jsiiFileName);
}
function _required(value, message) {
    if (value == null) {
        throw new Error(message);
    }
    return value;
}
function _toPerson(value, field, defaultRole = field) {
    if (typeof value === 'string') {
        value = utils_1.parsePerson(value);
    }
    return {
        name: _required(value.name, `The "package.json" file must specify the "${field}.name" attribute`),
        roles: value.roles ? [...new Set(value.roles)] : [defaultRole],
        email: value.email,
        url: value.url,
        organization: value.organization ? value.organization : undefined,
    };
}
function _toRepository(value) {
    if (typeof value === 'string') {
        value = utils_1.parseRepository(value);
    }
    return {
        url: _required(value.url, 'The "package.json" file must specify the "repository.url" attribute'),
        type: value.type || _guessRepositoryType(value.url),
        directory: value.directory,
    };
}
function _tryResolveAssembly(mod, localPackage, searchPath) {
    if (localPackage) {
        const result = path.join(localPackage, '.jsii');
        if (!fs.existsSync(result)) {
            throw new Error(`Assembly does not exist: ${result}`);
        }
        return result;
    }
    try {
        const paths = [searchPath, path.join(searchPath, 'node_modules')];
        return require.resolve(path.join(mod, '.jsii'), { paths });
    }
    catch {
        throw new Error(`Unable to locate jsii assembly for "${mod}". If this module is not jsii-enabled, it must also be declared under bundledDependencies.`);
    }
}
function _validateLicense(id) {
    if (id === 'UNLICENSED') {
        return id;
    }
    if (!spdx.has(id)) {
        throw new Error(`Invalid license identifier "${id}", see valid license identifiers at https://spdx.org/licenses/`);
    }
    return id;
}
function _validateVersionFormat(format) {
    if (format !== 'short' && format !== 'full') {
        throw new Error(`Invalid jsii.versionFormat "${format}", it must be either "short" or "full" (the default)`);
    }
    return format;
}
function _validateStability(stability, deprecated) {
    if (!stability && deprecated) {
        stability = spec.Stability.Deprecated;
    }
    else if (deprecated && stability !== spec.Stability.Deprecated) {
        throw new Error(`Package is deprecated (${deprecated}), but it's stability is ${stability} and not ${spec.Stability.Deprecated}`);
    }
    if (!stability) {
        return undefined;
    }
    if (!Object.values(spec.Stability).includes(stability)) {
        throw new Error(`Invalid stability "${stability}", it must be one of ${Object.values(spec.Stability).join(', ')}`);
    }
    return stability;
}
/**
 * Resolves an NPM package specifier to a version range
 *
 * If it was already a version range, return it. If it the
 * package references a local file, return the version that
 * package is at.
 */
function _resolveVersion(dep, searchPath) {
    const matches = /^file:(.+)$/.exec(dep);
    if (!matches) {
        return { version: dep };
    }
    const localPackage = path.resolve(searchPath, matches[1]);
    return {
        // Rendering as a caret version to maintain uniformity against the "standard".
        // eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires
        version: `^${require(path.join(localPackage, 'package.json')).version}`,
        localPackage,
    };
}
/**
 * Merges two metadata blocks together.
 *
 * @param base the base values
 * @param user the user-supplied values, which can override the `base` values
 *
 * @returns the merged metadata block
 */
function mergeMetadata(base, user) {
    if (user == null) {
        return base;
    }
    return mergeObjects(base, user);
    function mergeObjects(base, override) {
        const result = {};
        const allKeys = Array.from(new Set([...Object.keys(base), ...Object.keys(override)])).sort();
        for (const key of allKeys) {
            const baseValue = base[key];
            const overrideValue = override[key];
            if (typeof baseValue === 'object' && typeof overrideValue === 'object') {
                if (overrideValue != null) {
                    result[key] = mergeObjects(baseValue, overrideValue);
                }
            }
            else {
                result[key] = overrideValue !== null && overrideValue !== void 0 ? overrideValue : baseValue;
            }
        }
        return result;
    }
}
function _loadDiagnostics(entries) {
    if (entries === undefined || Object.keys(entries).length === 0) {
        return undefined;
    }
    const result = {};
    for (const code of Object.keys(entries)) {
        let category;
        switch (entries[code].trim().toLowerCase()) {
            case 'error':
                category = ts.DiagnosticCategory.Error;
                break;
            case 'warning':
                category = ts.DiagnosticCategory.Warning;
                break;
            case 'suggestion':
                category = ts.DiagnosticCategory.Suggestion;
                break;
            case 'message':
                category = ts.DiagnosticCategory.Message;
                break;
            default:
                throw new Error(`Invalid category '${entries[code]}' for code '${code}'`);
        }
        result[code] = category;
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,