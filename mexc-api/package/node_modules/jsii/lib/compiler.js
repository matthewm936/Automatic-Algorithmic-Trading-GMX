"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = exports.JSII_DIAGNOSTICS_CODE = exports.DIAGNOSTICS = void 0;
const Case = require("case");
const colors = require("colors/safe");
const fs = require("fs-extra");
const log4js = require("log4js");
const path = require("path");
const ts = require("typescript");
const assembler_1 = require("./assembler");
const jsii_diagnostic_1 = require("./jsii-diagnostic");
const utils = require("./utils");
const BASE_COMPILER_OPTIONS = {
    alwaysStrict: true,
    charset: 'utf8',
    declaration: true,
    experimentalDecorators: true,
    incremental: true,
    inlineSourceMap: true,
    inlineSources: true,
    lib: ['lib.es2019.d.ts'],
    module: ts.ModuleKind.CommonJS,
    newLine: ts.NewLineKind.LineFeed,
    noEmitOnError: true,
    noFallthroughCasesInSwitch: true,
    noImplicitAny: true,
    noImplicitReturns: true,
    noImplicitThis: true,
    noUnusedLocals: true,
    noUnusedParameters: true,
    resolveJsonModule: true,
    strict: true,
    strictNullChecks: true,
    strictPropertyInitialization: true,
    stripInternal: false,
    target: ts.ScriptTarget.ES2019,
};
const LOG = log4js.getLogger('jsii/compiler');
exports.DIAGNOSTICS = 'diagnostics';
exports.JSII_DIAGNOSTICS_CODE = 9999;
class Compiler {
    constructor(options) {
        var _a;
        this.options = options;
        this.rootFiles = [];
        this.compilerHost = ts.createIncrementalCompilerHost(BASE_COMPILER_OPTIONS, {
            ...ts.sys,
            getCurrentDirectory: () => this.options.projectInfo.projectRoot,
        });
        const configFileName = (_a = options.generateTypeScriptConfig) !== null && _a !== void 0 ? _a : 'tsconfig.json';
        this.configPath = path.join(this.options.projectInfo.projectRoot, configFileName);
        this.projectReferences =
            options.projectReferences !== undefined
                ? options.projectReferences
                : options.projectInfo.projectReferences !== undefined
                    ? options.projectInfo.projectReferences
                    : false;
    }
    /**
     * Compiles the configured program.
     *
     * @param files can be specified to override the standard source code location logic. Useful for example when testing "negatives".
     */
    async emit(...files) {
        await this._prepareForBuild(...files);
        return this._buildOnce();
    }
    async watch(opts) {
        await this._prepareForBuild();
        const pi = this.options.projectInfo;
        const projectRoot = pi.projectRoot;
        const host = ts.createWatchCompilerHost(this.configPath, {
            ...pi.tsc,
            ...BASE_COMPILER_OPTIONS,
            noEmitOnError: false,
        }, {
            ...ts.sys,
            getCurrentDirectory() {
                return projectRoot;
            },
        }, ts.createEmitAndSemanticDiagnosticsBuilderProgram, opts === null || opts === void 0 ? void 0 : opts.reportDiagnostics, opts === null || opts === void 0 ? void 0 : opts.reportWatchStatus);
        if (!host.getDefaultLibLocation) {
            throw new Error('No default library location was found on the TypeScript compiler host!');
        }
        const orig = host.afterProgramCreate;
        host.afterProgramCreate = async (builderProgram) => {
            const emitResult = await this._consumeProgram(builderProgram.getProgram(), host.getDefaultLibLocation());
            for (const diag of emitResult.diagnostics.filter((d) => d.code === exports.JSII_DIAGNOSTICS_CODE)) {
                utils.logDiagnostic(diag, projectRoot);
            }
            if (orig) {
                orig.call(host, builderProgram);
            }
            if (opts === null || opts === void 0 ? void 0 : opts.compilationComplete) {
                await opts.compilationComplete(emitResult);
            }
        };
        const watch = ts.createWatchProgram(host);
        if (opts === null || opts === void 0 ? void 0 : opts.nonBlocking) {
            // In non-blocking mode, returns the handle to the TypeScript watch interface.
            return watch;
        }
        // In blocking mode, returns a never-resolving promise.
        return new Promise(() => null);
    }
    /**
     * Prepares the project for build, by creating the necessary configuration
     * file(s), and assigning the relevant root file(s).
     *
     * @param files the files that were specified as input in the CLI invocation.
     */
    async _prepareForBuild(...files) {
        await this.buildTypeScriptConfig();
        await this.writeTypeScriptConfig();
        this.rootFiles = this.determineSources(files);
    }
    /**
     * Do a single build
     */
    async _buildOnce() {
        var _a, _b;
        if (!this.compilerHost.getDefaultLibLocation) {
            throw new Error('No default library location was found on the TypeScript compiler host!');
        }
        const tsconf = this.typescriptConfig;
        const pi = this.options.projectInfo;
        const prog = ts.createIncrementalProgram({
            rootNames: this.rootFiles.concat(_pathOfLibraries(this.compilerHost)),
            options: {
                ...pi.tsc,
                ...((_a = tsconf === null || tsconf === void 0 ? void 0 : tsconf.compilerOptions) !== null && _a !== void 0 ? _a : BASE_COMPILER_OPTIONS),
            },
            // Make the references absolute for the compiler
            projectReferences: (_b = tsconf.references) === null || _b === void 0 ? void 0 : _b.map((ref) => ({
                path: path.resolve(path.dirname(this.configPath), ref.path),
            })),
            host: this.compilerHost,
        });
        return this._consumeProgram(prog.getProgram(), this.compilerHost.getDefaultLibLocation());
    }
    async _consumeProgram(program, stdlib) {
        const diagnostics = [...ts.getPreEmitDiagnostics(program)];
        let hasErrors = false;
        if (!hasErrors && this.diagsHaveAbortableErrors(diagnostics)) {
            hasErrors = true;
            LOG.error('Compilation errors prevented the JSII assembly from being created');
        }
        // Do the "Assembler" part first because we need some of the analysis done in there
        // to post-process the AST
        const assembler = new assembler_1.Assembler(this.options.projectInfo, program, stdlib, {
            stripDeprecated: this.options.stripDeprecated,
            stripDeprecatedAllowListFile: this.options.stripDeprecatedAllowListFile,
            addDeprecationWarnings: this.options.addDeprecationWarnings,
        });
        try {
            const assmEmit = await assembler.emit();
            if (!hasErrors &&
                (assmEmit.emitSkipped ||
                    this.diagsHaveAbortableErrors(assmEmit.diagnostics))) {
                hasErrors = true;
                LOG.error('Type model errors prevented the JSII assembly from being created');
            }
            diagnostics.push(...assmEmit.diagnostics);
        }
        catch (e) {
            diagnostics.push(jsii_diagnostic_1.JsiiDiagnostic.JSII_9997_UNKNOWN_ERROR.createDetached(e));
            hasErrors = true;
        }
        // Do the emit, but add in transformers which are going to replace real
        // comments with synthetic ones.
        const emit = program.emit(undefined, // targetSourceFile
        undefined, // writeFile
        undefined, // cancellationToken
        undefined, // emitOnlyDtsFiles
        assembler.customTransformers);
        diagnostics.push(...emit.diagnostics);
        if (!hasErrors &&
            (emit.emitSkipped || this.diagsHaveAbortableErrors(emit.diagnostics))) {
            hasErrors = true;
            LOG.error('Compilation errors prevented the JSII assembly from being created');
        }
        return {
            emitSkipped: hasErrors,
            diagnostics: ts.sortAndDeduplicateDiagnostics(diagnostics),
            emittedFiles: emit.emittedFiles,
        };
    }
    /**
     * Build the TypeScript config object
     *
     * This is the object that will be written to disk.
     */
    async buildTypeScriptConfig() {
        var _a, _b, _c, _d, _e, _f;
        let references;
        if (this.projectReferences) {
            references = await this.findProjectReferences();
        }
        const pi = this.options.projectInfo;
        this.typescriptConfig = {
            compilerOptions: {
                ...pi.tsc,
                ...BASE_COMPILER_OPTIONS,
                // Enable composite mode if project references are enabled
                composite: this.projectReferences,
                // When incremental, configure a tsbuildinfo file
                tsBuildInfoFile: path.join((_b = (_a = pi.tsc) === null || _a === void 0 ? void 0 : _a.outDir) !== null && _b !== void 0 ? _b : '.', 'tsconfig.tsbuildinfo'),
            },
            include: [
                ((_c = pi.tsc) === null || _c === void 0 ? void 0 : _c.rootDir) != null
                    ? path.join(pi.tsc.rootDir, '**', '*.ts')
                    : path.join('**', '*.ts'),
            ],
            exclude: [
                'node_modules',
                ...((_d = pi.excludeTypescript) !== null && _d !== void 0 ? _d : []),
                ...(((_e = pi.tsc) === null || _e === void 0 ? void 0 : _e.outDir) != null &&
                    (((_f = pi.tsc) === null || _f === void 0 ? void 0 : _f.rootDir) == null ||
                        path
                            .resolve(pi.tsc.outDir)
                            .startsWith(path.resolve(pi.tsc.rootDir) + path.sep))
                    ? [path.join(pi.tsc.outDir, '**', '*.ts')]
                    : []),
            ],
            // Change the references a little. We write 'originalpath' to the
            // file under the 'path' key, which is the same as what the
            // TypeScript compiler does. Make it relative so that the files are
            // movable. Not strictly required but looks better.
            references: references === null || references === void 0 ? void 0 : references.map((p) => ({ path: p })),
        };
    }
    /**
     * Creates a `tsconfig.json` file to improve the IDE experience.
     *
     * @return the fully qualified path to the `tsconfig.json` file
     */
    async writeTypeScriptConfig() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const commentKey = '_generated_by_jsii_';
        const commentValue = 'Generated by jsii - safe to delete, and ideally should be in .gitignore';
        this.typescriptConfig[commentKey] = commentValue;
        if (await fs.pathExists(this.configPath)) {
            const currentConfig = await fs.readJson(this.configPath);
            if (!(commentKey in currentConfig)) {
                throw new Error(`A '${this.configPath}' file that was not generated by jsii is in ${this.options.projectInfo.projectRoot}. Aborting instead of overwriting.`);
            }
        }
        const outputConfig = {
            ...this.typescriptConfig,
            compilerOptions: {
                ...(_a = this.typescriptConfig) === null || _a === void 0 ? void 0 : _a.compilerOptions,
                lib: (_d = (_c = (_b = this.typescriptConfig) === null || _b === void 0 ? void 0 : _b.compilerOptions) === null || _c === void 0 ? void 0 : _c.lib) === null || _d === void 0 ? void 0 : _d.map((lib) => 
                // Drop the "lib." prefix and ".d.ts" suffix before writing up the tsconfig.json file
                lib.slice(4, lib.length - 5)),
                // Re-write the module, targets & jsx to be the JSON format instead of Programmatic API
                module: (((_f = (_e = this.typescriptConfig) === null || _e === void 0 ? void 0 : _e.compilerOptions) === null || _f === void 0 ? void 0 : _f.module) &&
                    ts.ModuleKind[this.typescriptConfig.compilerOptions.module]),
                newLine: newLineForTsconfigJson((_g = this.typescriptConfig) === null || _g === void 0 ? void 0 : _g.compilerOptions.newLine),
                target: (((_j = (_h = this.typescriptConfig) === null || _h === void 0 ? void 0 : _h.compilerOptions) === null || _j === void 0 ? void 0 : _j.target) &&
                    ts.ScriptTarget[this.typescriptConfig.compilerOptions.target]),
                jsx: (((_l = (_k = this.typescriptConfig) === null || _k === void 0 ? void 0 : _k.compilerOptions) === null || _l === void 0 ? void 0 : _l.jsx) &&
                    Case.snake(ts.JsxEmit[this.typescriptConfig.compilerOptions.jsx])),
            },
        };
        LOG.debug(`Creating or updating ${colors.blue(this.configPath)}`);
        await fs.writeJson(this.configPath, outputConfig, {
            encoding: 'utf8',
            spaces: 2,
        });
        /**
         * This is annoying - the values expected in the tsconfig.json file are not
         * the same as the enum constant names, or their values. So we need this
         * function to map the "compiler API version" to the "tsconfig.json version"
         *
         * @param newLine the compiler form of the new line configuration
         *
         * @return the requivalent value to put in tsconfig.json
         */
        function newLineForTsconfigJson(newLine) {
            switch (newLine) {
                case ts.NewLineKind.CarriageReturnLineFeed:
                    return 'crlf';
                case ts.NewLineKind.LineFeed:
                    return 'lf';
                default:
                    return undefined;
            }
        }
    }
    /**
     * Find all dependencies that look like TypeScript projects.
     *
     * Enumerate all dependencies, if they have a tsconfig.json file with
     * "composite: true" we consider them project references.
     *
     * (Note: TypeScript seems to only correctly find transitive project references
     * if there's an "index" tsconfig.json of all projects somewhere up the directory
     * tree)
     */
    async findProjectReferences() {
        var _a;
        const pkg = this.options.projectInfo.packageJson;
        const ret = new Array();
        const dependencyNames = new Set();
        for (const dependencyMap of [
            pkg.dependencies,
            pkg.devDependencies,
            pkg.peerDependencies,
        ]) {
            if (dependencyMap === undefined) {
                continue;
            }
            Object.keys(dependencyMap).forEach(dependencyNames.add.bind(dependencyNames));
        }
        for (const tsconfigFile of await Promise.all(Array.from(dependencyNames).map((depName) => this.findMonorepoPeerTsconfig(depName)))) {
            if (!tsconfigFile) {
                continue;
            }
            const { config: tsconfig } = ts.readConfigFile(tsconfigFile, ts.sys.readFile);
            // Add references to any TypeScript package we find that is 'composite' enabled.
            // Make it relative.
            if ((_a = tsconfig.compilerOptions) === null || _a === void 0 ? void 0 : _a.composite) {
                ret.push(path.relative(this.options.projectInfo.projectRoot, path.dirname(tsconfigFile)));
            }
            else {
                // Not a composite package--if this package is in a node_modules directory, that is most
                // likely correct, otherwise it is most likely an error (heuristic here, I don't know how to
                // properly check this).
                if (tsconfigFile.includes('node_modules')) {
                    LOG.warn('%s: not a composite TypeScript package, but it probably should be', path.dirname(tsconfigFile));
                }
            }
        }
        return ret;
    }
    /**
     * Find source files using the same mechanism that the TypeScript compiler itself uses.
     *
     * Respects includes/excludes/etc.
     *
     * This makes it so that running 'tsc' and running 'jsii' has the same behavior.
     */
    determineSources(files) {
        const ret = new Array();
        if (files.length > 0) {
            ret.push(...files);
        }
        else {
            const parseConfigHost = parseConfigHostFromCompilerHost(this.compilerHost);
            const parsed = ts.parseJsonConfigFileContent(this.typescriptConfig, parseConfigHost, this.options.projectInfo.projectRoot);
            ret.push(...parsed.fileNames);
        }
        return ret;
    }
    /**
     * Resolve the given dependency name from the current package, and find the associated tsconfig.json location
     *
     * Because we have the following potential directory layout:
     *
     *   package/node_modules/some_dependency
     *   package/tsconfig.json
     *
     * We resolve symlinks and only find a "TypeScript" dependency if doesn't have 'node_modules' in
     * the path after resolving symlinks (i.e., if it's a peer package in the same monorepo).
     *
     * Returns undefined if no such tsconfig could be found.
     */
    async findMonorepoPeerTsconfig(depName) {
        const paths = nodeJsCompatibleSearchPaths(this.options.projectInfo.projectRoot);
        let dep;
        try {
            dep = require.resolve(`${depName}/tsconfig.json`, { paths });
        }
        catch {
            // Package does not have a tsconfig.json
            return undefined;
        }
        // Resolve symlinks, to check if this is a monorepo peer
        const dependencyRealPath = await fs.realpath(dep);
        if (dependencyRealPath.split(path.sep).includes('node_modules')) {
            return undefined;
        }
        return dependencyRealPath;
    }
    diagsHaveAbortableErrors(diags) {
        return diags.some((d) => d.category === ts.DiagnosticCategory.Error ||
            (this.options.failOnWarnings &&
                d.category === ts.DiagnosticCategory.Warning));
    }
}
exports.Compiler = Compiler;
function _pathOfLibraries(host) {
    var _a;
    if (!BASE_COMPILER_OPTIONS.lib || BASE_COMPILER_OPTIONS.lib.length === 0) {
        return [];
    }
    const lib = (_a = host.getDefaultLibLocation) === null || _a === void 0 ? void 0 : _a.call(host);
    if (!lib) {
        throw new Error(`Compiler host doesn't have a default library directory available for ${BASE_COMPILER_OPTIONS.lib.join(', ')}`);
    }
    return BASE_COMPILER_OPTIONS.lib.map((name) => path.join(lib, name));
}
/**
 * Return all possible 'node_modules' directories from a given starting directory.
 */
function nodeJsCompatibleSearchPaths(dir) {
    const ret = new Array();
    let lastDir;
    do {
        ret.push(path.join(dir, 'node_modules'));
        lastDir = dir;
        dir = path.dirname(dir);
    } while (dir !== lastDir); // path.dirname('/') === '/', also works on Windows
    return ret;
}
function parseConfigHostFromCompilerHost(host) {
    // Copied from upstream
    // https://github.com/Microsoft/TypeScript/blob/9e05abcfd3f8bb3d6775144ede807daceab2e321/src/compiler/program.ts#L3105
    return {
        fileExists: (f) => host.fileExists(f),
        readDirectory(root, extensions, excludes, includes, depth) {
            if (host.readDirectory === undefined) {
                throw new Error("'CompilerHost.readDirectory' must be implemented to correctly process 'projectReferences'");
            }
            return host.readDirectory(root, extensions, excludes, includes, depth);
        },
        readFile: (f) => host.readFile(f),
        useCaseSensitiveFileNames: host.useCaseSensitiveFileNames(),
        trace: host.trace ? (s) => host.trace(s) : undefined,
    };
}
//# sourceMappingURL=data:application/json;base64,