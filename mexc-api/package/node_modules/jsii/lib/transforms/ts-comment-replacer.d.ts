import * as ts from 'typescript';
/**
 * Machinery to replace physical doc comments in the AST with synthetic ones
 *
 * We use this to slightly tweak the comment blocks that we emit to the .js
 * and .d.ts files.
 *
 * The process is as follows:
 *
 * - Iterate over all nodes of the AST. Do the analysis that we require, remember
 *   the Nodes we want to replace the comments of in a table.
 * - When we're ready to emit JS/DTS, use transforms to replace the physical with
 *   synthetic comments by looking up the visited Nodes in the table.
 * - During transformation, we are given a "shadow copy" (?) of the actual node,
 *   so we need to resolve it to the OriginalNode (which is the one that the assembler
 *   saw) -- note that only _original_ nodes have SourceFiles attached.
 *
 * It must be done this way because:
 *
 * - Comments don't have a node in the AST. Instead, comments are called "trivia"
 *   and are discovered by _scanning the source file between two token positions_
 *   in an on-demand fashion.
 * - The only way to "add" comments to a node is to call addSyntheticComment,
 *   which remembers the comment we'd like to emit on the EmitNode of the corresponding
 *   AST Node (the printer will respect this SyntheticComment when printing everything
 *   back out again).
 * - EmitNodes are used for bookkeeping, and are cleared between different passes of
 *   the compiler. We can therefore not add the synthetic comments in the assembler
 *   pass, we have to be able to do it on-demand in a special "transform" pass.
 */
export declare class TsCommentReplacer {
    private readonly nodes;
    /**
     * Override the doc comment of an AST node
     */
    overrideNodeDocComment(node: ts.Node, docstring: string): void;
    /**
     * Return the set of Transformers to be used in TSC's program.emit()
     */
    makeTransformers(): ts.CustomTransformers;
    private handleNode;
    /**
     * Add a synthetic comment formatted like a TSDoc block
     *
     * A multiline trivia comment looks like "/ * (...content...) * / (newline?)".
     *
     * The TypeScript printer will take care of indentation.
     */
    private addTsdocComment;
}
