"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeprecatedRemover = void 0;
const spec_1 = require("@jsii/spec");
const path_1 = require("path");
const ts = require("typescript");
const jsii_diagnostic_1 = require("../jsii-diagnostic");
const bindings = require("../node-bindings");
class DeprecatedRemover {
    constructor(typeChecker, allowlistedDeprecations) {
        this.typeChecker = typeChecker;
        this.allowlistedDeprecations = allowlistedDeprecations;
        this.transformations = new Array();
        this.nodesToRemove = new Set();
    }
    /**
     * Obtains the configuration for the TypeScript transform(s) that will remove
     * `@deprecated` members from the generated declarations (`.d.ts`) files. It
     * will leverage information accumulated during `#removeFrom(Assembly)` in
     * order to apply corrections to inheritance chains, ensuring a valid output
     * is produced.
     */
    get customTransformers() {
        return {
            afterDeclarations: [
                (context) => {
                    const transformer = new DeprecationRemovalTransformer(this.typeChecker, context, this.transformations, this.nodesToRemove);
                    return transformer.transform.bind(transformer);
                },
            ],
        };
    }
    /**
     * Removes all `@deprecated` API elements from the provided assembly, and
     * records the operations needed in order to fix the inheritance chains that
     * mix `@deprecated` and non-`@deprecated` types.
     *
     * @param assembly the assembly to be modified.
     *
     * @returns diagnostic messages produced when validating no remaining API
     *          makes use of a `@deprecated` type that was removed.
     */
    removeFrom(assembly) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (assembly.types == null) {
            return [];
        }
        const strippedFqns = new Set();
        const replaceWithClass = new Map();
        const replaceWithInterfaces = new Map();
        // Find all types that will be stripped out
        for (const [fqn, typeInfo] of Object.entries(assembly.types)) {
            if (((_a = typeInfo.docs) === null || _a === void 0 ? void 0 : _a.stability) === spec_1.Stability.Deprecated) {
                if (!this.shouldFqnBeStripped(fqn)) {
                    continue;
                }
                strippedFqns.add(fqn);
                if (spec_1.isClassType(typeInfo) && typeInfo.base != null) {
                    replaceWithClass.set(fqn, typeInfo.base);
                }
                if (spec_1.isClassOrInterfaceType(typeInfo) && typeInfo.interfaces != null) {
                    replaceWithInterfaces.set(fqn, typeInfo.interfaces);
                }
                this.nodesToRemove.add(bindings.getRelatedNode(typeInfo));
            }
        }
        for (const [fqn, typeInfo] of Object.entries(assembly.types)) {
            // Ignore `@deprecated` types
            if (strippedFqns.has(fqn)) {
                continue;
            }
            // Enums cannot have references to `@deprecated` types, but can have deprecated members
            if (spec_1.isEnumType(typeInfo)) {
                const enumNode = bindings.getEnumRelatedNode(typeInfo);
                const members = [];
                typeInfo.members.forEach((mem) => {
                    var _a;
                    if (((_a = mem.docs) === null || _a === void 0 ? void 0 : _a.stability) === spec_1.Stability.Deprecated &&
                        this.shouldFqnBeStripped(`${fqn}#${mem.name}`)) {
                        const matchingMemberNode = enumNode.members.find((enumMem) => enumMem.name.getText() === mem.name);
                        if (matchingMemberNode) {
                            this.nodesToRemove.add(matchingMemberNode);
                        }
                    }
                    else {
                        members.push(mem);
                    }
                });
                typeInfo.members = members;
                continue;
            }
            // For classes, we erase `@deprecated` base classes, replacing as needed
            const additionalInterfaces = new Set();
            if (spec_1.isClassType(typeInfo) &&
                typeInfo.base != null &&
                strippedFqns.has(typeInfo.base)) {
                while (typeInfo.base != null && strippedFqns.has(typeInfo.base)) {
                    const oldBase = assembly.types[typeInfo.base];
                    (_b = oldBase.interfaces) === null || _b === void 0 ? void 0 : _b.forEach((fqn) => additionalInterfaces.add(fqn));
                    typeInfo.base = replaceWithClass.get(typeInfo.base);
                }
                this.transformations.push(typeInfo.base != null
                    ? Transformation.replaceBaseClass(this.typeChecker, bindings.getClassRelatedNode(typeInfo), typeInfo.base in assembly.types
                        ? (_c = bindings.getClassRelatedNode(assembly.types[typeInfo.base])) !== null && _c !== void 0 ? _c : typeInfo.base : typeInfo.base)
                    : Transformation.removeBaseClass(this.typeChecker, bindings.getClassRelatedNode(typeInfo)));
            }
            // Be defensive in case we add other kinds in the future
            if (!spec_1.isClassOrInterfaceType(typeInfo)) {
                throw new Error(`Unhandled type encountered! ${JSON.stringify(typeInfo, null, 2)}`);
            }
            // Strip all `@deprecated` interfaces from the inheritance tree, replacing as needed
            if (((_d = typeInfo.interfaces) === null || _d === void 0 ? void 0 : _d.some((fqn) => strippedFqns.has(fqn))) ||
                additionalInterfaces.size > 0) {
                const originalSet = new Set((_e = typeInfo.interfaces) !== null && _e !== void 0 ? _e : []);
                const newSet = new Set();
                const candidates = Array.from(new Set([...originalSet, ...additionalInterfaces]));
                while (candidates.length > 0) {
                    const fqn = candidates.pop();
                    if (!strippedFqns.has(fqn)) {
                        newSet.add(fqn);
                        if (!originalSet.has(fqn)) {
                            this.transformations.push(Transformation.addInterface(this.typeChecker, bindings.getClassOrInterfaceRelatedNode(typeInfo), fqn in assembly.types
                                ? (_f = bindings.getInterfaceRelatedNode(assembly.types[fqn])) !== null && _f !== void 0 ? _f : fqn : fqn));
                        }
                        continue;
                    }
                    if (originalSet.has(fqn)) {
                        this.transformations.push(Transformation.removeInterface(this.typeChecker, bindings.getClassOrInterfaceRelatedNode(typeInfo), bindings.getInterfaceRelatedNode(assembly.types[fqn])));
                    }
                    const replacement = replaceWithInterfaces.get(fqn);
                    if (replacement != null) {
                        candidates.push(...replacement);
                    }
                }
                typeInfo.interfaces =
                    newSet.size > 0 ? Array.from(newSet).sort() : undefined;
            }
            // Drop all `@deprecated` members, and remove "overrides" from stripped types
            const methods = [];
            const properties = [];
            (_g = typeInfo.methods) === null || _g === void 0 ? void 0 : _g.forEach((meth) => {
                var _a;
                if (((_a = meth.docs) === null || _a === void 0 ? void 0 : _a.stability) === spec_1.Stability.Deprecated &&
                    this.shouldFqnBeStripped(`${fqn}#${meth.name}`)) {
                    this.nodesToRemove.add(bindings.getMethodRelatedNode(meth));
                }
                else {
                    methods.push(meth.overrides != null && strippedFqns.has(meth.overrides)
                        ? { ...meth, overrides: undefined }
                        : meth);
                }
            });
            typeInfo.methods = typeInfo.methods ? methods : undefined;
            (_h = typeInfo.properties) === null || _h === void 0 ? void 0 : _h.forEach((prop) => {
                var _a;
                if (((_a = prop.docs) === null || _a === void 0 ? void 0 : _a.stability) === spec_1.Stability.Deprecated &&
                    this.shouldFqnBeStripped(`${fqn}#${prop.name}`)) {
                    this.nodesToRemove.add(bindings.getParameterRelatedNode(prop));
                }
                else {
                    properties.push(prop.overrides != null && strippedFqns.has(prop.overrides)
                        ? { ...prop, overrides: undefined }
                        : prop);
                }
            });
            typeInfo.properties = typeInfo.properties ? properties : undefined;
        }
        const diagnostics = this.findLeftoverUseOfDeprecatedAPIs(assembly, strippedFqns);
        // Remove all `@deprecated` types, after we did everything, so we could
        // still access the related nodes from the assembly object.
        for (const fqn of strippedFqns) {
            if (this.shouldFqnBeStripped(fqn)) {
                delete assembly.types[fqn];
            }
        }
        return diagnostics;
    }
    findLeftoverUseOfDeprecatedAPIs(assembly, strippedFqns) {
        var _a, _b;
        if (assembly.types == null) {
            return [];
        }
        const result = new Array();
        for (const type of Object.values(assembly.types)) {
            if (spec_1.isEnumType(type) || strippedFqns.has(type.fqn)) {
                continue;
            }
            if (spec_1.isClassType(type) && type.initializer) {
                result.push(...this.verifyCallable(assembly, strippedFqns, type.initializer));
            }
            (_a = type.methods) === null || _a === void 0 ? void 0 : _a.forEach((method) => result.push(...this.verifyCallable(assembly, strippedFqns, method)));
            (_b = type.properties) === null || _b === void 0 ? void 0 : _b.forEach((property) => result.push(...this.verifyProperty(assembly, strippedFqns, property)));
        }
        return result;
    }
    verifyCallable(assembly, strippedFqns, method) {
        const diagnostics = new Array();
        const deprecatedReturnFqn = spec_1.isMethod(method) &&
            method.returns &&
            this.tryFindReference(method.returns.type, strippedFqns);
        if (deprecatedReturnFqn) {
            diagnostics.push(this.makeDiagnostic(deprecatedReturnFqn, 'Method', method, assembly));
        }
        if (method.parameters) {
            for (const parameter of method.parameters) {
                const deprecatedTypeFqn = this.tryFindReference(parameter.type, strippedFqns);
                if (deprecatedTypeFqn) {
                    diagnostics.push(this.makeDiagnostic(deprecatedTypeFqn, 'Parameter', parameter, assembly));
                }
            }
        }
        return diagnostics;
    }
    verifyProperty(assembly, strippedFqns, property) {
        const deprecatedTypeFqn = this.tryFindReference(property.type, strippedFqns);
        if (deprecatedTypeFqn) {
            return [
                this.makeDiagnostic(deprecatedTypeFqn, 'Property', property, assembly),
            ];
        }
        return [];
    }
    /**
     * Determines whether a `TypeReference` contains an FQN within a given set.
     *
     * @param ref  the tested `TypeReference`.
     * @param fqns the set of FQNs that are being searched for.
     *
     * @returns the first FQN that was identified.
     */
    tryFindReference(ref, fqns) {
        if (spec_1.isNamedTypeReference(ref)) {
            return fqns.has(ref.fqn) ? ref.fqn : undefined;
        }
        if (spec_1.isPrimitiveTypeReference(ref)) {
            return undefined;
        }
        if (spec_1.isCollectionTypeReference(ref)) {
            return this.tryFindReference(ref.collection.elementtype, fqns);
        }
        return ref.union.types
            .map((type) => this.tryFindReference(type, fqns))
            .find((ref) => ref != null);
    }
    shouldFqnBeStripped(fqn) {
        var _a, _b;
        return (_b = (_a = this.allowlistedDeprecations) === null || _a === void 0 ? void 0 : _a.has(fqn)) !== null && _b !== void 0 ? _b : true;
    }
    makeDiagnostic(fqn, messagePrefix, context, assembly) {
        var _a, _b, _c;
        const node = bindings.getRelatedNode(context);
        const diagnostic = jsii_diagnostic_1.JsiiDiagnostic.JSII_3999_INCOHERENT_TYPE_MODEL.create((_a = node === null || node === void 0 ? void 0 : node.type) !== null && _a !== void 0 ? _a : node, `${messagePrefix} has @deprecated type ${fqn}, and it is erased by --strip-deprecated.`);
        const typeInfo = (_b = assembly.types) === null || _b === void 0 ? void 0 : _b[fqn];
        const typeNode = typeInfo && bindings.getTypeRelatedNode(typeInfo);
        if (typeNode == null) {
            return diagnostic;
        }
        return diagnostic.addRelatedInformation((_c = ts.getNameOfDeclaration(typeNode)) !== null && _c !== void 0 ? _c : typeNode, `The @deprecated type is declared here`);
    }
}
exports.DeprecatedRemover = DeprecatedRemover;
class Transformation {
    constructor(typeChecker, node, apply) {
        this.typeChecker = typeChecker;
        this.apply = apply;
        this.nodeName = Transformation.fullyQualifiedName(typeChecker, node);
    }
    static addInterface(typeChecker, node, iface) {
        return new Transformation(typeChecker, node, (declaration) => {
            if (!ts.isClassDeclaration(declaration) &&
                !ts.isInterfaceDeclaration(declaration)) {
                throw new Error(`Expected a ClassDeclaration or InterfaceDeclaration, found a ${ts.SyntaxKind[declaration.kind]}`);
            }
            const { typeExpression: newInterface, syntheticImport } = Transformation.typeReference(iface, declaration, typeChecker);
            if (ts.isClassDeclaration(declaration)) {
                return {
                    node: ts.updateClassDeclaration(declaration, declaration.decorators, declaration.modifiers, declaration.name, declaration.typeParameters, addInterfaceTo(ts.SyntaxKind.ImplementsKeyword, declaration.heritageClauses), declaration.members),
                    syntheticImport,
                };
            }
            return {
                node: ts.updateInterfaceDeclaration(declaration, declaration.decorators, declaration.modifiers, declaration.name, declaration.typeParameters, addInterfaceTo(ts.SyntaxKind.ExtendsKeyword, declaration.heritageClauses), declaration.members),
                syntheticImport,
            };
            function addInterfaceTo(token, clauses = []) {
                const existingClause = clauses.find((clause) => clause.token === token);
                if (existingClause == null) {
                    return [...clauses, ts.createHeritageClause(token, [newInterface])];
                }
                return [
                    ...clauses.filter((clause) => clause !== existingClause),
                    ts.updateHeritageClause(existingClause, [
                        ...existingClause.types,
                        newInterface,
                    ]),
                ];
            }
        });
    }
    static replaceBaseClass(typeChecker, node, baseClass) {
        return new Transformation(typeChecker, node, (declaration) => {
            var _a, _b;
            if (!ts.isClassDeclaration(declaration)) {
                throw new Error(`Expected a ClassDeclaration, found a ${ts.SyntaxKind[declaration.kind]}`);
            }
            const { typeExpression: newBaseClass, syntheticImport } = Transformation.typeReference(baseClass, declaration, typeChecker);
            const existingClause = (_a = declaration.heritageClauses) === null || _a === void 0 ? void 0 : _a.find((clause) => clause.token === ts.SyntaxKind.ExtendsKeyword);
            return {
                node: ts.updateClassDeclaration(declaration, declaration.decorators, declaration.modifiers, declaration.name, declaration.typeParameters, [
                    ...((_b = declaration.heritageClauses) !== null && _b !== void 0 ? _b : []).filter((clause) => clause !== existingClause),
                    existingClause
                        ? ts.updateHeritageClause(existingClause, [newBaseClass])
                        : ts.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [
                            newBaseClass,
                        ]),
                ], declaration.members),
                syntheticImports: syntheticImport && [syntheticImport],
            };
        });
    }
    static removeBaseClass(typeChecker, node) {
        return new Transformation(typeChecker, node, (declaration) => {
            var _a;
            if (!ts.isClassDeclaration(declaration)) {
                throw new Error(`Expected a ClassDeclaration, found a ${ts.SyntaxKind[declaration.kind]}`);
            }
            return {
                node: ts.updateClassDeclaration(declaration, declaration.decorators, declaration.modifiers, declaration.name, declaration.typeParameters, (_a = declaration.heritageClauses) === null || _a === void 0 ? void 0 : _a.filter((clause) => clause.token !== ts.SyntaxKind.ExtendsKeyword), declaration.members),
            };
        });
    }
    static removeInterface(typeChecker, node, iface) {
        const ifaceName = Transformation.fullyQualifiedName(typeChecker, iface);
        return new Transformation(typeChecker, node, (declaration) => {
            if (ts.isClassDeclaration(declaration)) {
                return {
                    node: ts.updateClassDeclaration(declaration, declaration.decorators, declaration.modifiers, declaration.name, declaration.typeParameters, removeInterfaceHeritage(declaration.heritageClauses), declaration.members),
                };
            }
            else if (ts.isInterfaceDeclaration(declaration)) {
                return {
                    node: ts.updateInterfaceDeclaration(declaration, declaration.decorators, declaration.modifiers, declaration.name, declaration.typeParameters, removeInterfaceHeritage(declaration.heritageClauses), declaration.members),
                };
            }
            throw new Error(`Expected a ClassDeclaration or InterfaceDeclaration, found a ${ts.SyntaxKind[declaration.kind]}`);
        });
        function removeInterfaceHeritage(clauses) {
            if (clauses == null) {
                return clauses;
            }
            return clauses
                .map((clause) => {
                const types = clause.types.filter((type) => Transformation.fullyQualifiedName(typeChecker, type.expression) !== ifaceName);
                if (types.length === clause.types.length) {
                    // Means the interface was only transitively present...
                    return clause;
                }
                if (types.length === 0) {
                    return undefined;
                }
                return ts.updateHeritageClause(clause, types);
            })
                .filter((clause) => clause != null);
        }
    }
    static fullyQualifiedName(typeChecker, node) {
        var _a;
        const symbol = typeChecker.getSymbolAtLocation((_a = ts.getNameOfDeclaration(node)) !== null && _a !== void 0 ? _a : node);
        // This symbol ☝️ does not contain enough information in some cases - when
        // an imported type is part of a heritage clause - to produce the fqn.
        // Round tripping this to its type and back to a symbol seems to fix this.
        const type = symbol && typeChecker.getDeclaredTypeOfSymbol(symbol);
        return (type === null || type === void 0 ? void 0 : type.symbol) && typeChecker.getFullyQualifiedName(type.symbol);
    }
    static typeReference(type, context, typeChecker) {
        context = ts.getOriginalNode(context);
        const [, contextSource] = /^"([^"]+)"\..*$/.exec(typeChecker.getFullyQualifiedName(typeChecker.getSymbolAtLocation(ts.getNameOfDeclaration(context))));
        let expression;
        let syntheticImport;
        if (typeof type === 'string') {
            const [root, ...tail] = type.split('.');
            const syntheticImportName = ts.createUniqueName(root);
            syntheticImport = ts.createImportDeclaration(undefined /* decorators */, undefined /* modifiers */, ts.createImportClause(undefined, ts.createNamespaceImport(syntheticImportName)), ts.createStringLiteral(root));
            expression = tail.reduce((curr, elt) => ts.createPropertyAccess(curr, elt), syntheticImportName);
        }
        else {
            const [, typeSource, qualifiedName] = /^"([^"]+)"\.(.*)$/.exec(typeChecker.getFullyQualifiedName(typeChecker.getSymbolAtLocation(ts.getNameOfDeclaration(type))));
            if (typeSource === contextSource) {
                const [root, ...tail] = qualifiedName.split('.');
                expression = tail.reduce((curr, elt) => ts.createPropertyAccess(curr, elt), ts.createIdentifier(root));
            }
            else {
                const syntheticImportName = ts.createUniqueName(path_1.basename(typeSource));
                syntheticImport = ts.createImportDeclaration(undefined /* decorators */, undefined /* modifiers */, ts.createImportClause(undefined, ts.createNamespaceImport(syntheticImportName)), ts.createStringLiteral(`./${path_1.relative(path_1.dirname(contextSource), typeSource)}`));
                expression = qualifiedName
                    .split('.')
                    .reduce((curr, elt) => ts.createPropertyAccess(curr, elt), syntheticImportName);
            }
        }
        return {
            typeExpression: ts.createExpressionWithTypeArguments(undefined, expression),
            syntheticImport,
        };
    }
    targets(node) {
        return (this.nodeName ===
            Transformation.fullyQualifiedName(this.typeChecker, node));
    }
}
class DeprecationRemovalTransformer {
    constructor(typeChecker, context, transformations, nodesToRemove) {
        this.typeChecker = typeChecker;
        this.context = context;
        this.transformations = transformations;
        this.nodesToRemove = nodesToRemove;
        this.syntheticImports = new Array();
    }
    transform(node) {
        let result = this.visitEachChild(node);
        // If there are any synthetic imports, add them to the source file
        if (ts.isSourceFile(result) && this.syntheticImports.length > 0) {
            result = ts.updateSourceFileNode(result, [...this.syntheticImports, ...result.statements], result.isDeclarationFile, result.referencedFiles, result.typeReferenceDirectives, result.hasNoDefaultLib, result.libReferenceDirectives);
            this.syntheticImports = new Array();
        }
        return result;
    }
    visitEachChild(node) {
        return ts.visitEachChild(node, this.visitor.bind(this), this.context);
    }
    visitor(node) {
        var _a, _b, _c;
        if (this.isDeprecated(node)) {
            // Removing deprecated members by substituting "nothing" to them
            return undefined;
        }
        if (ts.isClassDeclaration(node) || ts.isInterfaceDeclaration(node)) {
            for (const transformation of this.transformations) {
                // 👇 as any because the assignment below confuses type checker
                if (transformation.targets(node)) {
                    const { node: transformedNode, syntheticImport } = transformation.apply(node);
                    node = transformedNode;
                    if (syntheticImport) {
                        this.syntheticImports.push(syntheticImport);
                    }
                }
            }
        }
        // Remove named imports of `@deprecated` members from the source...
        if (ts.isImportDeclaration(node) &&
            node.importClause &&
            node.importClause.namedBindings &&
            ts.isNamedImports(node.importClause.namedBindings)) {
            const filteredElements = node.importClause.namedBindings.elements.filter((element) => {
                var _a;
                // This symbol is local (it's declaration points back to the named import)
                const symbol = this.typeChecker.getSymbolAtLocation(element.name);
                const exportedSymbol = 
                // This "resolves" the imported type, so we can get to it's declaration(s)
                symbol && ((_a = this.typeChecker.getDeclaredTypeOfSymbol(symbol)) === null || _a === void 0 ? void 0 : _a.symbol);
                return !(exportedSymbol === null || exportedSymbol === void 0 ? void 0 : exportedSymbol.declarations.some((decl) => this.isDeprecated(decl)));
            });
            if (filteredElements.length !==
                node.importClause.namedBindings.elements.length) {
                return ts.updateImportDeclaration(node, node.decorators, node.modifiers, node.importClause.name != null || filteredElements.length > 0
                    ? ts.updateImportClause(node.importClause, node.importClause.name, ts.updateNamedImports(node.importClause.namedBindings, filteredElements), node.importClause.isTypeOnly)
                    : undefined, node.moduleSpecifier);
            }
            return node;
        }
        // Replace "export ... from ..." places that no longer export anything
        // with an "import from ...", so side effects are preserved.
        if (ts.isExportDeclaration(node) && node.moduleSpecifier) {
            const symbol = this.typeChecker.getSymbolAtLocation(node.moduleSpecifier);
            const moduleExports = symbol && ((_a = this.typeChecker
                .getExportsOfModule(symbol)) === null || _a === void 0 ? void 0 : _a.filter((sym) => !sym.declarations.some((decl) => this.isDeprecated(decl))));
            if ((node.exportClause == null ||
                ts.isNamespaceExport(node.exportClause)) &&
                (moduleExports === null || moduleExports === void 0 ? void 0 : moduleExports.length) === 0) {
                return ts.createImportDeclaration(undefined /* decorators */, undefined /* modifiers */, undefined /* importClause */, node.moduleSpecifier);
            }
            if (node.exportClause != null && moduleExports) {
                const bindings = node.exportClause;
                const exportedNames = new Set(moduleExports.map((sym) => sym.name));
                const filteredElements = (_b = bindings.elements) === null || _b === void 0 ? void 0 : _b.filter((elt) => exportedNames.has(elt.name.text));
                if ((filteredElements === null || filteredElements === void 0 ? void 0 : filteredElements.length) !== ((_c = bindings.elements) === null || _c === void 0 ? void 0 : _c.length)) {
                    return ts.updateExportDeclaration(node, node.decorators, node.modifiers, ts.updateNamedExports(bindings, filteredElements), node.moduleSpecifier, node.isTypeOnly);
                }
            }
        }
        return DeprecationRemovalTransformer.IGNORE_CHILDREN.has(node.kind)
            ? node
            : this.visitEachChild(node);
    }
    isDeprecated(node) {
        const original = ts.getOriginalNode(node);
        return (this.nodesToRemove.has(original) &&
            ts.getJSDocTags(original).some((tag) => tag.tagName.text === 'deprecated'));
    }
}
/**
 * A list of SyntaxKinds for which it is not necessary to evaluate children,
 * since they are never of interest to this transform. This opens up a wee
 * optimization, which is particularly useful when trying to troubleshoot the
 * transform in a debugger (saves a TON of time stepping into useless nodes
 * then).
 */
DeprecationRemovalTransformer.IGNORE_CHILDREN = new Set([
    ts.SyntaxKind.Constructor,
    ts.SyntaxKind.FunctionDeclaration,
    ts.SyntaxKind.GetAccessor,
    ts.SyntaxKind.MethodDeclaration,
    ts.SyntaxKind.MethodSignature,
    ts.SyntaxKind.PropertySignature,
    ts.SyntaxKind.PropertyDeclaration,
    ts.SyntaxKind.SetAccessor,
    ts.SyntaxKind.VariableDeclaration,
]);
//# sourceMappingURL=data:application/json;base64,