"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combinedTransformers = void 0;
/**
 * Combines a collection of `CustomTransformers` configurations into a single
 * one, preserving the order of arguments.
 *
 * @param transformers the list of transformers to combine.
 *
 * @returns the combined transformer.
 */
function combinedTransformers(...transformers) {
    // Note the ! below are just to stop the type checker from seeing undefined as
    // a value for the whole map-filter-reduce chain, as this would require heavy
    // syntax that is not desirable. The filter step removes the `undefined`.
    return {
        before: transformers
            .map((transformer) => transformer.before)
            .filter((transform) => transform != null)
            .reduce((acc, elt) => (acc ? [...acc, ...elt] : elt), undefined),
        after: transformers
            .map((transformer) => transformer.after)
            .filter((transform) => transform != null)
            .reduce((acc, elt) => (acc ? [...acc, ...elt] : elt), undefined),
        afterDeclarations: transformers
            .map((transformer) => transformer.afterDeclarations)
            .filter((transform) => transform != null)
            .reduce((acc, elt) => (acc ? [...acc, ...elt] : elt), undefined),
    };
}
exports.combinedTransformers = combinedTransformers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQTs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQ2xDLEdBQUcsWUFBMkM7SUFFOUMsOEVBQThFO0lBQzlFLDZFQUE2RTtJQUM3RSx5RUFBeUU7SUFDekUsT0FBTztRQUNMLE1BQU0sRUFBRSxZQUFZO2FBQ2pCLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU8sQ0FBQzthQUN6QyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUM7YUFDeEMsTUFBTSxDQUNMLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQzVDLFNBQXlDLENBQzFDO1FBQ0gsS0FBSyxFQUFFLFlBQVk7YUFDaEIsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBTSxDQUFDO2FBQ3hDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQzthQUN4QyxNQUFNLENBQ0wsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDNUMsU0FBd0MsQ0FDekM7UUFDSCxpQkFBaUIsRUFBRSxZQUFZO2FBQzVCLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLGlCQUFrQixDQUFDO2FBQ3BELE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQzthQUN4QyxNQUFNLENBQ0wsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDNUMsU0FBb0QsQ0FDckQ7S0FDSixDQUFDO0FBQ0osQ0FBQztBQTdCRCxvREE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdXN0b21UcmFuc2Zvcm1lcnMgfSBmcm9tICd0eXBlc2NyaXB0JztcblxuLyoqXG4gKiBDb21iaW5lcyBhIGNvbGxlY3Rpb24gb2YgYEN1c3RvbVRyYW5zZm9ybWVyc2AgY29uZmlndXJhdGlvbnMgaW50byBhIHNpbmdsZVxuICogb25lLCBwcmVzZXJ2aW5nIHRoZSBvcmRlciBvZiBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHRyYW5zZm9ybWVycyB0aGUgbGlzdCBvZiB0cmFuc2Zvcm1lcnMgdG8gY29tYmluZS5cbiAqXG4gKiBAcmV0dXJucyB0aGUgY29tYmluZWQgdHJhbnNmb3JtZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lZFRyYW5zZm9ybWVycyhcbiAgLi4udHJhbnNmb3JtZXJzOiByZWFkb25seSBDdXN0b21UcmFuc2Zvcm1lcnNbXVxuKTogQ3VzdG9tVHJhbnNmb3JtZXJzIHtcbiAgLy8gTm90ZSB0aGUgISBiZWxvdyBhcmUganVzdCB0byBzdG9wIHRoZSB0eXBlIGNoZWNrZXIgZnJvbSBzZWVpbmcgdW5kZWZpbmVkIGFzXG4gIC8vIGEgdmFsdWUgZm9yIHRoZSB3aG9sZSBtYXAtZmlsdGVyLXJlZHVjZSBjaGFpbiwgYXMgdGhpcyB3b3VsZCByZXF1aXJlIGhlYXZ5XG4gIC8vIHN5bnRheCB0aGF0IGlzIG5vdCBkZXNpcmFibGUuIFRoZSBmaWx0ZXIgc3RlcCByZW1vdmVzIHRoZSBgdW5kZWZpbmVkYC5cbiAgcmV0dXJuIHtcbiAgICBiZWZvcmU6IHRyYW5zZm9ybWVyc1xuICAgICAgLm1hcCgodHJhbnNmb3JtZXIpID0+IHRyYW5zZm9ybWVyLmJlZm9yZSEpXG4gICAgICAuZmlsdGVyKCh0cmFuc2Zvcm0pID0+IHRyYW5zZm9ybSAhPSBudWxsKVxuICAgICAgLnJlZHVjZShcbiAgICAgICAgKGFjYywgZWx0KSA9PiAoYWNjID8gWy4uLmFjYywgLi4uZWx0XSA6IGVsdCksXG4gICAgICAgIHVuZGVmaW5lZCBhcyBDdXN0b21UcmFuc2Zvcm1lcnNbJ2JlZm9yZSddLFxuICAgICAgKSxcbiAgICBhZnRlcjogdHJhbnNmb3JtZXJzXG4gICAgICAubWFwKCh0cmFuc2Zvcm1lcikgPT4gdHJhbnNmb3JtZXIuYWZ0ZXIhKVxuICAgICAgLmZpbHRlcigodHJhbnNmb3JtKSA9PiB0cmFuc2Zvcm0gIT0gbnVsbClcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGVsdCkgPT4gKGFjYyA/IFsuLi5hY2MsIC4uLmVsdF0gOiBlbHQpLFxuICAgICAgICB1bmRlZmluZWQgYXMgQ3VzdG9tVHJhbnNmb3JtZXJzWydhZnRlciddLFxuICAgICAgKSxcbiAgICBhZnRlckRlY2xhcmF0aW9uczogdHJhbnNmb3JtZXJzXG4gICAgICAubWFwKCh0cmFuc2Zvcm1lcikgPT4gdHJhbnNmb3JtZXIuYWZ0ZXJEZWNsYXJhdGlvbnMhKVxuICAgICAgLmZpbHRlcigodHJhbnNmb3JtKSA9PiB0cmFuc2Zvcm0gIT0gbnVsbClcbiAgICAgIC5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGVsdCkgPT4gKGFjYyA/IFsuLi5hY2MsIC4uLmVsdF0gOiBlbHQpLFxuICAgICAgICB1bmRlZmluZWQgYXMgQ3VzdG9tVHJhbnNmb3JtZXJzWydhZnRlckRlY2xhcmF0aW9ucyddLFxuICAgICAgKSxcbiAgfTtcbn1cbiJdfQ==