#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@jsii/check-node/run");
const jsii_rosetta_1 = require("jsii-rosetta");
const yargs = require("yargs");
const lib_1 = require("../lib");
const logging_1 = require("../lib/logging");
const version_1 = require("../lib/version");
(async function main() {
    var _a;
    const argv = yargs
        .env('JSII_PACMAK')
        .command(['$0  [PROJECTS...]', 'generate [PROJECTS...]'], 'Generates jsii bindings for the selected project(s)', (argv) => argv.positional('PROJECTS', {
        type: 'string',
        desc: 'Project(s) to generate',
        normalize: true,
        default: ['.'],
    }))
        .option('targets', {
        alias: ['target', 't'],
        type: 'array',
        desc: 'target languages for which to generate bindings',
        defaultDescription: 'all targets defined in `package.json` will be generated',
        choices: Object.values(lib_1.TargetName),
        required: false,
    })
        .option('outdir', {
        alias: 'o',
        type: 'string',
        desc: 'directory where artifacts will be generated',
        defaultDescription: 'based on `jsii.output` in `package.json`',
        required: false,
    })
        .option('code-only', {
        alias: 'c',
        type: 'boolean',
        desc: 'generate code only (instead of building and packaging)',
        default: false,
    })
        .option('fingerprint', {
        type: 'boolean',
        desc: 'attach a fingerprint to the generated artifacts, and skip generation if outdir contains artifacts that have a matching fingerprint',
        default: true,
    })
        .option('force', {
        alias: 'f',
        type: 'boolean',
        desc: 'force generation of new artifacts, even if the fingerprints match',
        default: false,
    })
        .option('force-subdirectory', {
        type: 'boolean',
        desc: 'force generation into a target-named subdirectory, even in single-target mode',
        default: true,
    })
        .option('force-target', {
        type: 'boolean',
        desc: 'force generation of the given targets, even if the source package.json doesnt declare it',
        default: false,
    })
        .option('recurse', {
        alias: 'R',
        type: 'boolean',
        desc: 'recursively generate and build all dependencies into `outdir`',
        default: false,
    })
        .option('verbose', {
        alias: 'v',
        type: 'boolean',
        desc: 'emit verbose build output',
        count: true,
        default: 0,
    })
        .option('clean', {
        type: 'boolean',
        desc: 'clean up temporary files upon success (use --no-clean to disable)',
        default: true,
    })
        .option('npmignore', {
        type: 'boolean',
        desc: 'Auto-update .npmignore to exclude the output directory and include the .jsii file',
        default: true,
    })
        .option('rosetta-tablet', {
        type: 'string',
        desc: "Location of a jsii-rosetta tablet with sample translations (created using 'jsii-rosetta extract')",
    })
        .option('rosetta-translate-live', {
        type: 'boolean',
        desc: "Translate code samples on-the-fly if they can't be found in the samples tablet (deprecated)",
        default: true,
    })
        .option('rosetta-unknown-snippets', {
        type: 'string',
        requiresArg: true,
        optional: true,
        choices: [
            jsii_rosetta_1.UnknownSnippetMode.VERBATIM,
            jsii_rosetta_1.UnknownSnippetMode.TRANSLATE,
            jsii_rosetta_1.UnknownSnippetMode.FAIL,
        ],
        desc: "What to do with code samples if they can't be found in the samples tablet",
    })
        .option('parallel', {
        type: 'boolean',
        desc: 'Generate all configured targets in parallel (disabling this might help if you encounter EMFILE errors)',
        default: true,
    })
        .option('dotnet-nuget-global-packages-folder', {
        type: 'string',
        desc: 'Configure a different NuGet package cache for NuGet',
        default: undefined,
        // This is a hidden option, folks need not bother it unless they're very advanced
        hidden: true,
        // This is expected to be a path, which should be normalized
        normalize: true,
    })
        .option('validate-assemblies', {
        type: 'boolean',
        desc: 'Whether jsii assemblies should be validated. This can be expensive and is skipped by default.',
        default: false,
    })
        .version(version_1.VERSION_DESC)
        .strict().argv;
    lib_1.configureLogging({ level: argv.verbose !== undefined ? argv.verbose : 0 });
    // Default to 4 threads in case of concurrency, good enough for most situations
    logging_1.debug('command line arguments:', argv);
    return lib_1.pacmak({
        argv,
        clean: argv.clean,
        codeOnly: argv['code-only'],
        fingerprint: argv.fingerprint,
        force: argv.force,
        forceSubdirectory: argv['force-subdirectory'],
        forceTarget: argv['force-target'],
        inputDirectories: argv.PROJECTS,
        outputDirectory: argv.outdir,
        parallel: argv.parallel,
        recurse: argv.recurse,
        rosettaLiveConversion: argv['rosetta-translate-live'],
        rosettaUnknownSnippets: argv['rosetta-unknown-snippets'],
        rosettaTablet: argv['rosetta-tablet'],
        targets: (_a = argv.targets) === null || _a === void 0 ? void 0 : _a.map((target) => target),
        updateNpmIgnoreFiles: argv.npmignore,
        validateAssemblies: argv['validate-assemblies'],
    });
})().catch((err) => {
    process.stderr.write(`${err.stack}\n`);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNpaS1wYWNtYWsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJqc2lpLXBhY21hay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxnQ0FBOEI7QUFFOUIsK0NBQWtEO0FBQ2xELCtCQUErQjtBQUUvQixnQ0FBOEQ7QUFDOUQsNENBQXVDO0FBQ3ZDLDRDQUE4QztBQUU5QyxDQUFDLEtBQUssVUFBVSxJQUFJOztJQUNsQixNQUFNLElBQUksR0FBRyxLQUFLO1NBQ2YsR0FBRyxDQUFDLGFBQWEsQ0FBQztTQUNsQixPQUFPLENBQ04sQ0FBQyxtQkFBbUIsRUFBRSx3QkFBd0IsQ0FBQyxFQUMvQyxxREFBcUQsRUFDckQsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFO1FBQzFCLElBQUksRUFBRSxRQUFRO1FBQ2QsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixTQUFTLEVBQUUsSUFBSTtRQUNmLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQztLQUNmLENBQUMsQ0FDTDtTQUNBLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDakIsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztRQUN0QixJQUFJLEVBQUUsT0FBTztRQUNiLElBQUksRUFBRSxpREFBaUQ7UUFDdkQsa0JBQWtCLEVBQ2hCLHlEQUF5RDtRQUMzRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBVSxDQUFDO1FBQ2xDLFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUM7U0FDRCxNQUFNLENBQUMsUUFBUSxFQUFFO1FBQ2hCLEtBQUssRUFBRSxHQUFHO1FBQ1YsSUFBSSxFQUFFLFFBQVE7UUFDZCxJQUFJLEVBQUUsNkNBQTZDO1FBQ25ELGtCQUFrQixFQUFFLDBDQUEwQztRQUM5RCxRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDO1NBQ0QsTUFBTSxDQUFDLFdBQVcsRUFBRTtRQUNuQixLQUFLLEVBQUUsR0FBRztRQUNWLElBQUksRUFBRSxTQUFTO1FBQ2YsSUFBSSxFQUFFLHdEQUF3RDtRQUM5RCxPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7U0FDRCxNQUFNLENBQUMsYUFBYSxFQUFFO1FBQ3JCLElBQUksRUFBRSxTQUFTO1FBQ2YsSUFBSSxFQUFFLG9JQUFvSTtRQUMxSSxPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUM7U0FDRCxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2YsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsU0FBUztRQUNmLElBQUksRUFBRSxtRUFBbUU7UUFDekUsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDO1NBQ0QsTUFBTSxDQUFDLG9CQUFvQixFQUFFO1FBQzVCLElBQUksRUFBRSxTQUFTO1FBQ2YsSUFBSSxFQUFFLCtFQUErRTtRQUNyRixPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUM7U0FDRCxNQUFNLENBQUMsY0FBYyxFQUFFO1FBQ3RCLElBQUksRUFBRSxTQUFTO1FBQ2YsSUFBSSxFQUFFLDBGQUEwRjtRQUNoRyxPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7U0FDRCxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ2pCLEtBQUssRUFBRSxHQUFHO1FBQ1YsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsK0RBQStEO1FBQ3JFLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQztTQUNELE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDakIsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsU0FBUztRQUNmLElBQUksRUFBRSwyQkFBMkI7UUFDakMsS0FBSyxFQUFFLElBQUk7UUFDWCxPQUFPLEVBQUUsQ0FBQztLQUNYLENBQUM7U0FDRCxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2YsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsbUVBQW1FO1FBQ3pFLE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQztTQUNELE1BQU0sQ0FBQyxXQUFXLEVBQUU7UUFDbkIsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsbUZBQW1GO1FBQ3pGLE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQztTQUNELE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtRQUN4QixJQUFJLEVBQUUsUUFBUTtRQUNkLElBQUksRUFBRSxtR0FBbUc7S0FDMUcsQ0FBQztTQUNELE1BQU0sQ0FBQyx3QkFBd0IsRUFBRTtRQUNoQyxJQUFJLEVBQUUsU0FBUztRQUNmLElBQUksRUFBRSw2RkFBNkY7UUFDbkcsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFDO1NBQ0QsTUFBTSxDQUFDLDBCQUEwQixFQUFFO1FBQ2xDLElBQUksRUFBRSxRQUFRO1FBQ2QsV0FBVyxFQUFFLElBQUk7UUFDakIsUUFBUSxFQUFFLElBQUk7UUFDZCxPQUFPLEVBQUU7WUFDUCxpQ0FBa0IsQ0FBQyxRQUFRO1lBQzNCLGlDQUFrQixDQUFDLFNBQVM7WUFDNUIsaUNBQWtCLENBQUMsSUFBSTtTQUN4QjtRQUNELElBQUksRUFBRSwyRUFBMkU7S0FDbEYsQ0FBQztTQUNELE1BQU0sQ0FBQyxVQUFVLEVBQUU7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsd0dBQXdHO1FBQzlHLE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQztTQUNELE1BQU0sQ0FBQyxxQ0FBcUMsRUFBRTtRQUM3QyxJQUFJLEVBQUUsUUFBUTtRQUNkLElBQUksRUFBRSxxREFBcUQ7UUFDM0QsT0FBTyxFQUFFLFNBQVM7UUFDbEIsaUZBQWlGO1FBQ2pGLE1BQU0sRUFBRSxJQUFJO1FBQ1osNERBQTREO1FBQzVELFNBQVMsRUFBRSxJQUFJO0tBQ2hCLENBQUM7U0FDRCxNQUFNLENBQUMscUJBQXFCLEVBQUU7UUFDN0IsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsK0ZBQStGO1FBQ3JHLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQztTQUNELE9BQU8sQ0FBQyxzQkFBWSxDQUFDO1NBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQztJQUVqQixzQkFBZ0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUzRSwrRUFBK0U7SUFDL0UsZUFBSyxDQUFDLHlCQUF5QixFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXZDLE9BQU8sWUFBTSxDQUFDO1FBQ1osSUFBSTtRQUNKLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztRQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMzQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7UUFDN0IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1FBQ2pCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztRQUM3QyxXQUFXLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUNqQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsUUFBUTtRQUMvQixlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU07UUFDNUIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1FBQ3ZCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztRQUNyQixxQkFBcUIsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUM7UUFDckQsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLDBCQUEwQixDQUUxQztRQUNiLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDckMsT0FBTyxRQUFFLElBQUksQ0FBQyxPQUFPLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBb0IsQ0FBQztRQUM1RCxvQkFBb0IsRUFBRSxJQUFJLENBQUMsU0FBUztRQUNwQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUM7S0FDaEQsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUNqQixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ0Bqc2lpL2NoZWNrLW5vZGUvcnVuJztcblxuaW1wb3J0IHsgVW5rbm93blNuaXBwZXRNb2RlIH0gZnJvbSAnanNpaS1yb3NldHRhJztcbmltcG9ydCAqIGFzIHlhcmdzIGZyb20gJ3lhcmdzJztcblxuaW1wb3J0IHsgcGFjbWFrLCBjb25maWd1cmVMb2dnaW5nLCBUYXJnZXROYW1lIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IGRlYnVnIH0gZnJvbSAnLi4vbGliL2xvZ2dpbmcnO1xuaW1wb3J0IHsgVkVSU0lPTl9ERVNDIH0gZnJvbSAnLi4vbGliL3ZlcnNpb24nO1xuXG4oYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcbiAgY29uc3QgYXJndiA9IHlhcmdzXG4gICAgLmVudignSlNJSV9QQUNNQUsnKVxuICAgIC5jb21tYW5kKFxuICAgICAgWyckMCAgW1BST0pFQ1RTLi4uXScsICdnZW5lcmF0ZSBbUFJPSkVDVFMuLi5dJ10sXG4gICAgICAnR2VuZXJhdGVzIGpzaWkgYmluZGluZ3MgZm9yIHRoZSBzZWxlY3RlZCBwcm9qZWN0KHMpJyxcbiAgICAgIChhcmd2KSA9PlxuICAgICAgICBhcmd2LnBvc2l0aW9uYWwoJ1BST0pFQ1RTJywge1xuICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIGRlc2M6ICdQcm9qZWN0KHMpIHRvIGdlbmVyYXRlJyxcbiAgICAgICAgICBub3JtYWxpemU6IHRydWUsXG4gICAgICAgICAgZGVmYXVsdDogWycuJ10sXG4gICAgICAgIH0pLFxuICAgIClcbiAgICAub3B0aW9uKCd0YXJnZXRzJywge1xuICAgICAgYWxpYXM6IFsndGFyZ2V0JywgJ3QnXSxcbiAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICBkZXNjOiAndGFyZ2V0IGxhbmd1YWdlcyBmb3Igd2hpY2ggdG8gZ2VuZXJhdGUgYmluZGluZ3MnLFxuICAgICAgZGVmYXVsdERlc2NyaXB0aW9uOlxuICAgICAgICAnYWxsIHRhcmdldHMgZGVmaW5lZCBpbiBgcGFja2FnZS5qc29uYCB3aWxsIGJlIGdlbmVyYXRlZCcsXG4gICAgICBjaG9pY2VzOiBPYmplY3QudmFsdWVzKFRhcmdldE5hbWUpLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0pXG4gICAgLm9wdGlvbignb3V0ZGlyJywge1xuICAgICAgYWxpYXM6ICdvJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzYzogJ2RpcmVjdG9yeSB3aGVyZSBhcnRpZmFjdHMgd2lsbCBiZSBnZW5lcmF0ZWQnLFxuICAgICAgZGVmYXVsdERlc2NyaXB0aW9uOiAnYmFzZWQgb24gYGpzaWkub3V0cHV0YCBpbiBgcGFja2FnZS5qc29uYCcsXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgfSlcbiAgICAub3B0aW9uKCdjb2RlLW9ubHknLCB7XG4gICAgICBhbGlhczogJ2MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVzYzogJ2dlbmVyYXRlIGNvZGUgb25seSAoaW5zdGVhZCBvZiBidWlsZGluZyBhbmQgcGFja2FnaW5nKScsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB9KVxuICAgIC5vcHRpb24oJ2ZpbmdlcnByaW50Jywge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVzYzogJ2F0dGFjaCBhIGZpbmdlcnByaW50IHRvIHRoZSBnZW5lcmF0ZWQgYXJ0aWZhY3RzLCBhbmQgc2tpcCBnZW5lcmF0aW9uIGlmIG91dGRpciBjb250YWlucyBhcnRpZmFjdHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgZmluZ2VycHJpbnQnLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9KVxuICAgIC5vcHRpb24oJ2ZvcmNlJywge1xuICAgICAgYWxpYXM6ICdmJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlc2M6ICdmb3JjZSBnZW5lcmF0aW9uIG9mIG5ldyBhcnRpZmFjdHMsIGV2ZW4gaWYgdGhlIGZpbmdlcnByaW50cyBtYXRjaCcsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB9KVxuICAgIC5vcHRpb24oJ2ZvcmNlLXN1YmRpcmVjdG9yeScsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlc2M6ICdmb3JjZSBnZW5lcmF0aW9uIGludG8gYSB0YXJnZXQtbmFtZWQgc3ViZGlyZWN0b3J5LCBldmVuIGluIHNpbmdsZS10YXJnZXQgbW9kZScsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0pXG4gICAgLm9wdGlvbignZm9yY2UtdGFyZ2V0Jywge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVzYzogJ2ZvcmNlIGdlbmVyYXRpb24gb2YgdGhlIGdpdmVuIHRhcmdldHMsIGV2ZW4gaWYgdGhlIHNvdXJjZSBwYWNrYWdlLmpzb24gZG9lc250IGRlY2xhcmUgaXQnLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSlcbiAgICAub3B0aW9uKCdyZWN1cnNlJywge1xuICAgICAgYWxpYXM6ICdSJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlc2M6ICdyZWN1cnNpdmVseSBnZW5lcmF0ZSBhbmQgYnVpbGQgYWxsIGRlcGVuZGVuY2llcyBpbnRvIGBvdXRkaXJgJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0pXG4gICAgLm9wdGlvbigndmVyYm9zZScsIHtcbiAgICAgIGFsaWFzOiAndicsXG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZXNjOiAnZW1pdCB2ZXJib3NlIGJ1aWxkIG91dHB1dCcsXG4gICAgICBjb3VudDogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IDAsXG4gICAgfSlcbiAgICAub3B0aW9uKCdjbGVhbicsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlc2M6ICdjbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZXMgdXBvbiBzdWNjZXNzICh1c2UgLS1uby1jbGVhbiB0byBkaXNhYmxlKScsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0pXG4gICAgLm9wdGlvbignbnBtaWdub3JlJywge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVzYzogJ0F1dG8tdXBkYXRlIC5ucG1pZ25vcmUgdG8gZXhjbHVkZSB0aGUgb3V0cHV0IGRpcmVjdG9yeSBhbmQgaW5jbHVkZSB0aGUgLmpzaWkgZmlsZScsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0pXG4gICAgLm9wdGlvbigncm9zZXR0YS10YWJsZXQnLCB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2M6IFwiTG9jYXRpb24gb2YgYSBqc2lpLXJvc2V0dGEgdGFibGV0IHdpdGggc2FtcGxlIHRyYW5zbGF0aW9ucyAoY3JlYXRlZCB1c2luZyAnanNpaS1yb3NldHRhIGV4dHJhY3QnKVwiLFxuICAgIH0pXG4gICAgLm9wdGlvbigncm9zZXR0YS10cmFuc2xhdGUtbGl2ZScsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlc2M6IFwiVHJhbnNsYXRlIGNvZGUgc2FtcGxlcyBvbi10aGUtZmx5IGlmIHRoZXkgY2FuJ3QgYmUgZm91bmQgaW4gdGhlIHNhbXBsZXMgdGFibGV0IChkZXByZWNhdGVkKVwiLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9KVxuICAgIC5vcHRpb24oJ3Jvc2V0dGEtdW5rbm93bi1zbmlwcGV0cycsIHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgcmVxdWlyZXNBcmc6IHRydWUsXG4gICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgVW5rbm93blNuaXBwZXRNb2RlLlZFUkJBVElNLFxuICAgICAgICBVbmtub3duU25pcHBldE1vZGUuVFJBTlNMQVRFLFxuICAgICAgICBVbmtub3duU25pcHBldE1vZGUuRkFJTCxcbiAgICAgIF0sXG4gICAgICBkZXNjOiBcIldoYXQgdG8gZG8gd2l0aCBjb2RlIHNhbXBsZXMgaWYgdGhleSBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgc2FtcGxlcyB0YWJsZXRcIixcbiAgICB9KVxuICAgIC5vcHRpb24oJ3BhcmFsbGVsJywge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVzYzogJ0dlbmVyYXRlIGFsbCBjb25maWd1cmVkIHRhcmdldHMgaW4gcGFyYWxsZWwgKGRpc2FibGluZyB0aGlzIG1pZ2h0IGhlbHAgaWYgeW91IGVuY291bnRlciBFTUZJTEUgZXJyb3JzKScsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0pXG4gICAgLm9wdGlvbignZG90bmV0LW51Z2V0LWdsb2JhbC1wYWNrYWdlcy1mb2xkZXInLCB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2M6ICdDb25maWd1cmUgYSBkaWZmZXJlbnQgTnVHZXQgcGFja2FnZSBjYWNoZSBmb3IgTnVHZXQnLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhpcyBpcyBhIGhpZGRlbiBvcHRpb24sIGZvbGtzIG5lZWQgbm90IGJvdGhlciBpdCB1bmxlc3MgdGhleSdyZSB2ZXJ5IGFkdmFuY2VkXG4gICAgICBoaWRkZW46IHRydWUsXG4gICAgICAvLyBUaGlzIGlzIGV4cGVjdGVkIHRvIGJlIGEgcGF0aCwgd2hpY2ggc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgICAgIG5vcm1hbGl6ZTogdHJ1ZSxcbiAgICB9KVxuICAgIC5vcHRpb24oJ3ZhbGlkYXRlLWFzc2VtYmxpZXMnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZXNjOiAnV2hldGhlciBqc2lpIGFzc2VtYmxpZXMgc2hvdWxkIGJlIHZhbGlkYXRlZC4gVGhpcyBjYW4gYmUgZXhwZW5zaXZlIGFuZCBpcyBza2lwcGVkIGJ5IGRlZmF1bHQuJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0pXG4gICAgLnZlcnNpb24oVkVSU0lPTl9ERVNDKVxuICAgIC5zdHJpY3QoKS5hcmd2O1xuXG4gIGNvbmZpZ3VyZUxvZ2dpbmcoeyBsZXZlbDogYXJndi52ZXJib3NlICE9PSB1bmRlZmluZWQgPyBhcmd2LnZlcmJvc2UgOiAwIH0pO1xuXG4gIC8vIERlZmF1bHQgdG8gNCB0aHJlYWRzIGluIGNhc2Ugb2YgY29uY3VycmVuY3ksIGdvb2QgZW5vdWdoIGZvciBtb3N0IHNpdHVhdGlvbnNcbiAgZGVidWcoJ2NvbW1hbmQgbGluZSBhcmd1bWVudHM6JywgYXJndik7XG5cbiAgcmV0dXJuIHBhY21hayh7XG4gICAgYXJndixcbiAgICBjbGVhbjogYXJndi5jbGVhbixcbiAgICBjb2RlT25seTogYXJndlsnY29kZS1vbmx5J10sXG4gICAgZmluZ2VycHJpbnQ6IGFyZ3YuZmluZ2VycHJpbnQsXG4gICAgZm9yY2U6IGFyZ3YuZm9yY2UsXG4gICAgZm9yY2VTdWJkaXJlY3Rvcnk6IGFyZ3ZbJ2ZvcmNlLXN1YmRpcmVjdG9yeSddLFxuICAgIGZvcmNlVGFyZ2V0OiBhcmd2Wydmb3JjZS10YXJnZXQnXSxcbiAgICBpbnB1dERpcmVjdG9yaWVzOiBhcmd2LlBST0pFQ1RTLFxuICAgIG91dHB1dERpcmVjdG9yeTogYXJndi5vdXRkaXIsXG4gICAgcGFyYWxsZWw6IGFyZ3YucGFyYWxsZWwsXG4gICAgcmVjdXJzZTogYXJndi5yZWN1cnNlLFxuICAgIHJvc2V0dGFMaXZlQ29udmVyc2lvbjogYXJndlsncm9zZXR0YS10cmFuc2xhdGUtbGl2ZSddLFxuICAgIHJvc2V0dGFVbmtub3duU25pcHBldHM6IGFyZ3ZbJ3Jvc2V0dGEtdW5rbm93bi1zbmlwcGV0cyddIGFzXG4gICAgICB8IFVua25vd25TbmlwcGV0TW9kZVxuICAgICAgfCB1bmRlZmluZWQsXG4gICAgcm9zZXR0YVRhYmxldDogYXJndlsncm9zZXR0YS10YWJsZXQnXSxcbiAgICB0YXJnZXRzOiBhcmd2LnRhcmdldHM/Lm1hcCgodGFyZ2V0KSA9PiB0YXJnZXQgYXMgVGFyZ2V0TmFtZSksXG4gICAgdXBkYXRlTnBtSWdub3JlRmlsZXM6IGFyZ3YubnBtaWdub3JlLFxuICAgIHZhbGlkYXRlQXNzZW1ibGllczogYXJndlsndmFsaWRhdGUtYXNzZW1ibGllcyddLFxuICB9KTtcbn0pKCkuY2F0Y2goKGVycikgPT4ge1xuICBwcm9jZXNzLnN0ZGVyci53cml0ZShgJHtlcnIuc3RhY2t9XFxuYCk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuIl19