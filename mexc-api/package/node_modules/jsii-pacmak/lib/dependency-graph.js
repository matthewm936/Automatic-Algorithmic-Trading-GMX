"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.traverseDependencyGraph = void 0;
const fs = require("fs-extra");
const path_1 = require("path");
const util = require("./util");
/**
 * Traverses the dependency graph and invokes the provided callback method for
 * each individual dependency root directory (including the current package).
 * The dependency roots are de-duplicated based on their absolute path on the
 * file system.
 *
 * @param packageDir the current package's root directory (i.e: where the
 *                   `package.json` file is located)
 * @param callback   the function to invoke with each package's informations
 * @param host       the dependency graph traversal host to use (this parameter
 *                   should typically not be provided unless this module is
 *                   being unit tested)
 */
async function traverseDependencyGraph(packageDir, callback, host = {
    readJson: fs.readJson,
    resolveDependencyDirectory: util.resolveDependencyDirectory,
}) {
    return real$traverseDependencyGraph(packageDir, callback, host, new Set());
}
exports.traverseDependencyGraph = traverseDependencyGraph;
async function real$traverseDependencyGraph(packageDir, callback, host, visited) {
    var _a, _b;
    // We're at the root if we have not visited anything yet. How convenient!
    const isRoot = visited.size === 0;
    if (visited.has(packageDir)) {
        return void 0;
    }
    visited.add(packageDir);
    const meta = await host.readJson(path_1.join(packageDir, 'package.json'));
    if (!(await callback(packageDir, meta, isRoot))) {
        return void 0;
    }
    const deps = new Set([
        ...Object.keys((_a = meta.dependencies) !== null && _a !== void 0 ? _a : {}),
        ...Object.keys((_b = meta.peerDependencies) !== null && _b !== void 0 ? _b : {}),
    ]);
    return Promise.all(Array.from(deps).map((dep) => {
        const dependencyDir = host.resolveDependencyDirectory(packageDir, dep);
        return real$traverseDependencyGraph(dependencyDir, callback, host, visited);
    })).then();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZW5kZW5jeS1ncmFwaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlcGVuZGVuY3ktZ3JhcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQStCO0FBQy9CLCtCQUE0QjtBQUU1QiwrQkFBK0I7QUFFL0I7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0ksS0FBSyxVQUFVLHVCQUF1QixDQUMzQyxVQUFrQixFQUNsQixRQUFrQixFQUNsQixPQUFvQztJQUNsQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVE7SUFDckIsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLDBCQUEwQjtDQUM1RDtJQUVELE9BQU8sNEJBQTRCLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFURCwwREFTQztBQXFDRCxLQUFLLFVBQVUsNEJBQTRCLENBQ3pDLFVBQWtCLEVBQ2xCLFFBQWtCLEVBQ2xCLElBQWlDLEVBQ2pDLE9BQW9COztJQUVwQix5RUFBeUU7SUFDekUsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7SUFDbEMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzNCLE9BQU8sS0FBSyxDQUFDLENBQUM7S0FDZjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFeEIsTUFBTSxJQUFJLEdBQWdCLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FDM0MsV0FBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FDakMsQ0FBQztJQUNGLElBQUksQ0FBQyxDQUFDLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRTtRQUMvQyxPQUFPLEtBQUssQ0FBQyxDQUFDO0tBQ2Y7SUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQztRQUNuQixHQUFHLE1BQU0sQ0FBQyxJQUFJLE9BQUMsSUFBSSxDQUFDLFlBQVksbUNBQUksRUFBRSxDQUFDO1FBQ3ZDLEdBQUcsTUFBTSxDQUFDLElBQUksT0FBQyxJQUFJLENBQUMsZ0JBQWdCLG1DQUFJLEVBQUUsQ0FBQztLQUM1QyxDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2hCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDM0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2RSxPQUFPLDRCQUE0QixDQUNqQyxhQUFhLEVBQ2IsUUFBUSxFQUNSLElBQUksRUFDSixPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUVILENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBkZXBlbmRlbmN5IGdyYXBoIGFuZCBpbnZva2VzIHRoZSBwcm92aWRlZCBjYWxsYmFjayBtZXRob2QgZm9yXG4gKiBlYWNoIGluZGl2aWR1YWwgZGVwZW5kZW5jeSByb290IGRpcmVjdG9yeSAoaW5jbHVkaW5nIHRoZSBjdXJyZW50IHBhY2thZ2UpLlxuICogVGhlIGRlcGVuZGVuY3kgcm9vdHMgYXJlIGRlLWR1cGxpY2F0ZWQgYmFzZWQgb24gdGhlaXIgYWJzb2x1dGUgcGF0aCBvbiB0aGVcbiAqIGZpbGUgc3lzdGVtLlxuICpcbiAqIEBwYXJhbSBwYWNrYWdlRGlyIHRoZSBjdXJyZW50IHBhY2thZ2UncyByb290IGRpcmVjdG9yeSAoaS5lOiB3aGVyZSB0aGVcbiAqICAgICAgICAgICAgICAgICAgIGBwYWNrYWdlLmpzb25gIGZpbGUgaXMgbG9jYXRlZClcbiAqIEBwYXJhbSBjYWxsYmFjayAgIHRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2l0aCBlYWNoIHBhY2thZ2UncyBpbmZvcm1hdGlvbnNcbiAqIEBwYXJhbSBob3N0ICAgICAgIHRoZSBkZXBlbmRlbmN5IGdyYXBoIHRyYXZlcnNhbCBob3N0IHRvIHVzZSAodGhpcyBwYXJhbWV0ZXJcbiAqICAgICAgICAgICAgICAgICAgIHNob3VsZCB0eXBpY2FsbHkgbm90IGJlIHByb3ZpZGVkIHVubGVzcyB0aGlzIG1vZHVsZSBpc1xuICogICAgICAgICAgICAgICAgICAgYmVpbmcgdW5pdCB0ZXN0ZWQpXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0cmF2ZXJzZURlcGVuZGVuY3lHcmFwaChcbiAgcGFja2FnZURpcjogc3RyaW5nLFxuICBjYWxsYmFjazogQ2FsbGJhY2ssXG4gIGhvc3Q6IFRyYXZlcnNlRGVwZW5kZW5jeUdyYXBoSG9zdCA9IHtcbiAgICByZWFkSnNvbjogZnMucmVhZEpzb24sXG4gICAgcmVzb2x2ZURlcGVuZGVuY3lEaXJlY3Rvcnk6IHV0aWwucmVzb2x2ZURlcGVuZGVuY3lEaXJlY3RvcnksXG4gIH0sXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIHJlYWwkdHJhdmVyc2VEZXBlbmRlbmN5R3JhcGgocGFja2FnZURpciwgY2FsbGJhY2ssIGhvc3QsIG5ldyBTZXQoKSk7XG59XG5cbi8qKlxuICogQSBjYWxsYmFjayBpbnZva2VkIGZvciBlYWNoIG5vZGUgaW4gYSBOUE0gbW9kdWxlJ3MgZGVwZW5kZW5jeSBncmFwaC5cbiAqXG4gKiBAcGFyYW0gcGFja2FnZURpciB0aGUgZGlyZWN0b3J5IHdoZXJlIHRoZSBjdXJyZW50IHBhY2thZ2UgaXMgbG9jYXRlZC5cbiAqIEBwYXJhbSBtZXRhICAgICAgIHRoZSBjb250ZW50cyBvZiB0aGUgYHBhY2thZ2UuanNvbmAgZmlsZSBmb3IgdGhpcyBwYWNrYWdlLlxuICogQHBhcmFtIHJvb3QgICAgICAgd2hldGhlciB0aGlzIHBhY2thZ2UgaXMgdGhlIHJvb3QgdGhhdCB3YXMgcHJvdmlkZWQgdG8gdGhlXG4gKiAgICAgICAgICAgICAgICAgICBgdHJhdmVyc2VEZXBlbmRlbmN5R3JhcGhgIGNhbGwuXG4gKlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoaXMgcGFja2FnZSdzIG93biBkZXBlbmRlbmNpZXMgc2hvdWxkIGJlIHByb2Nlc3NlZCxcbiAqICAgICAgICAgIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgdHlwZSBDYWxsYmFjayA9IChcbiAgcGFja2FnZURpcjogc3RyaW5nLFxuICBtZXRhOiBQYWNrYWdlSnNvbixcbiAgcm9vdDogYm9vbGVhbixcbikgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG5cbi8qKlxuICogSG9zdCBtZXRob2RzIGZvciB0cmF2ZXJzaW5nIGRlcGVuZGVuY3kgZ3JhcGhzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYXZlcnNlRGVwZW5kZW5jeUdyYXBoSG9zdCB7XG4gIHJlYWRvbmx5IHJlYWRKc29uOiB0eXBlb2YgZnMucmVhZEpzb247XG4gIHJlYWRvbmx5IHJlc29sdmVEZXBlbmRlbmN5RGlyZWN0b3J5OiB0eXBlb2YgdXRpbC5yZXNvbHZlRGVwZW5kZW5jeURpcmVjdG9yeTtcbn1cblxuLyoqXG4gKiBDb250ZW50cyBvZiB0aGUgYHBhY2thZ2UuanNvbmAgZmlsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYWNrYWdlSnNvbiB7XG4gIHJlYWRvbmx5IGRlcGVuZGVuY2llcz86IHsgcmVhZG9ubHkgW25hbWU6IHN0cmluZ106IHN0cmluZyB9O1xuICByZWFkb25seSBwZWVyRGVwZW5kZW5jaWVzPzogeyByZWFkb25seSBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG5cbiAgcmVhZG9ubHkgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVhbCR0cmF2ZXJzZURlcGVuZGVuY3lHcmFwaChcbiAgcGFja2FnZURpcjogc3RyaW5nLFxuICBjYWxsYmFjazogQ2FsbGJhY2ssXG4gIGhvc3Q6IFRyYXZlcnNlRGVwZW5kZW5jeUdyYXBoSG9zdCxcbiAgdmlzaXRlZDogU2V0PHN0cmluZz4sXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gV2UncmUgYXQgdGhlIHJvb3QgaWYgd2UgaGF2ZSBub3QgdmlzaXRlZCBhbnl0aGluZyB5ZXQuIEhvdyBjb252ZW5pZW50IVxuICBjb25zdCBpc1Jvb3QgPSB2aXNpdGVkLnNpemUgPT09IDA7XG4gIGlmICh2aXNpdGVkLmhhcyhwYWNrYWdlRGlyKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgdmlzaXRlZC5hZGQocGFja2FnZURpcik7XG5cbiAgY29uc3QgbWV0YTogUGFja2FnZUpzb24gPSBhd2FpdCBob3N0LnJlYWRKc29uKFxuICAgIGpvaW4ocGFja2FnZURpciwgJ3BhY2thZ2UuanNvbicpLFxuICApO1xuICBpZiAoIShhd2FpdCBjYWxsYmFjayhwYWNrYWdlRGlyLCBtZXRhLCBpc1Jvb3QpKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cblxuICBjb25zdCBkZXBzID0gbmV3IFNldChbXG4gICAgLi4uT2JqZWN0LmtleXMobWV0YS5kZXBlbmRlbmNpZXMgPz8ge30pLFxuICAgIC4uLk9iamVjdC5rZXlzKG1ldGEucGVlckRlcGVuZGVuY2llcyA/PyB7fSksXG4gIF0pO1xuICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgQXJyYXkuZnJvbShkZXBzKS5tYXAoKGRlcCkgPT4ge1xuICAgICAgY29uc3QgZGVwZW5kZW5jeURpciA9IGhvc3QucmVzb2x2ZURlcGVuZGVuY3lEaXJlY3RvcnkocGFja2FnZURpciwgZGVwKTtcbiAgICAgIHJldHVybiByZWFsJHRyYXZlcnNlRGVwZW5kZW5jeUdyYXBoKFxuICAgICAgICBkZXBlbmRlbmN5RGlyLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgaG9zdCxcbiAgICAgICAgdmlzaXRlZCxcbiAgICAgICk7XG4gICAgfSksXG4gICAgLy8gVGhlIGZvbGxvd2luZyBcIi50aGVuXCIgbGl0ZXJhbGx5IGp1c3QgdHVybnMgYSBgUHJvbWlzZTxUPmAgaW50byBhIGBQcm9taXNlPHZvaWQ+YC4gQ29udmVuaWVudCFcbiAgKS50aGVuKCk7XG59XG4iXX0=