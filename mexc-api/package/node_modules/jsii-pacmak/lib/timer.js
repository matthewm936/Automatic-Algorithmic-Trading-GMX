"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timers = exports.Timer = void 0;
/**
 * A single timer
 */
class Timer {
    constructor(label) {
        this.label = label;
        this.startTime = Date.now();
    }
    start() {
        this.startTime = Date.now();
    }
    end() {
        this.timeMs = (Date.now() - this.startTime) / 1000;
    }
    isSet() {
        return this.timeMs !== undefined;
    }
    humanTime() {
        if (!this.timeMs) {
            return '???';
        }
        const parts = [];
        let time = this.timeMs;
        if (time > 60) {
            const mins = Math.floor(time / 60);
            parts.push(`${mins}m`);
            time -= mins * 60;
        }
        parts.push(`${time.toFixed(1)}s`);
        return parts.join('');
    }
}
exports.Timer = Timer;
/**
 * A collection of Timers
 */
class Timers {
    constructor() {
        this.timers = [];
    }
    record(label, operation) {
        const timer = this.start(label);
        try {
            const x = operation();
            timer.end();
            return x;
        }
        catch (e) {
            timer.end();
            throw e;
        }
    }
    async recordAsync(label, operation) {
        const timer = this.start(label);
        return operation().finally(() => timer.end());
    }
    start(label) {
        const timer = new Timer(label);
        this.timers.push(timer);
        return timer;
    }
    display() {
        const timers = this.timers.filter((t) => t.isSet());
        timers.sort((a, b) => b.timeMs - a.timeMs);
        return timers.map((t) => `${t.label} (${t.humanTime()})`).join(' | ');
    }
}
exports.Timers = Timers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aW1lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILE1BQWEsS0FBSztJQUloQixZQUFtQyxLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSztRQUNWLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTSxHQUFHO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3JELENBQUM7SUFFTSxLQUFLO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sU0FBUztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFakIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixJQUFJLElBQUksR0FBRyxFQUFFLEVBQUU7WUFDYixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNuQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUN2QixJQUFJLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNuQjtRQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGO0FBckNELHNCQXFDQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxNQUFNO0lBQW5CO1FBQ21CLFdBQU0sR0FBWSxFQUFFLENBQUM7SUFpQ3hDLENBQUM7SUEvQlEsTUFBTSxDQUFJLEtBQWEsRUFBRSxTQUFrQjtRQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLElBQUk7WUFDRixNQUFNLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztZQUN0QixLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDWixPQUFPLENBQUMsQ0FBQztTQUNWO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDWixNQUFNLENBQUMsQ0FBQztTQUNUO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQ3RCLEtBQWEsRUFDYixTQUEyQjtRQUUzQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTSxLQUFLLENBQUMsS0FBYTtRQUN4QixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFRLEVBQUUsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTyxHQUFHLENBQUMsQ0FBQyxNQUFPLENBQUMsQ0FBQztRQUMzRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RSxDQUFDO0NBQ0Y7QUFsQ0Qsd0JBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHNpbmdsZSB0aW1lclxuICovXG5leHBvcnQgY2xhc3MgVGltZXIge1xuICBwdWJsaWMgdGltZU1zPzogbnVtYmVyO1xuICBwcml2YXRlIHN0YXJ0VGltZTogbnVtYmVyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbGFiZWw6IHN0cmluZykge1xuICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gIH1cblxuICBwdWJsaWMgZW5kKCkge1xuICAgIHRoaXMudGltZU1zID0gKERhdGUubm93KCkgLSB0aGlzLnN0YXJ0VGltZSkgLyAxMDAwO1xuICB9XG5cbiAgcHVibGljIGlzU2V0KCkge1xuICAgIHJldHVybiB0aGlzLnRpbWVNcyAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIGh1bWFuVGltZSgpIHtcbiAgICBpZiAoIXRoaXMudGltZU1zKSB7XG4gICAgICByZXR1cm4gJz8/Pyc7XG4gICAgfVxuXG4gICAgY29uc3QgcGFydHMgPSBbXTtcblxuICAgIGxldCB0aW1lID0gdGhpcy50aW1lTXM7XG4gICAgaWYgKHRpbWUgPiA2MCkge1xuICAgICAgY29uc3QgbWlucyA9IE1hdGguZmxvb3IodGltZSAvIDYwKTtcbiAgICAgIHBhcnRzLnB1c2goYCR7bWluc31tYCk7XG4gICAgICB0aW1lIC09IG1pbnMgKiA2MDtcbiAgICB9XG4gICAgcGFydHMucHVzaChgJHt0aW1lLnRvRml4ZWQoMSl9c2ApO1xuXG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJycpO1xuICB9XG59XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIFRpbWVyc1xuICovXG5leHBvcnQgY2xhc3MgVGltZXJzIHtcbiAgcHJpdmF0ZSByZWFkb25seSB0aW1lcnM6IFRpbWVyW10gPSBbXTtcblxuICBwdWJsaWMgcmVjb3JkPFQ+KGxhYmVsOiBzdHJpbmcsIG9wZXJhdGlvbjogKCkgPT4gVCk6IFQge1xuICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zdGFydChsYWJlbCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHggPSBvcGVyYXRpb24oKTtcbiAgICAgIHRpbWVyLmVuZCgpO1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGltZXIuZW5kKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWNvcmRBc3luYzxUPihcbiAgICBsYWJlbDogc3RyaW5nLFxuICAgIG9wZXJhdGlvbjogKCkgPT4gUHJvbWlzZTxUPixcbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgdGltZXIgPSB0aGlzLnN0YXJ0KGxhYmVsKTtcbiAgICByZXR1cm4gb3BlcmF0aW9uKCkuZmluYWxseSgoKSA9PiB0aW1lci5lbmQoKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQobGFiZWw6IHN0cmluZykge1xuICAgIGNvbnN0IHRpbWVyID0gbmV3IFRpbWVyKGxhYmVsKTtcbiAgICB0aGlzLnRpbWVycy5wdXNoKHRpbWVyKTtcbiAgICByZXR1cm4gdGltZXI7XG4gIH1cblxuICBwdWJsaWMgZGlzcGxheSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHRpbWVycyA9IHRoaXMudGltZXJzLmZpbHRlcigodCkgPT4gdC5pc1NldCgpKTtcbiAgICB0aW1lcnMuc29ydCgoYTogVGltZXIsIGI6IFRpbWVyKSA9PiBiLnRpbWVNcyEgLSBhLnRpbWVNcyEpO1xuICAgIHJldHVybiB0aW1lcnMubWFwKCh0KSA9PiBgJHt0LmxhYmVsfSAoJHt0Lmh1bWFuVGltZSgpfSlgKS5qb2luKCcgfCAnKTtcbiAgfVxufVxuIl19