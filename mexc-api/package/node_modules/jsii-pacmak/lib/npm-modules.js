"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAllNpmIgnores = exports.findJsiiModules = void 0;
const spec = require("@jsii/spec");
const fs = require("fs-extra");
const path = require("path");
const logging = require("../lib/logging");
const packaging_1 = require("./packaging");
const toposort_1 = require("./toposort");
const util_1 = require("./util");
/**
 * Find all modules that need to be packagerd
 *
 * If the input list is empty, include the current directory.
 *
 * The result is topologically sorted.
 */
async function findJsiiModules(directories, recurse) {
    const ret = [];
    const visited = new Set();
    const toVisit = directories.length > 0 ? directories : ['.'];
    await Promise.all(toVisit.map((dir) => visitPackage(dir, true)));
    return toposort_1.topologicalSort(ret, (m) => m.name, (m) => m.dependencyNames);
    async function visitPackage(dir, isRoot) {
        var _a, _b, _c, _d, _e;
        const realPath = await fs.realpath(dir);
        if (visited.has(realPath)) {
            return;
        } // Already visited
        visited.add(realPath);
        const pkg = await fs.readJson(path.join(realPath, 'package.json'));
        if (!((_a = pkg.jsii) === null || _a === void 0 ? void 0 : _a.outdir) || !((_b = pkg.jsii) === null || _b === void 0 ? void 0 : _b.targets)) {
            if (isRoot) {
                throw new Error(`Invalid "jsii" section in ${realPath}. Expecting "outdir" and "targets"`);
            }
            else {
                return; // just move on, this is not a jsii package
            }
        }
        if (!pkg.name) {
            throw new Error(`package.json does not have a 'name' field: ${JSON.stringify(pkg, undefined, 2)}`);
        }
        const dependencyNames = [
            ...Object.keys((_c = pkg.dependencies) !== null && _c !== void 0 ? _c : {}),
            ...Object.keys((_d = pkg.peerDependencies) !== null && _d !== void 0 ? _d : {}),
            ...Object.keys((_e = pkg.devDependencies) !== null && _e !== void 0 ? _e : {}),
        ];
        // if --recurse is set, find dependency dirs and build them.
        if (recurse) {
            await Promise.all(dependencyNames
                .map((dep) => util_1.resolveDependencyDirectory(realPath, dep))
                .map((depDir) => visitPackage(depDir, false)));
        }
        // outdir is either by package.json/jsii.outdir (relative to package root) or via command line (relative to cwd)
        const outputDirectory = pkg.jsii.outdir && path.resolve(realPath, pkg.jsii.outdir);
        const targets = [...Object.keys(pkg.jsii.targets), 'js']; // "js" is an implicit target.
        ret.push(new packaging_1.JsiiModule({
            name: pkg.name,
            moduleDirectory: realPath,
            defaultOutputDirectory: outputDirectory,
            availableTargets: targets,
            dependencyNames,
        }));
    }
}
exports.findJsiiModules = findJsiiModules;
async function updateAllNpmIgnores(packages) {
    await Promise.all(packages.map((pkg) => updateNpmIgnore(pkg.moduleDirectory, pkg.outputDirectory)));
}
exports.updateAllNpmIgnores = updateAllNpmIgnores;
async function updateNpmIgnore(packageDir, excludeOutdir) {
    const npmIgnorePath = path.join(packageDir, '.npmignore');
    let lines = new Array();
    let modified = false;
    if (await fs.pathExists(npmIgnorePath)) {
        lines = (await fs.readFile(npmIgnorePath)).toString().split('\n');
    }
    // if this is a fresh .npmignore, we can be a bit more opinionated
    // otherwise, we add just add stuff that's critical
    if (lines.length === 0) {
        excludePattern('Exclude typescript source and config', '*.ts', 'tsconfig.json');
        includePattern('Include javascript files and typescript declarations', '*.js', '*.d.ts');
    }
    if (excludeOutdir) {
        excludePattern('Exclude jsii outdir', path.relative(packageDir, excludeOutdir));
    }
    includePattern('Include .jsii', spec.SPEC_FILE_NAME);
    if (modified) {
        await fs.writeFile(npmIgnorePath, `${lines.join('\n')}\n`);
        logging.info('Updated .npmignore');
    }
    function includePattern(comment, ...patterns) {
        excludePattern(comment, ...patterns.map((p) => `!${p}`));
    }
    function excludePattern(comment, ...patterns) {
        let first = true;
        for (const pattern of patterns) {
            if (lines.includes(pattern)) {
                return; // already in .npmignore
            }
            modified = true;
            if (first) {
                lines.push('');
                lines.push(`# ${comment}`);
                first = false;
            }
            lines.push(pattern);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,