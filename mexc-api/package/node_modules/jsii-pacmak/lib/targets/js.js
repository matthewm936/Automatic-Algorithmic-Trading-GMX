"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const spec = require("@jsii/spec");
const generator_1 = require("../generator");
const target_1 = require("../target");
const version_utils_1 = require("./version-utils");
const _1 = require(".");
class JavaScript extends target_1.Target {
    constructor() {
        super(...arguments);
        this.generator = new PackOnly();
    }
    static toPackageInfos(assm) {
        const releaseVersion = version_utils_1.toReleaseVersion(assm.version, _1.TargetName.JAVASCRIPT);
        const packageInfo = {
            repository: 'NPM',
            url: `https://www.npmjs.com/package/${assm.name}/v/${releaseVersion}`,
            usage: {
                'package.json': {
                    language: 'js',
                    code: JSON.stringify({ [assm.name]: `^${releaseVersion}` }, null, 2),
                },
                npm: {
                    language: 'console',
                    code: `$ npm i ${assm.name}@${releaseVersion}`,
                },
                yarn: {
                    language: 'console',
                    code: `$ yarn add ${assm.name}@${releaseVersion}`,
                },
            },
        };
        return { typescript: packageInfo, javascript: packageInfo };
    }
    static toNativeReference(type) {
        const [, ...name] = type.fqn.split('.');
        const resolvedName = name.join('.');
        const result = {
            typescript: `import { ${resolvedName} } from '${type.assembly}';`,
        };
        if (!spec.isInterfaceType(type)) {
            result.javascript = `const { ${resolvedName} } = require('${type.assembly}');`;
        }
        else {
            result.javascript = `// ${resolvedName} is an interface`;
        }
        return result;
    }
    async build(sourceDir, outDir) {
        return this.copyFiles(sourceDir, outDir);
    }
}
exports.default = JavaScript;
// ##################
// # CODE GENERATOR #
// ##################
class PackOnly extends generator_1.Generator {
    async save(outdir, tarball, _) {
        // Intentionally ignore the Legalese field here... it's not useful here.
        return super.save(outdir, tarball, {});
    }
    getAssemblyOutputDir(_mod) {
        return '.';
    }
    onBeginInterface(_ifc) {
        return;
    }
    onEndInterface(_ifc) {
        return;
    }
    onInterfaceMethod(_ifc, _method) {
        return;
    }
    onInterfaceMethodOverload(_ifc, _overload, _originalMethod) {
        return;
    }
    onInterfaceProperty(_ifc, _prop) {
        return;
    }
    onProperty(_cls, _prop) {
        return;
    }
    onStaticProperty(_cls, _prop) {
        return;
    }
    onUnionProperty(_cls, _prop, _union) {
        return;
    }
    onMethod(_cls, _method) {
        return;
    }
    onMethodOverload(_cls, _overload, _originalMethod) {
        return;
    }
    onStaticMethod(_cls, _method) {
        return;
    }
    onStaticMethodOverload(_cls, _overload, _originalMethod) {
        return;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJqcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUVuQyw0Q0FBbUQ7QUFDbkQsc0NBQWdEO0FBQ2hELG1EQUFtRDtBQUVuRCx3QkFBK0I7QUFFL0IsTUFBcUIsVUFBVyxTQUFRLGVBQU07SUFBOUM7O1FBNENxQixjQUFTLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUtoRCxDQUFDO0lBaERRLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBbUI7UUFHOUMsTUFBTSxjQUFjLEdBQUcsZ0NBQWdCLENBQ3JDLElBQUksQ0FBQyxPQUFPLEVBQ1osYUFBVSxDQUFDLFVBQVUsQ0FDdEIsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFnQjtZQUMvQixVQUFVLEVBQUUsS0FBSztZQUNqQixHQUFHLEVBQUUsaUNBQWlDLElBQUksQ0FBQyxJQUFJLE1BQU0sY0FBYyxFQUFFO1lBQ3JFLEtBQUssRUFBRTtnQkFDTCxjQUFjLEVBQUU7b0JBQ2QsUUFBUSxFQUFFLElBQUk7b0JBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLGNBQWMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztpQkFDckU7Z0JBQ0QsR0FBRyxFQUFFO29CQUNILFFBQVEsRUFBRSxTQUFTO29CQUNuQixJQUFJLEVBQUUsV0FBVyxJQUFJLENBQUMsSUFBSSxJQUFJLGNBQWMsRUFBRTtpQkFDL0M7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLFFBQVEsRUFBRSxTQUFTO29CQUNuQixJQUFJLEVBQUUsY0FBYyxJQUFJLENBQUMsSUFBSSxJQUFJLGNBQWMsRUFBRTtpQkFDbEQ7YUFDRjtTQUNGLENBQUM7UUFDRixPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDOUQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFlO1FBQzdDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLE1BQU0sR0FBZ0Q7WUFDMUQsVUFBVSxFQUFFLFlBQVksWUFBWSxZQUFZLElBQUksQ0FBQyxRQUFRLElBQUk7U0FDbEUsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxVQUFVLEdBQUcsV0FBVyxZQUFZLGlCQUFpQixJQUFJLENBQUMsUUFBUSxLQUFLLENBQUM7U0FDaEY7YUFBTTtZQUNMLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxZQUFZLGtCQUFrQixDQUFDO1NBQzFEO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUlNLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBaUIsRUFBRSxNQUFjO1FBQ2xELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGO0FBakRELDZCQWlEQztBQUVELHFCQUFxQjtBQUNyQixxQkFBcUI7QUFDckIscUJBQXFCO0FBRXJCLE1BQU0sUUFBUyxTQUFRLHFCQUFTO0lBQ3ZCLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYyxFQUFFLE9BQWUsRUFBRSxDQUFXO1FBQzVELHdFQUF3RTtRQUN4RSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRVMsb0JBQW9CLENBQUMsSUFBbUI7UUFDaEQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRVMsZ0JBQWdCLENBQUMsSUFBd0I7UUFDakQsT0FBTztJQUNULENBQUM7SUFDUyxjQUFjLENBQUMsSUFBd0I7UUFDL0MsT0FBTztJQUNULENBQUM7SUFDUyxpQkFBaUIsQ0FBQyxJQUF3QixFQUFFLE9BQW9CO1FBQ3hFLE9BQU87SUFDVCxDQUFDO0lBQ1MseUJBQXlCLENBQ2pDLElBQXdCLEVBQ3hCLFNBQXNCLEVBQ3RCLGVBQTRCO1FBRTVCLE9BQU87SUFDVCxDQUFDO0lBQ1MsbUJBQW1CLENBQzNCLElBQXdCLEVBQ3hCLEtBQW9CO1FBRXBCLE9BQU87SUFDVCxDQUFDO0lBQ1MsVUFBVSxDQUFDLElBQW9CLEVBQUUsS0FBb0I7UUFDN0QsT0FBTztJQUNULENBQUM7SUFDUyxnQkFBZ0IsQ0FBQyxJQUFvQixFQUFFLEtBQW9CO1FBQ25FLE9BQU87SUFDVCxDQUFDO0lBQ1MsZUFBZSxDQUN2QixJQUFvQixFQUNwQixLQUFvQixFQUNwQixNQUErQjtRQUUvQixPQUFPO0lBQ1QsQ0FBQztJQUNTLFFBQVEsQ0FBQyxJQUFvQixFQUFFLE9BQW9CO1FBQzNELE9BQU87SUFDVCxDQUFDO0lBQ1MsZ0JBQWdCLENBQ3hCLElBQW9CLEVBQ3BCLFNBQXNCLEVBQ3RCLGVBQTRCO1FBRTVCLE9BQU87SUFDVCxDQUFDO0lBQ1MsY0FBYyxDQUFDLElBQW9CLEVBQUUsT0FBb0I7UUFDakUsT0FBTztJQUNULENBQUM7SUFDUyxzQkFBc0IsQ0FDOUIsSUFBb0IsRUFDcEIsU0FBc0IsRUFDdEIsZUFBNEI7UUFFNUIsT0FBTztJQUNULENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNwZWMgZnJvbSAnQGpzaWkvc3BlYyc7XG5cbmltcG9ydCB7IEdlbmVyYXRvciwgTGVnYWxlc2UgfSBmcm9tICcuLi9nZW5lcmF0b3InO1xuaW1wb3J0IHsgUGFja2FnZUluZm8sIFRhcmdldCB9IGZyb20gJy4uL3RhcmdldCc7XG5pbXBvcnQgeyB0b1JlbGVhc2VWZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uLXV0aWxzJztcblxuaW1wb3J0IHsgVGFyZ2V0TmFtZSB9IGZyb20gJy4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKYXZhU2NyaXB0IGV4dGVuZHMgVGFyZ2V0IHtcbiAgcHVibGljIHN0YXRpYyB0b1BhY2thZ2VJbmZvcyhhc3NtOiBzcGVjLkFzc2VtYmx5KToge1xuICAgIFtsYW5ndWFnZTogc3RyaW5nXTogUGFja2FnZUluZm87XG4gIH0ge1xuICAgIGNvbnN0IHJlbGVhc2VWZXJzaW9uID0gdG9SZWxlYXNlVmVyc2lvbihcbiAgICAgIGFzc20udmVyc2lvbixcbiAgICAgIFRhcmdldE5hbWUuSkFWQVNDUklQVCxcbiAgICApO1xuXG4gICAgY29uc3QgcGFja2FnZUluZm86IFBhY2thZ2VJbmZvID0ge1xuICAgICAgcmVwb3NpdG9yeTogJ05QTScsXG4gICAgICB1cmw6IGBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS8ke2Fzc20ubmFtZX0vdi8ke3JlbGVhc2VWZXJzaW9ufWAsXG4gICAgICB1c2FnZToge1xuICAgICAgICAncGFja2FnZS5qc29uJzoge1xuICAgICAgICAgIGxhbmd1YWdlOiAnanMnLFxuICAgICAgICAgIGNvZGU6IEpTT04uc3RyaW5naWZ5KHsgW2Fzc20ubmFtZV06IGBeJHtyZWxlYXNlVmVyc2lvbn1gIH0sIG51bGwsIDIpLFxuICAgICAgICB9LFxuICAgICAgICBucG06IHtcbiAgICAgICAgICBsYW5ndWFnZTogJ2NvbnNvbGUnLFxuICAgICAgICAgIGNvZGU6IGAkIG5wbSBpICR7YXNzbS5uYW1lfUAke3JlbGVhc2VWZXJzaW9ufWAsXG4gICAgICAgIH0sXG4gICAgICAgIHlhcm46IHtcbiAgICAgICAgICBsYW5ndWFnZTogJ2NvbnNvbGUnLFxuICAgICAgICAgIGNvZGU6IGAkIHlhcm4gYWRkICR7YXNzbS5uYW1lfUAke3JlbGVhc2VWZXJzaW9ufWAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHsgdHlwZXNjcmlwdDogcGFja2FnZUluZm8sIGphdmFzY3JpcHQ6IHBhY2thZ2VJbmZvIH07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHRvTmF0aXZlUmVmZXJlbmNlKHR5cGU6IHNwZWMuVHlwZSkge1xuICAgIGNvbnN0IFssIC4uLm5hbWVdID0gdHlwZS5mcW4uc3BsaXQoJy4nKTtcbiAgICBjb25zdCByZXNvbHZlZE5hbWUgPSBuYW1lLmpvaW4oJy4nKTtcbiAgICBjb25zdCByZXN1bHQ6IHsgdHlwZXNjcmlwdDogc3RyaW5nOyBqYXZhc2NyaXB0Pzogc3RyaW5nIH0gPSB7XG4gICAgICB0eXBlc2NyaXB0OiBgaW1wb3J0IHsgJHtyZXNvbHZlZE5hbWV9IH0gZnJvbSAnJHt0eXBlLmFzc2VtYmx5fSc7YCxcbiAgICB9O1xuICAgIGlmICghc3BlYy5pc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgIHJlc3VsdC5qYXZhc2NyaXB0ID0gYGNvbnN0IHsgJHtyZXNvbHZlZE5hbWV9IH0gPSByZXF1aXJlKCcke3R5cGUuYXNzZW1ibHl9Jyk7YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LmphdmFzY3JpcHQgPSBgLy8gJHtyZXNvbHZlZE5hbWV9IGlzIGFuIGludGVyZmFjZWA7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZ2VuZXJhdG9yID0gbmV3IFBhY2tPbmx5KCk7XG5cbiAgcHVibGljIGFzeW5jIGJ1aWxkKHNvdXJjZURpcjogc3RyaW5nLCBvdXREaXI6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmNvcHlGaWxlcyhzb3VyY2VEaXIsIG91dERpcik7XG4gIH1cbn1cblxuLy8gIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyAjIENPREUgR0VORVJBVE9SICNcbi8vICMjIyMjIyMjIyMjIyMjIyMjI1xuXG5jbGFzcyBQYWNrT25seSBleHRlbmRzIEdlbmVyYXRvciB7XG4gIHB1YmxpYyBhc3luYyBzYXZlKG91dGRpcjogc3RyaW5nLCB0YXJiYWxsOiBzdHJpbmcsIF86IExlZ2FsZXNlKSB7XG4gICAgLy8gSW50ZW50aW9uYWxseSBpZ25vcmUgdGhlIExlZ2FsZXNlIGZpZWxkIGhlcmUuLi4gaXQncyBub3QgdXNlZnVsIGhlcmUuXG4gICAgcmV0dXJuIHN1cGVyLnNhdmUob3V0ZGlyLCB0YXJiYWxsLCB7fSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0QXNzZW1ibHlPdXRwdXREaXIoX21vZDogc3BlYy5Bc3NlbWJseSkge1xuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25CZWdpbkludGVyZmFjZShfaWZjOiBzcGVjLkludGVyZmFjZVR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvdGVjdGVkIG9uRW5kSW50ZXJmYWNlKF9pZmM6IHNwZWMuSW50ZXJmYWNlVHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm90ZWN0ZWQgb25JbnRlcmZhY2VNZXRob2QoX2lmYzogc3BlYy5JbnRlcmZhY2VUeXBlLCBfbWV0aG9kOiBzcGVjLk1ldGhvZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm90ZWN0ZWQgb25JbnRlcmZhY2VNZXRob2RPdmVybG9hZChcbiAgICBfaWZjOiBzcGVjLkludGVyZmFjZVR5cGUsXG4gICAgX292ZXJsb2FkOiBzcGVjLk1ldGhvZCxcbiAgICBfb3JpZ2luYWxNZXRob2Q6IHNwZWMuTWV0aG9kLFxuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvdGVjdGVkIG9uSW50ZXJmYWNlUHJvcGVydHkoXG4gICAgX2lmYzogc3BlYy5JbnRlcmZhY2VUeXBlLFxuICAgIF9wcm9wOiBzcGVjLlByb3BlcnR5LFxuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvdGVjdGVkIG9uUHJvcGVydHkoX2Nsczogc3BlYy5DbGFzc1R5cGUsIF9wcm9wOiBzcGVjLlByb3BlcnR5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb3RlY3RlZCBvblN0YXRpY1Byb3BlcnR5KF9jbHM6IHNwZWMuQ2xhc3NUeXBlLCBfcHJvcDogc3BlYy5Qcm9wZXJ0eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm90ZWN0ZWQgb25VbmlvblByb3BlcnR5KFxuICAgIF9jbHM6IHNwZWMuQ2xhc3NUeXBlLFxuICAgIF9wcm9wOiBzcGVjLlByb3BlcnR5LFxuICAgIF91bmlvbjogc3BlYy5VbmlvblR5cGVSZWZlcmVuY2UsXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm90ZWN0ZWQgb25NZXRob2QoX2Nsczogc3BlYy5DbGFzc1R5cGUsIF9tZXRob2Q6IHNwZWMuTWV0aG9kKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb3RlY3RlZCBvbk1ldGhvZE92ZXJsb2FkKFxuICAgIF9jbHM6IHNwZWMuQ2xhc3NUeXBlLFxuICAgIF9vdmVybG9hZDogc3BlYy5NZXRob2QsXG4gICAgX29yaWdpbmFsTWV0aG9kOiBzcGVjLk1ldGhvZCxcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb3RlY3RlZCBvblN0YXRpY01ldGhvZChfY2xzOiBzcGVjLkNsYXNzVHlwZSwgX21ldGhvZDogc3BlYy5NZXRob2QpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvdGVjdGVkIG9uU3RhdGljTWV0aG9kT3ZlcmxvYWQoXG4gICAgX2Nsczogc3BlYy5DbGFzc1R5cGUsXG4gICAgX292ZXJsb2FkOiBzcGVjLk1ldGhvZCxcbiAgICBfb3JpZ2luYWxNZXRob2Q6IHNwZWMuTWV0aG9kLFxuICApIHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==