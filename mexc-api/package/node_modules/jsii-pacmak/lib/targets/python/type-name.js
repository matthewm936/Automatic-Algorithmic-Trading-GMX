"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _element, _element_1, _wrapped, _pythonType, _options, _fqn;
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergePythonImports = exports.toPackageName = exports.toTypeName = void 0;
const spec_1 = require("@jsii/spec");
const codemaker_1 = require("codemaker");
const crypto_1 = require("crypto");
const util_1 = require("./util");
function toTypeName(ref) {
    if (ref == null) {
        return Primitive.NONE;
    }
    const type = isOptionalValue(ref) ? ref.type : ref;
    const optional = isOptionalValue(ref) && ref.optional;
    let result = Primitive.ANY;
    if (spec_1.isPrimitiveTypeReference(type)) {
        result = Primitive.of(type);
    }
    else if (spec_1.isCollectionTypeReference(type)) {
        const elt = toTypeName(type.collection.elementtype);
        if (type.collection.kind === spec_1.CollectionKind.Array) {
            result = new List(elt);
        }
        else {
            result = new Dict(elt);
        }
    }
    else if (spec_1.isUnionTypeReference(type)) {
        result = new Union(type.union.types.map(toTypeName));
    }
    else if (spec_1.isNamedTypeReference(type)) {
        result = new UserType(type.fqn);
    }
    return optional ? new Optional(result) : result;
}
exports.toTypeName = toTypeName;
/**
 * Obtains the Python package name for a given submodule FQN.
 *
 * @param fqn      the submodule FQN for which a package name is needed.
 * @param rootAssm the assembly this FQN belongs to.
 */
function toPackageName(fqn, rootAssm) {
    return getPackageName(fqn, rootAssm).packageName;
}
exports.toPackageName = toPackageName;
function mergePythonImports(...pythonImports) {
    const result = {};
    for (const bag of pythonImports) {
        for (const [packageName, items] of Object.entries(bag)) {
            if (!(packageName in result)) {
                result[packageName] = new Set();
            }
            for (const item of items) {
                result[packageName].add(item);
            }
        }
    }
    return result;
}
exports.mergePythonImports = mergePythonImports;
function isOptionalValue(type) {
    return type.type != null;
}
class Dict {
    constructor(element) {
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _element.set(this, void 0);
        __classPrivateFieldSet(this, _element, element);
    }
    pythonType(context) {
        return `typing.Mapping[builtins.str, ${__classPrivateFieldGet(this, _element).pythonType(context)}]`;
    }
    requiredImports(context) {
        return __classPrivateFieldGet(this, _element).requiredImports(context);
    }
}
_element = new WeakMap();
class List {
    constructor(element) {
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _element_1.set(this, void 0);
        __classPrivateFieldSet(this, _element_1, element);
    }
    pythonType(context) {
        const type = context.parameterType ? 'Sequence' : 'List';
        return `typing.${type}[${__classPrivateFieldGet(this, _element_1).pythonType(context)}]`;
    }
    requiredImports(context) {
        return __classPrivateFieldGet(this, _element_1).requiredImports(context);
    }
}
_element_1 = new WeakMap();
class Optional {
    constructor(wrapped) {
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _wrapped.set(this, void 0);
        __classPrivateFieldSet(this, _wrapped, wrapped);
    }
    pythonType(context) {
        const optionalType = __classPrivateFieldGet(this, _wrapped).pythonType({
            ...context,
            ignoreOptional: true,
        });
        if (context.ignoreOptional || __classPrivateFieldGet(this, _wrapped) === Primitive.ANY) {
            return optionalType;
        }
        return `typing.Optional[${optionalType}]`;
    }
    requiredImports(context) {
        return __classPrivateFieldGet(this, _wrapped).requiredImports({ ...context, ignoreOptional: true });
    }
}
_wrapped = new WeakMap();
class Primitive {
    constructor(pythonType) {
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _pythonType.set(this, void 0);
        __classPrivateFieldSet(this, _pythonType, pythonType);
    }
    static of(type) {
        switch (type.primitive) {
            case spec_1.PrimitiveType.Boolean:
                return Primitive.BOOL;
            case spec_1.PrimitiveType.Date:
                return Primitive.DATE;
            case spec_1.PrimitiveType.Number:
                return Primitive.JSII_NUMBER;
            case spec_1.PrimitiveType.String:
                return Primitive.STR;
            case spec_1.PrimitiveType.Json:
                return Primitive.JSON;
            case spec_1.PrimitiveType.Any:
            default:
                return Primitive.ANY;
        }
    }
    pythonType() {
        return __classPrivateFieldGet(this, _pythonType);
    }
    requiredImports() {
        return {};
    }
}
_pythonType = new WeakMap();
Primitive.BOOL = new Primitive('builtins.bool');
Primitive.DATE = new Primitive('datetime.datetime');
Primitive.JSII_NUMBER = new Primitive('jsii.Number'); // "jsii" is always already imported!
Primitive.STR = new Primitive('builtins.str');
Primitive.JSON = new Primitive('typing.Mapping[typing.Any, typing.Any]');
Primitive.ANY = new Primitive('typing.Any');
Primitive.NONE = new Primitive('None');
class Union {
    constructor(options) {
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _options.set(this, void 0);
        __classPrivateFieldSet(this, _options, options);
    }
    pythonType(context) {
        return `typing.Union[${__classPrivateFieldGet(this, _options).map((o) => o.pythonType(context))
            .join(', ')}]`;
    }
    requiredImports(context) {
        return mergePythonImports(...__classPrivateFieldGet(this, _options).map((o) => o.requiredImports(context)));
    }
}
_options = new WeakMap();
class UserType {
    constructor(fqn) {
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _fqn.set(this, void 0);
        __classPrivateFieldSet(this, _fqn, fqn);
    }
    pythonType(context) {
        return this.resolve(context).pythonType;
    }
    requiredImports(context) {
        const requiredImport = this.resolve(context).requiredImport;
        if (requiredImport == null) {
            return {};
        }
        return { [requiredImport.sourcePackage]: new Set([requiredImport.item]) };
    }
    resolve({ assembly, emittedTypes, submodule, surroundingTypeFqns, typeAnnotation = true, }) {
        var _a, _b;
        const { assemblyName, packageName, pythonFqn } = toPythonFqn(__classPrivateFieldGet(this, _fqn), assembly);
        if (assemblyName !== assembly.name) {
            return {
                pythonType: pythonFqn,
                requiredImport: {
                    sourcePackage: packageName,
                    item: '',
                },
            };
        }
        const submodulePythonName = toPythonFqn(submodule, assembly).pythonFqn;
        const typeSubmodulePythonName = toPythonFqn(findParentSubmodule(assembly.types[__classPrivateFieldGet(this, _fqn)], assembly), assembly).pythonFqn;
        if (typeSubmodulePythonName === submodulePythonName) {
            // Identifiy declarations that are not yet initialized and hence cannot be
            // used as part of a type qualification. Since this is not a forward
            // reference, the type was already emitted and its un-qualified name must
            // be used instead of it's locally qualified name.
            const nestingParent = (_b = (_a = surroundingTypeFqns === null || surroundingTypeFqns === void 0 ? void 0 : surroundingTypeFqns.map((fqn) => toPythonFqn(fqn, assembly).pythonFqn)) === null || _a === void 0 ? void 0 : _a.reverse()) === null || _b === void 0 ? void 0 : _b.find((parent) => pythonFqn.startsWith(`${parent}.`));
            if (typeAnnotation &&
                (!emittedTypes.has(__classPrivateFieldGet(this, _fqn)) || nestingParent != null)) {
                // Possibly a forward reference, outputting the stringifierd python FQN
                return {
                    pythonType: JSON.stringify(pythonFqn.substring(submodulePythonName.length + 1)),
                };
            }
            if (!typeAnnotation && nestingParent) {
                // This is not for a type annotation, so we should be at a point in time
                // where the surrounding symbol has been defined entirely, so we can
                // refer to it "normally" now.
                return { pythonType: pythonFqn.substring(nestingParent.length + 1) };
            }
            // We'll just make a module-qualified reference at this point.
            return {
                pythonType: pythonFqn.substring(submodulePythonName.length + 1),
            };
        }
        const [toImport, ...nested] = pythonFqn
            .substring(typeSubmodulePythonName.length + 1)
            .split('.');
        const aliasSuffix = crypto_1.createHash('sha256')
            .update(typeSubmodulePythonName)
            .update('.')
            .update(toImport)
            .digest('hex')
            .substring(0, 8);
        const alias = `_${toImport}_${aliasSuffix}`;
        return {
            pythonType: [alias, ...nested].join('.'),
            requiredImport: {
                sourcePackage: relativeImportPath(submodulePythonName, typeSubmodulePythonName),
                item: `${toImport} as ${alias}`,
            },
        };
    }
}
_fqn = new WeakMap();
function toPythonFqn(fqn, rootAssm) {
    const { assemblyName, packageName, tail } = getPackageName(fqn, rootAssm);
    const fqnParts = [packageName];
    for (const part of tail) {
        fqnParts.push(util_1.toPythonIdentifier(part));
    }
    return { assemblyName, packageName, pythonFqn: fqnParts.join('.') };
}
/**
 * Computes the python relative import path from `fromModule` to `toModule`.
 *
 * @param fromPkg the package where the relative import statement is located.
 * @param toPkg   the package that needs to be relatively imported.
 *
 * @returns a relative import path.
 *
 * @example
 *  relativeImportPath('A.B.C.D', 'A.B.E') === '...E';
 *  relativeImportPath('A.B.C', 'A.B')     === '..';
 *  relativeImportPath('A.B', 'A.B.C')     === '.C';
 */
function relativeImportPath(fromPkg, toPkg) {
    if (toPkg.startsWith(fromPkg)) {
        // from A.B to A.B.C === .C
        return `.${toPkg.substring(fromPkg.length + 1)}`;
    }
    // from A.B.E to A.B.C === .<from A.B to A.B.C>
    const fromPkgParent = fromPkg.substring(0, fromPkg.lastIndexOf('.'));
    return `.${relativeImportPath(fromPkgParent, toPkg)}`;
}
function getPackageName(fqn, rootAssm) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const segments = fqn.split('.');
    const assemblyName = segments[0];
    const config = assemblyName === rootAssm.name
        ? rootAssm
        : (_b = (_a = rootAssm.dependencyClosure) === null || _a === void 0 ? void 0 : _a[assemblyName]) !== null && _b !== void 0 ? _b : util_1.die(`Unable to find configuration for assembly "${assemblyName}" in dependency closure`);
    const rootPkg = (_e = (_d = (_c = config.targets) === null || _c === void 0 ? void 0 : _c.python) === null || _d === void 0 ? void 0 : _d.module) !== null && _e !== void 0 ? _e : util_1.die(`No Python target was configured in assembly "${assemblyName}"`);
    const pkg = new Array();
    const tail = new Array();
    for (let len = segments.length; len > 0; len--) {
        const submodule = segments.slice(0, len).join('.');
        if (submodule === assemblyName) {
            pkg.unshift(rootPkg);
            break;
        }
        const submoduleConfig = (_f = config.submodules) === null || _f === void 0 ? void 0 : _f[submodule];
        if (submoduleConfig == null) {
            // Not in a submodule - so the current lead name is not a package name part.
            tail.unshift(segments[len - 1]);
            continue;
        }
        const subPackage = (_h = (_g = submoduleConfig.targets) === null || _g === void 0 ? void 0 : _g.python) === null || _h === void 0 ? void 0 : _h.module;
        if (subPackage != null) {
            // Found a sub-package. Confirm it's nested right in, and make this the head end of our package name.
            if (!subPackage.startsWith(`${rootPkg}.`)) {
                util_1.die(`Submodule "${submodule}" is mapped to Python sub-package "${subPackage}" which isn't nested under "${rootPkg}"!`);
            }
            pkg.unshift(subPackage);
            break;
        }
        // Just use whatever the default name is for this package name part.
        pkg.unshift(codemaker_1.toSnakeCase(util_1.toPythonIdentifier(segments[len - 1])));
    }
    return { assemblyName, packageName: pkg.join('.'), tail };
}
function findParentSubmodule(type, assm) {
    var _a, _b;
    if (type.namespace == null) {
        return assm.name;
    }
    const namespaceFqn = `${assm.name}.${type.namespace}`;
    if (((_a = assm.types) === null || _a === void 0 ? void 0 : _a[namespaceFqn]) != null) {
        return findParentSubmodule((_b = assm.types) === null || _b === void 0 ? void 0 : _b[namespaceFqn], assm);
    }
    return namespaceFqn;
}
//# sourceMappingURL=data:application/json;base64,