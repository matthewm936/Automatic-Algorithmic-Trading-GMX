"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tarballName = exports.substituteReservedWords = exports.getParamDependencies = exports.getMemberDependencies = exports.flatMap = exports.goPackageNameForAssembly = exports.findTypeInTree = void 0;
/*
 * Recursively search module for type with fqn
 */
function findTypeInTree(module, fqn) {
    const result = module.types.find((t) => t.type.fqn === fqn);
    if (result) {
        return result;
    }
    return module.submodules.reduce((accum, sm) => {
        return accum !== null && accum !== void 0 ? accum : findTypeInTree(sm, fqn);
    }, undefined);
}
exports.findTypeInTree = findTypeInTree;
/*
 * Format NPM package names as idiomatic Go module name
 */
function goPackageNameForAssembly(assembly) {
    var _a, _b;
    const config = (_b = (_a = assembly.targets) === null || _a === void 0 ? void 0 : _a.go) !== null && _b !== void 0 ? _b : {};
    if (config.packageName) {
        return config.packageName;
    }
    return assembly.name.replace(/[^a-z0-9.]/gi, '').toLowerCase();
}
exports.goPackageNameForAssembly = goPackageNameForAssembly;
function flatMap(collection, mapper) {
    return collection
        .map(mapper)
        .reduce((acc, elt) => acc.concat(elt), new Array());
}
exports.flatMap = flatMap;
/*
 * Return module dependencies of a class or interface members
 */
function getMemberDependencies(members) {
    var _a, _b;
    const deps = new Array();
    for (const member of members) {
        deps.push(...((_b = (_a = member.reference) === null || _a === void 0 ? void 0 : _a.dependencies) !== null && _b !== void 0 ? _b : []));
    }
    return deps;
}
exports.getMemberDependencies = getMemberDependencies;
function getParamDependencies(methods) {
    var _a, _b;
    const dependencies = [];
    for (const method of methods) {
        for (const param of method.parameters) {
            dependencies.push(...((_b = (_a = param.reference) === null || _a === void 0 ? void 0 : _a.dependencies) !== null && _b !== void 0 ? _b : []));
        }
    }
    return dependencies;
}
exports.getParamDependencies = getParamDependencies;
const RESERVED_WORDS = {
    break: 'break_',
    default: 'default_',
    func: 'func_',
    interface: 'interface_',
    select: 'select_',
    case: 'case_',
    defer: 'defer_',
    go: 'go_',
    map: 'map_',
    struct: 'struct_',
    chan: 'chan_',
    else: 'else_',
    goto: 'goto_',
    package: 'package_',
    switch: 'switch_',
    const: 'const_',
    fallthrough: 'fallthrough_',
    if: 'if_',
    range: 'range_',
    type: 'type_',
    continue: 'continue_',
    for: 'for_',
    import: 'import_',
    return: 'return_',
    var: 'var_',
    _: '_arg',
};
/*
 * Sanitize reserved words
 */
function substituteReservedWords(name) {
    return RESERVED_WORDS[name] || name;
}
exports.substituteReservedWords = substituteReservedWords;
/**
 * Computes a safe tarball name for the provided assembly.
 *
 * @param assm the assembly.
 *
 * @returns a tarball name.
 */
function tarballName(assm) {
    const name = assm.name.replace(/^@/, '').replace(/\//g, '-');
    return `${name}-${assm.version}.tgz`;
}
exports.tarballName = tarballName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0E7O0dBRUc7QUFDSCxTQUFnQixjQUFjLENBQzVCLE1BQWUsRUFDZixHQUFXO0lBRVgsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRTVELElBQUksTUFBTSxFQUFFO1FBQ1YsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUF5QixFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQ2hFLE9BQU8sS0FBSyxhQUFMLEtBQUssY0FBTCxLQUFLLEdBQUksY0FBYyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQWJELHdDQWFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQix3QkFBd0IsQ0FDdEMsUUFBOEI7O0lBRTlCLE1BQU0sTUFBTSxlQUFHLFFBQVEsQ0FBQyxPQUFPLDBDQUFFLEVBQUUsbUNBQUksRUFBRSxDQUFDO0lBQzFDLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtRQUN0QixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUM7S0FDM0I7SUFFRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqRSxDQUFDO0FBVEQsNERBU0M7QUFFRCxTQUFnQixPQUFPLENBQ3JCLFVBQXdCLEVBQ3hCLE1BQWtDO0lBRWxDLE9BQU8sVUFBVTtTQUNkLEdBQUcsQ0FBQyxNQUFNLENBQUM7U0FDWCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksS0FBSyxFQUFLLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBUEQsMEJBT0M7QUFFRDs7R0FFRztBQUNILFNBQWdCLHFCQUFxQixDQUNuQyxPQUFnQzs7SUFFaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQVcsQ0FBQztJQUNsQyxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsYUFBQyxNQUFNLENBQUMsU0FBUywwQ0FBRSxZQUFZLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdEQ7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFURCxzREFTQztBQUVELFNBQWdCLG9CQUFvQixDQUFDLE9BQW1COztJQUN0RCxNQUFNLFlBQVksR0FBYyxFQUFFLENBQUM7SUFDbkMsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDNUIsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3JDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxhQUFDLEtBQUssQ0FBQyxTQUFTLDBDQUFFLFlBQVksbUNBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM3RDtLQUNGO0lBQ0QsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQVJELG9EQVFDO0FBRUQsTUFBTSxjQUFjLEdBQStCO0lBQ2pELEtBQUssRUFBRSxRQUFRO0lBQ2YsT0FBTyxFQUFFLFVBQVU7SUFDbkIsSUFBSSxFQUFFLE9BQU87SUFDYixTQUFTLEVBQUUsWUFBWTtJQUN2QixNQUFNLEVBQUUsU0FBUztJQUNqQixJQUFJLEVBQUUsT0FBTztJQUNiLEtBQUssRUFBRSxRQUFRO0lBQ2YsRUFBRSxFQUFFLEtBQUs7SUFDVCxHQUFHLEVBQUUsTUFBTTtJQUNYLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsT0FBTztJQUNiLE9BQU8sRUFBRSxVQUFVO0lBQ25CLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLEtBQUssRUFBRSxRQUFRO0lBQ2YsV0FBVyxFQUFFLGNBQWM7SUFDM0IsRUFBRSxFQUFFLEtBQUs7SUFDVCxLQUFLLEVBQUUsUUFBUTtJQUNmLElBQUksRUFBRSxPQUFPO0lBQ2IsUUFBUSxFQUFFLFdBQVc7SUFDckIsR0FBRyxFQUFFLE1BQU07SUFDWCxNQUFNLEVBQUUsU0FBUztJQUNqQixNQUFNLEVBQUUsU0FBUztJQUNqQixHQUFHLEVBQUUsTUFBTTtJQUNYLENBQUMsRUFBRSxNQUFNO0NBQ1YsQ0FBQztBQUVGOztHQUVHO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQUMsSUFBWTtJQUNsRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDdEMsQ0FBQztBQUZELDBEQUVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsV0FBVyxDQUFDLElBQWM7SUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0QsT0FBTyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxNQUFNLENBQUM7QUFDdkMsQ0FBQztBQUhELGtDQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZW1ibHksIFN1Ym1vZHVsZSB9IGZyb20gJ2pzaWktcmVmbGVjdCc7XG5cbmltcG9ydCB7IFBhY2thZ2UgfSBmcm9tICcuL3BhY2thZ2UnO1xuaW1wb3J0IHsgR29NZXRob2QsIEdvVHlwZU1lbWJlciwgR29UeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qXG4gKiBSZWN1cnNpdmVseSBzZWFyY2ggbW9kdWxlIGZvciB0eXBlIHdpdGggZnFuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kVHlwZUluVHJlZShcbiAgbW9kdWxlOiBQYWNrYWdlLFxuICBmcW46IHN0cmluZyxcbik6IEdvVHlwZSB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IHJlc3VsdCA9IG1vZHVsZS50eXBlcy5maW5kKCh0KSA9PiB0LnR5cGUuZnFuID09PSBmcW4pO1xuXG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIG1vZHVsZS5zdWJtb2R1bGVzLnJlZHVjZSgoYWNjdW06IEdvVHlwZSB8IHVuZGVmaW5lZCwgc20pID0+IHtcbiAgICByZXR1cm4gYWNjdW0gPz8gZmluZFR5cGVJblRyZWUoc20sIGZxbik7XG4gIH0sIHVuZGVmaW5lZCk7XG59XG5cbi8qXG4gKiBGb3JtYXQgTlBNIHBhY2thZ2UgbmFtZXMgYXMgaWRpb21hdGljIEdvIG1vZHVsZSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnb1BhY2thZ2VOYW1lRm9yQXNzZW1ibHkoXG4gIGFzc2VtYmx5OiBBc3NlbWJseSB8IFN1Ym1vZHVsZSxcbik6IHN0cmluZyB7XG4gIGNvbnN0IGNvbmZpZyA9IGFzc2VtYmx5LnRhcmdldHM/LmdvID8/IHt9O1xuICBpZiAoY29uZmlnLnBhY2thZ2VOYW1lKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5wYWNrYWdlTmFtZTtcbiAgfVxuXG4gIHJldHVybiBhc3NlbWJseS5uYW1lLnJlcGxhY2UoL1teYS16MC05Ll0vZ2ksICcnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdE1hcDxULCBSPihcbiAgY29sbGVjdGlvbjogcmVhZG9ubHkgVFtdLFxuICBtYXBwZXI6ICh2YWx1ZTogVCkgPT4gcmVhZG9ubHkgUltdLFxuKTogcmVhZG9ubHkgUltdIHtcbiAgcmV0dXJuIGNvbGxlY3Rpb25cbiAgICAubWFwKG1hcHBlcilcbiAgICAucmVkdWNlKChhY2MsIGVsdCkgPT4gYWNjLmNvbmNhdChlbHQpLCBuZXcgQXJyYXk8Uj4oKSk7XG59XG5cbi8qXG4gKiBSZXR1cm4gbW9kdWxlIGRlcGVuZGVuY2llcyBvZiBhIGNsYXNzIG9yIGludGVyZmFjZSBtZW1iZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW1iZXJEZXBlbmRlbmNpZXMoXG4gIG1lbWJlcnM6IHJlYWRvbmx5IEdvVHlwZU1lbWJlcltdLFxuKTogUGFja2FnZVtdIHtcbiAgY29uc3QgZGVwcyA9IG5ldyBBcnJheTxQYWNrYWdlPigpO1xuICBmb3IgKGNvbnN0IG1lbWJlciBvZiBtZW1iZXJzKSB7XG4gICAgZGVwcy5wdXNoKC4uLihtZW1iZXIucmVmZXJlbmNlPy5kZXBlbmRlbmNpZXMgPz8gW10pKTtcbiAgfVxuXG4gIHJldHVybiBkZXBzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyYW1EZXBlbmRlbmNpZXMobWV0aG9kczogR29NZXRob2RbXSk6IFBhY2thZ2VbXSB7XG4gIGNvbnN0IGRlcGVuZGVuY2llczogUGFja2FnZVtdID0gW107XG4gIGZvciAoY29uc3QgbWV0aG9kIG9mIG1ldGhvZHMpIHtcbiAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIG1ldGhvZC5wYXJhbWV0ZXJzKSB7XG4gICAgICBkZXBlbmRlbmNpZXMucHVzaCguLi4ocGFyYW0ucmVmZXJlbmNlPy5kZXBlbmRlbmNpZXMgPz8gW10pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuY29uc3QgUkVTRVJWRURfV09SRFM6IHsgW3dvcmQ6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICBicmVhazogJ2JyZWFrXycsXG4gIGRlZmF1bHQ6ICdkZWZhdWx0XycsXG4gIGZ1bmM6ICdmdW5jXycsXG4gIGludGVyZmFjZTogJ2ludGVyZmFjZV8nLFxuICBzZWxlY3Q6ICdzZWxlY3RfJyxcbiAgY2FzZTogJ2Nhc2VfJyxcbiAgZGVmZXI6ICdkZWZlcl8nLFxuICBnbzogJ2dvXycsXG4gIG1hcDogJ21hcF8nLFxuICBzdHJ1Y3Q6ICdzdHJ1Y3RfJyxcbiAgY2hhbjogJ2NoYW5fJyxcbiAgZWxzZTogJ2Vsc2VfJyxcbiAgZ290bzogJ2dvdG9fJyxcbiAgcGFja2FnZTogJ3BhY2thZ2VfJyxcbiAgc3dpdGNoOiAnc3dpdGNoXycsXG4gIGNvbnN0OiAnY29uc3RfJyxcbiAgZmFsbHRocm91Z2g6ICdmYWxsdGhyb3VnaF8nLFxuICBpZjogJ2lmXycsXG4gIHJhbmdlOiAncmFuZ2VfJyxcbiAgdHlwZTogJ3R5cGVfJyxcbiAgY29udGludWU6ICdjb250aW51ZV8nLFxuICBmb3I6ICdmb3JfJyxcbiAgaW1wb3J0OiAnaW1wb3J0XycsXG4gIHJldHVybjogJ3JldHVybl8nLFxuICB2YXI6ICd2YXJfJyxcbiAgXzogJ19hcmcnLFxufTtcblxuLypcbiAqIFNhbml0aXplIHJlc2VydmVkIHdvcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdGl0dXRlUmVzZXJ2ZWRXb3JkcyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gUkVTRVJWRURfV09SRFNbbmFtZV0gfHwgbmFtZTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIHNhZmUgdGFyYmFsbCBuYW1lIGZvciB0aGUgcHJvdmlkZWQgYXNzZW1ibHkuXG4gKlxuICogQHBhcmFtIGFzc20gdGhlIGFzc2VtYmx5LlxuICpcbiAqIEByZXR1cm5zIGEgdGFyYmFsbCBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFyYmFsbE5hbWUoYXNzbTogQXNzZW1ibHkpOiBzdHJpbmcge1xuICBjb25zdCBuYW1lID0gYXNzbS5uYW1lLnJlcGxhY2UoL15ALywgJycpLnJlcGxhY2UoL1xcLy9nLCAnLScpO1xuICByZXR1cm4gYCR7bmFtZX0tJHthc3NtLnZlcnNpb259LnRnemA7XG59XG4iXX0=