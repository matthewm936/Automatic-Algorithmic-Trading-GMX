"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Struct = void 0;
const assert = require("assert");
const runtime_1 = require("../runtime");
const util_1 = require("../util");
const go_type_1 = require("./go-type");
const type_member_1 = require("./type-member");
/*
 * Struct wraps a JSII datatype interface aka, structs
 */
class Struct extends go_type_1.GoType {
    constructor(parent, type) {
        super(parent, type);
        this.type = type;
        assert(type.isDataType(), `The provided interface ${type.fqn} is not a struct!`);
        this.properties = type.allProperties.map((prop) => new type_member_1.GoProperty(this, prop));
    }
    get dependencies() {
        return util_1.getMemberDependencies(this.properties);
    }
    get specialDependencies() {
        return {
            runtime: false,
            init: false,
            internal: false,
            time: this.properties.some((prop) => prop.specialDependencies.time),
        };
    }
    emit(context) {
        const { code, documenter } = context;
        documenter.emit(this.type.docs);
        code.openBlock(`type ${this.name} struct`);
        for (const property of this.properties) {
            property.emitStructMember(context);
        }
        code.closeBlock();
        code.line();
    }
    emitRegistration(code) {
        code.open(`${runtime_1.JSII_RT_ALIAS}.RegisterStruct(`);
        code.line(`"${this.fqn}",`);
        code.line(`reflect.TypeOf((*${this.name})(nil)).Elem(),`);
        code.close(')');
    }
}
exports.Struct = Struct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFpQztBQU9qQyx3Q0FBMkM7QUFDM0Msa0NBQWdEO0FBQ2hELHVDQUFtQztBQUNuQywrQ0FBMkM7QUFFM0M7O0dBRUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxnQkFBTTtJQUdoQyxZQUFtQixNQUFlLEVBQWtCLElBQW1CO1FBQ3JFLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFEOEIsU0FBSSxHQUFKLElBQUksQ0FBZTtRQUdyRSxNQUFNLENBQ0osSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUNqQiwwQkFBMEIsSUFBSSxDQUFDLEdBQUcsbUJBQW1CLENBQ3RELENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUN0QyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSx3QkFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDckIsT0FBTyw0QkFBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELElBQVcsbUJBQW1CO1FBQzVCLE9BQU87WUFDTCxPQUFPLEVBQUUsS0FBSztZQUNkLElBQUksRUFBRSxLQUFLO1lBQ1gsUUFBUSxFQUFFLEtBQUs7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7U0FDcEUsQ0FBQztJQUNKLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBb0I7UUFDOUIsTUFBTSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDckMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQztRQUMzQyxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDdEMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxJQUFlO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyx1QkFBYSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsQ0FBQztDQUNGO0FBOUNELHdCQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHsgQ29kZU1ha2VyIH0gZnJvbSAnY29kZW1ha2VyJztcbmltcG9ydCB7IEludGVyZmFjZVR5cGUgfSBmcm9tICdqc2lpLXJlZmxlY3QnO1xuXG5pbXBvcnQgeyBTcGVjaWFsRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vZGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IEVtaXRDb250ZXh0IH0gZnJvbSAnLi4vZW1pdC1jb250ZXh0JztcbmltcG9ydCB7IFBhY2thZ2UgfSBmcm9tICcuLi9wYWNrYWdlJztcbmltcG9ydCB7IEpTSUlfUlRfQUxJQVMgfSBmcm9tICcuLi9ydW50aW1lJztcbmltcG9ydCB7IGdldE1lbWJlckRlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgR29UeXBlIH0gZnJvbSAnLi9nby10eXBlJztcbmltcG9ydCB7IEdvUHJvcGVydHkgfSBmcm9tICcuL3R5cGUtbWVtYmVyJztcblxuLypcbiAqIFN0cnVjdCB3cmFwcyBhIEpTSUkgZGF0YXR5cGUgaW50ZXJmYWNlIGFrYSwgc3RydWN0c1xuICovXG5leHBvcnQgY2xhc3MgU3RydWN0IGV4dGVuZHMgR29UeXBlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBwcm9wZXJ0aWVzOiByZWFkb25seSBHb1Byb3BlcnR5W107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogUGFja2FnZSwgcHVibGljIHJlYWRvbmx5IHR5cGU6IEludGVyZmFjZVR5cGUpIHtcbiAgICBzdXBlcihwYXJlbnQsIHR5cGUpO1xuXG4gICAgYXNzZXJ0KFxuICAgICAgdHlwZS5pc0RhdGFUeXBlKCksXG4gICAgICBgVGhlIHByb3ZpZGVkIGludGVyZmFjZSAke3R5cGUuZnFufSBpcyBub3QgYSBzdHJ1Y3QhYCxcbiAgICApO1xuXG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gdHlwZS5hbGxQcm9wZXJ0aWVzLm1hcChcbiAgICAgIChwcm9wKSA9PiBuZXcgR29Qcm9wZXJ0eSh0aGlzLCBwcm9wKSxcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldCBkZXBlbmRlbmNpZXMoKTogUGFja2FnZVtdIHtcbiAgICByZXR1cm4gZ2V0TWVtYmVyRGVwZW5kZW5jaWVzKHRoaXMucHJvcGVydGllcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHNwZWNpYWxEZXBlbmRlbmNpZXMoKTogU3BlY2lhbERlcGVuZGVuY2llcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bnRpbWU6IGZhbHNlLFxuICAgICAgaW5pdDogZmFsc2UsXG4gICAgICBpbnRlcm5hbDogZmFsc2UsXG4gICAgICB0aW1lOiB0aGlzLnByb3BlcnRpZXMuc29tZSgocHJvcCkgPT4gcHJvcC5zcGVjaWFsRGVwZW5kZW5jaWVzLnRpbWUpLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZW1pdChjb250ZXh0OiBFbWl0Q29udGV4dCk6IHZvaWQge1xuICAgIGNvbnN0IHsgY29kZSwgZG9jdW1lbnRlciB9ID0gY29udGV4dDtcbiAgICBkb2N1bWVudGVyLmVtaXQodGhpcy50eXBlLmRvY3MpO1xuICAgIGNvZGUub3BlbkJsb2NrKGB0eXBlICR7dGhpcy5uYW1lfSBzdHJ1Y3RgKTtcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHRoaXMucHJvcGVydGllcykge1xuICAgICAgcHJvcGVydHkuZW1pdFN0cnVjdE1lbWJlcihjb250ZXh0KTtcbiAgICB9XG4gICAgY29kZS5jbG9zZUJsb2NrKCk7XG4gICAgY29kZS5saW5lKCk7XG4gIH1cblxuICBwdWJsaWMgZW1pdFJlZ2lzdHJhdGlvbihjb2RlOiBDb2RlTWFrZXIpOiB2b2lkIHtcbiAgICBjb2RlLm9wZW4oYCR7SlNJSV9SVF9BTElBU30uUmVnaXN0ZXJTdHJ1Y3QoYCk7XG4gICAgY29kZS5saW5lKGBcIiR7dGhpcy5mcW59XCIsYCk7XG4gICAgY29kZS5saW5lKGByZWZsZWN0LlR5cGVPZigoKiR7dGhpcy5uYW1lfSkobmlsKSkuRWxlbSgpLGApO1xuICAgIGNvZGUuY2xvc2UoJyknKTtcbiAgfVxufVxuIl19