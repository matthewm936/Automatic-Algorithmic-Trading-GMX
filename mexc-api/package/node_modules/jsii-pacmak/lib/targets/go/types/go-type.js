"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoType = void 0;
const runtime_1 = require("../runtime");
class GoType {
    constructor(pkg, type) {
        this.pkg = pkg;
        this.type = type;
        this.name = type.name;
        // Prefix with the nesting parent name(s), using an _ delimiter.
        for (let parent = type.nestingParent; parent != null; parent = parent.nestingParent) {
            this.name = `${parent.name}_${this.name}`;
        }
        // Add "jsiiProxy_" prefix to private struct name to avoid keyword conflicts
        // such as "default". See https://github.com/aws/jsii/issues/2637
        this.proxyName = `jsiiProxy_${this.name}`;
        this.fqn = type.fqn;
    }
    get namespace() {
        return this.pkg.packageName;
    }
    emitDocs(context) {
        context.documenter.emit(this.type.docs);
    }
    emitStability(context) {
        context.documenter.emitStability(this.type.docs);
    }
    emitProxyMakerFunction(code, bases) {
        code.open('func() interface{} {');
        if (bases.length > 0) {
            const instanceVar = this.proxyName[0];
            code.line(`${instanceVar} := ${this.proxyName}{}`);
            for (const base of bases) {
                const baseEmbed = this.pkg.resolveEmbeddedType(base);
                code.line(`${runtime_1.JSII_RT_ALIAS}.InitJsiiProxy(&${instanceVar}.${baseEmbed.fieldName})`);
            }
            code.line(`return &${instanceVar}`);
        }
        else {
            code.line(`return &${this.proxyName}{}`);
        }
        // This is always used as a function argument, so we add a trailing comma
        code.close('},');
    }
}
exports.GoType = GoType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ28tdHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdvLXR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBTUEsd0NBQTJDO0FBSTNDLE1BQXNCLE1BQU07SUFLMUIsWUFBMEIsR0FBWSxFQUFTLElBQVU7UUFBL0IsUUFBRyxHQUFILEdBQUcsQ0FBUztRQUFTLFNBQUksR0FBSixJQUFJLENBQU07UUFDdkQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXRCLGdFQUFnRTtRQUNoRSxLQUNFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQy9CLE1BQU0sSUFBSSxJQUFJLEVBQ2QsTUFBTSxHQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQzdCO1lBQ0EsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzNDO1FBRUQsNEVBQTRFO1FBQzVFLGlFQUFpRTtRQUNqRSxJQUFJLENBQUMsU0FBUyxHQUFHLGFBQWEsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUN0QixDQUFDO0lBU0QsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7SUFDOUIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxPQUFvQjtRQUNsQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFUyxhQUFhLENBQUMsT0FBb0I7UUFDMUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRVMsc0JBQXNCLENBQzlCLElBQWUsRUFDZixLQUEyQztRQUUzQyxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDbEMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxXQUFXLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7WUFDbkQsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7Z0JBQ3hCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxJQUFJLENBQ1AsR0FBRyx1QkFBYSxtQkFBbUIsV0FBVyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEdBQUcsQ0FDekUsQ0FBQzthQUNIO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDckM7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQztTQUMxQztRQUNELHlFQUF5RTtRQUN6RSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQWhFRCx3QkFnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlTWFrZXIgfSBmcm9tICdjb2RlbWFrZXInO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJ2pzaWktcmVmbGVjdCc7XG5cbmltcG9ydCB7IFNwZWNpYWxEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi9kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgRW1pdENvbnRleHQgfSBmcm9tICcuLi9lbWl0LWNvbnRleHQnO1xuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gJy4uL3BhY2thZ2UnO1xuaW1wb3J0IHsgSlNJSV9SVF9BTElBUyB9IGZyb20gJy4uL3J1bnRpbWUnO1xuaW1wb3J0IHsgR29DbGFzcyB9IGZyb20gJy4vY2xhc3MnO1xuaW1wb3J0IHsgR29JbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHb1R5cGUge1xuICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgZnFuOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBwcm94eU5hbWU6IHN0cmluZztcblxuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHBrZzogUGFja2FnZSwgcHVibGljIHR5cGU6IFR5cGUpIHtcbiAgICB0aGlzLm5hbWUgPSB0eXBlLm5hbWU7XG5cbiAgICAvLyBQcmVmaXggd2l0aCB0aGUgbmVzdGluZyBwYXJlbnQgbmFtZShzKSwgdXNpbmcgYW4gXyBkZWxpbWl0ZXIuXG4gICAgZm9yIChcbiAgICAgIGxldCBwYXJlbnQgPSB0eXBlLm5lc3RpbmdQYXJlbnQ7XG4gICAgICBwYXJlbnQgIT0gbnVsbDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5uZXN0aW5nUGFyZW50XG4gICAgKSB7XG4gICAgICB0aGlzLm5hbWUgPSBgJHtwYXJlbnQubmFtZX1fJHt0aGlzLm5hbWV9YDtcbiAgICB9XG5cbiAgICAvLyBBZGQgXCJqc2lpUHJveHlfXCIgcHJlZml4IHRvIHByaXZhdGUgc3RydWN0IG5hbWUgdG8gYXZvaWQga2V5d29yZCBjb25mbGljdHNcbiAgICAvLyBzdWNoIGFzIFwiZGVmYXVsdFwiLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2F3cy9qc2lpL2lzc3Vlcy8yNjM3XG4gICAgdGhpcy5wcm94eU5hbWUgPSBganNpaVByb3h5XyR7dGhpcy5uYW1lfWA7XG5cbiAgICB0aGlzLmZxbiA9IHR5cGUuZnFuO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IGVtaXQoY29udGV4dDogRW1pdENvbnRleHQpOiB2b2lkO1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBlbWl0UmVnaXN0cmF0aW9uKGNvZGU6IENvZGVNYWtlcik6IHZvaWQ7XG5cbiAgcHVibGljIGFic3RyYWN0IGdldCBkZXBlbmRlbmNpZXMoKTogUGFja2FnZVtdO1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0IHNwZWNpYWxEZXBlbmRlbmNpZXMoKTogU3BlY2lhbERlcGVuZGVuY2llcztcblxuICBwdWJsaWMgZ2V0IG5hbWVzcGFjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wa2cucGFja2FnZU5hbWU7XG4gIH1cblxuICBwdWJsaWMgZW1pdERvY3MoY29udGV4dDogRW1pdENvbnRleHQpOiB2b2lkIHtcbiAgICBjb250ZXh0LmRvY3VtZW50ZXIuZW1pdCh0aGlzLnR5cGUuZG9jcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZW1pdFN0YWJpbGl0eShjb250ZXh0OiBFbWl0Q29udGV4dCk6IHZvaWQge1xuICAgIGNvbnRleHQuZG9jdW1lbnRlci5lbWl0U3RhYmlsaXR5KHRoaXMudHlwZS5kb2NzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBlbWl0UHJveHlNYWtlckZ1bmN0aW9uKFxuICAgIGNvZGU6IENvZGVNYWtlcixcbiAgICBiYXNlczogUmVhZG9ubHlBcnJheTxHb0NsYXNzIHwgR29JbnRlcmZhY2U+LFxuICApOiB2b2lkIHtcbiAgICBjb2RlLm9wZW4oJ2Z1bmMoKSBpbnRlcmZhY2V7fSB7Jyk7XG4gICAgaWYgKGJhc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlVmFyID0gdGhpcy5wcm94eU5hbWVbMF07XG4gICAgICBjb2RlLmxpbmUoYCR7aW5zdGFuY2VWYXJ9IDo9ICR7dGhpcy5wcm94eU5hbWV9e31gKTtcbiAgICAgIGZvciAoY29uc3QgYmFzZSBvZiBiYXNlcykge1xuICAgICAgICBjb25zdCBiYXNlRW1iZWQgPSB0aGlzLnBrZy5yZXNvbHZlRW1iZWRkZWRUeXBlKGJhc2UpO1xuICAgICAgICBjb2RlLmxpbmUoXG4gICAgICAgICAgYCR7SlNJSV9SVF9BTElBU30uSW5pdEpzaWlQcm94eSgmJHtpbnN0YW5jZVZhcn0uJHtiYXNlRW1iZWQuZmllbGROYW1lfSlgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29kZS5saW5lKGByZXR1cm4gJiR7aW5zdGFuY2VWYXJ9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvZGUubGluZShgcmV0dXJuICYke3RoaXMucHJveHlOYW1lfXt9YCk7XG4gICAgfVxuICAgIC8vIFRoaXMgaXMgYWx3YXlzIHVzZWQgYXMgYSBmdW5jdGlvbiBhcmd1bWVudCwgc28gd2UgYWRkIGEgdHJhaWxpbmcgY29tbWFcbiAgICBjb2RlLmNsb3NlKCd9LCcpO1xuICB9XG59XG4iXX0=