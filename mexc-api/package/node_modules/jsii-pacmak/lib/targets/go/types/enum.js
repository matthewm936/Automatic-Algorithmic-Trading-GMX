"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enum = void 0;
const runtime_1 = require("../runtime");
const go_type_1 = require("./go-type");
class Enum extends go_type_1.GoType {
    constructor(pkg, type) {
        super(pkg, type);
        this.type = type;
        this.members = type.members.map((mem) => new GoEnumMember(this, mem));
    }
    emit(context) {
        this.emitDocs(context);
        const { code } = context;
        // TODO figure out the value type -- probably a string in most cases
        const valueType = 'string';
        code.line(`type ${this.name} ${valueType}`);
        code.line();
        code.open(`const (`);
        // Const values are prefixed by the wrapped value type
        for (const member of this.members) {
            member.emit(code);
        }
        code.close(`)`);
        code.line();
    }
    emitRegistration(code) {
        code.open(`${runtime_1.JSII_RT_ALIAS}.RegisterEnum(`);
        code.line(`"${this.fqn}",`);
        code.line(`reflect.TypeOf((*${this.name})(nil)).Elem(),`);
        code.open(`map[string]interface{}{`);
        for (const member of this.members) {
            code.line(`"${member.rawValue}": ${member.name},`);
        }
        code.close(`},`);
        code.close(')');
    }
    get dependencies() {
        return [];
    }
    get specialDependencies() {
        return {
            runtime: false,
            init: false,
            internal: false,
            time: false,
        };
    }
}
exports.Enum = Enum;
class GoEnumMember {
    constructor(parent, entry) {
        this.parent = parent;
        this.name = `${parent.name}_${entry.name}`;
        this.rawValue = entry.name;
    }
    emit(code) {
        code.line(`${this.name} ${this.parent.name} = "${this.rawValue}"`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVudW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBTUEsd0NBQTJDO0FBQzNDLHVDQUFtQztBQUVuQyxNQUFhLElBQUssU0FBUSxnQkFBTTtJQUc5QixZQUFtQixHQUFZLEVBQVMsSUFBYztRQUNwRCxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRHFCLFNBQUksR0FBSixJQUFJLENBQVU7UUFHcEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVNLElBQUksQ0FBQyxPQUFvQjtRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDekIsb0VBQW9FO1FBQ3BFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckIsc0RBQXNEO1FBQ3RELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25CO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsSUFBZTtRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsdUJBQWEsZ0JBQWdCLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDckMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxNQUFNLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDckIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBVyxtQkFBbUI7UUFDNUIsT0FBTztZQUNMLE9BQU8sRUFBRSxLQUFLO1lBQ2QsSUFBSSxFQUFFLEtBQUs7WUFDWCxRQUFRLEVBQUUsS0FBSztZQUNmLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBERCxvQkFvREM7QUFFRCxNQUFNLFlBQVk7SUFJaEIsWUFBb0MsTUFBWSxFQUFFLEtBQWlCO1FBQS9CLFdBQU0sR0FBTixNQUFNLENBQU07UUFDOUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRU0sSUFBSSxDQUFDLElBQWU7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDckUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29kZU1ha2VyIH0gZnJvbSAnY29kZW1ha2VyJztcbmltcG9ydCB7IEVudW1UeXBlLCBFbnVtTWVtYmVyIH0gZnJvbSAnanNpaS1yZWZsZWN0JztcblxuaW1wb3J0IHsgU3BlY2lhbERlcGVuZGVuY2llcyB9IGZyb20gJy4uL2RlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyBFbWl0Q29udGV4dCB9IGZyb20gJy4uL2VtaXQtY29udGV4dCc7XG5pbXBvcnQgeyBQYWNrYWdlIH0gZnJvbSAnLi4vcGFja2FnZSc7XG5pbXBvcnQgeyBKU0lJX1JUX0FMSUFTIH0gZnJvbSAnLi4vcnVudGltZSc7XG5pbXBvcnQgeyBHb1R5cGUgfSBmcm9tICcuL2dvLXR5cGUnO1xuXG5leHBvcnQgY2xhc3MgRW51bSBleHRlbmRzIEdvVHlwZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbWVtYmVyczogcmVhZG9ubHkgR29FbnVtTWVtYmVyW107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHBrZzogUGFja2FnZSwgcHVibGljIHR5cGU6IEVudW1UeXBlKSB7XG4gICAgc3VwZXIocGtnLCB0eXBlKTtcblxuICAgIHRoaXMubWVtYmVycyA9IHR5cGUubWVtYmVycy5tYXAoKG1lbSkgPT4gbmV3IEdvRW51bU1lbWJlcih0aGlzLCBtZW0pKTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0KGNvbnRleHQ6IEVtaXRDb250ZXh0KSB7XG4gICAgdGhpcy5lbWl0RG9jcyhjb250ZXh0KTtcblxuICAgIGNvbnN0IHsgY29kZSB9ID0gY29udGV4dDtcbiAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgdGhlIHZhbHVlIHR5cGUgLS0gcHJvYmFibHkgYSBzdHJpbmcgaW4gbW9zdCBjYXNlc1xuICAgIGNvbnN0IHZhbHVlVHlwZSA9ICdzdHJpbmcnO1xuICAgIGNvZGUubGluZShgdHlwZSAke3RoaXMubmFtZX0gJHt2YWx1ZVR5cGV9YCk7XG4gICAgY29kZS5saW5lKCk7XG4gICAgY29kZS5vcGVuKGBjb25zdCAoYCk7XG5cbiAgICAvLyBDb25zdCB2YWx1ZXMgYXJlIHByZWZpeGVkIGJ5IHRoZSB3cmFwcGVkIHZhbHVlIHR5cGVcbiAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0aGlzLm1lbWJlcnMpIHtcbiAgICAgIG1lbWJlci5lbWl0KGNvZGUpO1xuICAgIH1cblxuICAgIGNvZGUuY2xvc2UoYClgKTtcbiAgICBjb2RlLmxpbmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0UmVnaXN0cmF0aW9uKGNvZGU6IENvZGVNYWtlcik6IHZvaWQge1xuICAgIGNvZGUub3BlbihgJHtKU0lJX1JUX0FMSUFTfS5SZWdpc3RlckVudW0oYCk7XG4gICAgY29kZS5saW5lKGBcIiR7dGhpcy5mcW59XCIsYCk7XG4gICAgY29kZS5saW5lKGByZWZsZWN0LlR5cGVPZigoKiR7dGhpcy5uYW1lfSkobmlsKSkuRWxlbSgpLGApO1xuICAgIGNvZGUub3BlbihgbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgKTtcbiAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0aGlzLm1lbWJlcnMpIHtcbiAgICAgIGNvZGUubGluZShgXCIke21lbWJlci5yYXdWYWx1ZX1cIjogJHttZW1iZXIubmFtZX0sYCk7XG4gICAgfVxuICAgIGNvZGUuY2xvc2UoYH0sYCk7XG4gICAgY29kZS5jbG9zZSgnKScpO1xuICB9XG5cbiAgcHVibGljIGdldCBkZXBlbmRlbmNpZXMoKTogUGFja2FnZVtdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwdWJsaWMgZ2V0IHNwZWNpYWxEZXBlbmRlbmNpZXMoKTogU3BlY2lhbERlcGVuZGVuY2llcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJ1bnRpbWU6IGZhbHNlLFxuICAgICAgaW5pdDogZmFsc2UsXG4gICAgICBpbnRlcm5hbDogZmFsc2UsXG4gICAgICB0aW1lOiBmYWxzZSxcbiAgICB9O1xuICB9XG59XG5cbmNsYXNzIEdvRW51bU1lbWJlciB7XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSByYXdWYWx1ZTogc3RyaW5nO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHBhcmVudDogRW51bSwgZW50cnk6IEVudW1NZW1iZXIpIHtcbiAgICB0aGlzLm5hbWUgPSBgJHtwYXJlbnQubmFtZX1fJHtlbnRyeS5uYW1lfWA7XG4gICAgdGhpcy5yYXdWYWx1ZSA9IGVudHJ5Lm5hbWU7XG4gIH1cblxuICBwdWJsaWMgZW1pdChjb2RlOiBDb2RlTWFrZXIpIHtcbiAgICBjb2RlLmxpbmUoYCR7dGhpcy5uYW1lfSAke3RoaXMucGFyZW50Lm5hbWV9ID0gXCIke3RoaXMucmF3VmFsdWV9XCJgKTtcbiAgfVxufVxuIl19