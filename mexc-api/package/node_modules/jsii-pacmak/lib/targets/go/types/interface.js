"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoInterface = void 0;
const comparators = require("../comparators");
const runtime_1 = require("../runtime");
const util_1 = require("../util");
const go_type_1 = require("./go-type");
const go_type_reference_1 = require("./go-type-reference");
const type_member_1 = require("./type-member");
class GoInterface extends go_type_1.GoType {
    constructor(pkg, type) {
        super(pkg, type);
        this.type = type;
        this.methods = type.ownMethods
            .map((method) => new InterfaceMethod(this, method))
            .sort(comparators.byName);
        this.properties = type.ownProperties
            .map((prop) => new InterfaceProperty(this, prop))
            .sort(comparators.byName);
        // If there is more than one base, and any ancestor (including transitive)
        // comes from a different assembly, we will re-implement all members on the
        // proxy struct, as otherwise we run the risk of un-promotable methods
        // caused by inheriting the same interface via multiple paths (since we have
        // to represent those as embedded types).
        if (type.interfaces.length > 1 &&
            type
                .getInterfaces(true)
                .some((ancestor) => ancestor.assembly.fqn !== type.assembly.fqn)) {
            this.reimplementedMethods = type.allMethods
                .filter((method) => !method.static && method.definingType !== type)
                .map((method) => new InterfaceMethod(this, method))
                .sort(comparators.byName);
            this.reimplementedProperties = type.allProperties
                .filter((property) => !property.static && property.definingType !== type)
                .map((property) => new InterfaceProperty(this, property))
                .sort(comparators.byName);
        }
    }
    emit(context) {
        var _a, _b;
        this.emitDocs(context);
        const { code } = context;
        code.openBlock(`type ${this.name} interface`);
        // embed extended interfaces
        for (const iface of this.extends) {
            code.line(new go_type_reference_1.GoTypeRef(this.pkg.root, iface.type.reference).scopedName(this.pkg));
        }
        for (const method of this.methods) {
            method.emitDecl(context);
        }
        for (const prop of this.properties) {
            prop.emit(context);
        }
        code.closeBlock();
        code.line();
        code.line(`// The jsii proxy for ${this.name}`);
        code.openBlock(`type ${this.proxyName} struct`);
        if (this.extends.length === 0) {
            // Ensure this is not 0-width
            code.line('_ byte // padding');
        }
        else {
            for (const base of this.extends) {
                code.line(this.pkg.resolveEmbeddedType(base).embed);
            }
        }
        code.closeBlock();
        code.line();
        for (const method of this.methods) {
            method.emit(context);
        }
        for (const method of (_a = this.reimplementedMethods) !== null && _a !== void 0 ? _a : []) {
            method.emit(context);
        }
        for (const prop of this.properties) {
            prop.emitGetterProxy(context);
            if (!prop.immutable) {
                prop.emitSetterProxy(context);
            }
        }
        for (const prop of (_b = this.reimplementedProperties) !== null && _b !== void 0 ? _b : []) {
            prop.emitGetterProxy(context);
            if (!prop.immutable) {
                prop.emitSetterProxy(context);
            }
        }
    }
    emitRegistration(code) {
        code.open(`${runtime_1.JSII_RT_ALIAS}.RegisterInterface(`);
        code.line(`"${this.fqn}",`);
        code.line(`reflect.TypeOf((*${this.name})(nil)).Elem(),`);
        const allMembers = [
            ...this.type.allMethods
                .filter((method) => !method.static)
                .map((method) => new InterfaceMethod(this, method)),
            ...this.type.allProperties
                .filter((property) => !property.static)
                .map((property) => new type_member_1.GoProperty(this, property)),
        ].sort(comparators.byName);
        if (allMembers.length === 0) {
            code.line('nil, // no members');
        }
        else {
            code.open(`[]${runtime_1.JSII_RT_ALIAS}.Member{`);
            for (const member of allMembers) {
                code.line(`${member.override},`);
            }
            code.close('},');
        }
        this.emitProxyMakerFunction(code, this.extends);
        code.close(')');
    }
    get specialDependencies() {
        return [
            ...this.properties.map((p) => p.specialDependencies),
            ...this.methods.map((m) => m.specialDependencies),
        ].reduce((acc, elt) => ({
            runtime: acc.runtime || elt.runtime,
            init: acc.init || elt.init,
            internal: acc.internal,
            time: acc.time || elt.time,
        }), {
            runtime: false,
            init: false,
            internal: this.extends.some((base) => this.pkg.isExternalType(base)),
            time: false,
        });
    }
    get extends() {
        return this.type.interfaces
            .map((iface) => this.pkg.root.findType(iface.fqn))
            .sort(comparators.byName);
    }
    get extendsDependencies() {
        const packages = [];
        for (const ifaceRef of this.extends) {
            const pkg = ifaceRef.pkg;
            if (pkg) {
                packages.push(pkg);
            }
        }
        return packages;
    }
    get dependencies() {
        return [
            ...this.extendsDependencies,
            ...util_1.getMemberDependencies(this.methods),
            ...util_1.getParamDependencies(this.methods),
            ...util_1.getMemberDependencies(this.properties),
        ];
    }
}
exports.GoInterface = GoInterface;
class InterfaceProperty extends type_member_1.GoProperty {
    constructor(parent, property) {
        super(parent, property);
        this.parent = parent;
        this.property = property;
    }
    get returnType() {
        var _a, _b;
        return ((_b = (_a = this.reference) === null || _a === void 0 ? void 0 : _a.scopedReference(this.parent.pkg)) !== null && _b !== void 0 ? _b : this.property.type.toString());
    }
    emit({ code, documenter }) {
        documenter.emit(this.property.docs);
        code.line(`${this.name}() ${this.returnType}`);
        if (!this.property.immutable) {
            documenter.emit(this.property.docs);
            code.line(`Set${this.name}(${this.name[0].toLowerCase()} ${this.returnType})`);
        }
    }
}
class InterfaceMethod extends type_member_1.GoMethod {
    constructor(parent, method) {
        super(parent, method);
        this.parent = parent;
        this.method = method;
        this.runtimeCall = new runtime_1.MethodCall(this);
    }
    emitDecl(context) {
        const docs = this.method.docs;
        if (docs) {
            context.documenter.emit(docs);
        }
        const { code } = context;
        code.line(`${this.name}(${this.paramString()})${this.returnTypeString}`);
    }
    emit({ code }) {
        const name = this.name;
        code.openBlock(`func (${this.instanceArg} *${this.parent.proxyName}) ${name}(${this.paramString()})${this.returnTypeString}`);
        this.runtimeCall.emit(code);
        code.closeBlock();
        code.line();
    }
    get specialDependencies() {
        var _a;
        return {
            runtime: true,
            init: false,
            internal: false,
            time: this.parameters.some((p) => p.reference.specialDependencies.time) ||
                !!((_a = this.reference) === null || _a === void 0 ? void 0 : _a.specialDependencies.time),
        };
    }
    get returnTypeString() {
        var _a;
        return ((_a = this.reference) === null || _a === void 0 ? void 0 : _a.void) ? '' : ` ${this.returnType}`;
    }
}
//# sourceMappingURL=data:application/json;base64,