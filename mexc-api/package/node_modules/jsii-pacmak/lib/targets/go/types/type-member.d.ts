import { Callable, Parameter, Property } from 'jsii-reflect';
import { SpecialDependencies } from '../dependencies';
import { EmitContext } from '../emit-context';
import { GoClass, GoType, GoInterface, GoTypeRef } from './index';
export interface GoTypeMember {
    name: string;
    parent: GoType;
    reference?: GoTypeRef;
    returnType: string;
    specialDependencies: SpecialDependencies;
}
export declare class GoProperty implements GoTypeMember {
    parent: GoType;
    readonly property: Property;
    readonly name: string;
    readonly reference?: GoTypeRef;
    readonly immutable: boolean;
    constructor(parent: GoType, property: Property);
    get specialDependencies(): SpecialDependencies;
    get static(): boolean;
    get returnType(): string;
    get instanceArg(): string;
    get override(): string;
    emitStructMember({ code, documenter }: EmitContext): void;
    emitGetterDecl(context: EmitContext): void;
    emitGetter({ code, documenter }: EmitContext): void;
    emitSetterDecl(context: EmitContext): void;
    emitGetterProxy(context: EmitContext): void;
    emitSetterProxy(context: EmitContext): void;
}
export declare abstract class GoMethod implements GoTypeMember {
    readonly parent: GoClass | GoInterface;
    readonly method: Callable;
    readonly name: string;
    readonly reference?: GoTypeRef;
    readonly parameters: GoParameter[];
    constructor(parent: GoClass | GoInterface, method: Callable);
    abstract emit(context: EmitContext): void;
    abstract get specialDependencies(): SpecialDependencies;
    get returnsRef(): boolean;
    get returnType(): string;
    get instanceArg(): string;
    get override(): string;
    paramString(): string;
}
export declare class GoParameter {
    parent: GoClass | GoInterface;
    readonly parameter: Parameter;
    readonly name: string;
    readonly reference: GoTypeRef;
    constructor(parent: GoClass | GoInterface, parameter: Parameter);
    toString(): string;
}
