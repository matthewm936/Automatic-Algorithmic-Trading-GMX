"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoParameter = exports.GoMethod = exports.GoProperty = void 0;
const jsii_reflect_1 = require("jsii-reflect");
const naming_util_1 = require("../../../naming-util");
const runtime_1 = require("../runtime");
const util_1 = require("../util");
const index_1 = require("./index");
/*
 * GoProperty encapsulates logic for public properties on a concrete struct, which could represent
 either a JSII class proxy or datatype interface proxy
*/
class GoProperty {
    constructor(parent, property) {
        this.parent = parent;
        this.property = property;
        this.name = naming_util_1.jsiiToPascalCase(this.property.name);
        this.immutable = property.immutable;
        if (property.type) {
            this.reference = new index_1.GoTypeRef(parent.pkg.root, property.type);
        }
    }
    get specialDependencies() {
        var _a;
        return {
            runtime: true,
            init: this.static,
            internal: false,
            time: !!((_a = this.reference) === null || _a === void 0 ? void 0 : _a.specialDependencies.time),
        };
    }
    get static() {
        return !!this.property.static;
    }
    get returnType() {
        var _a, _b;
        return ((_b = (_a = this.reference) === null || _a === void 0 ? void 0 : _a.scopedReference(this.parent.pkg)) !== null && _b !== void 0 ? _b : this.property.type.toString());
    }
    get instanceArg() {
        return this.parent.proxyName.substring(0, 1).toLowerCase();
    }
    get override() {
        return `${runtime_1.JSII_RT_ALIAS}.MemberProperty{JsiiProperty: "${this.property.name}", GoGetter: "${this.name}"}`;
    }
    emitStructMember({ code, documenter }) {
        var _a, _b;
        documenter.emit(this.property.docs);
        const memberType = ((_b = (_a = this.reference) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.name) === this.parent.name
            ? `*${this.returnType}`
            : this.returnType;
        // Adds json tags for easy deserialization
        code.line(`${this.name} ${memberType} \`json:"${this.property.name}"\``);
        // TODO add newline if not the last member
    }
    emitGetterDecl(context) {
        const { code } = context;
        code.line(`${this.name}() ${this.returnType}`);
    }
    emitGetter({ code, documenter }) {
        const receiver = this.parent.name;
        const instanceArg = receiver.substring(0, 1).toLowerCase();
        documenter.emit(this.property.docs);
        code.openBlock(`func (${instanceArg} *${receiver}) Get${this.name}() ${this.returnType}`);
        code.line(`return ${instanceArg}.${this.name}`);
        code.closeBlock();
    }
    emitSetterDecl(context) {
        const { code } = context;
        if (!this.immutable) {
            code.line(`Set${this.name}(val ${this.returnType})`);
        }
    }
    // Emits getter methods on the struct for each property
    emitGetterProxy(context) {
        const { code } = context;
        const receiver = this.parent.proxyName;
        const instanceArg = receiver.substring(0, 1).toLowerCase();
        code.openBlock(`func (${instanceArg} *${receiver}) ${this.name}() ${this.returnType}`);
        new runtime_1.GetProperty(this).emit(code);
        code.closeBlock();
        code.line();
    }
    emitSetterProxy(context) {
        if (!this.immutable) {
            const { code } = context;
            const receiver = this.parent.proxyName;
            const instanceArg = receiver.substring(0, 1).toLowerCase();
            code.openBlock(`func (${instanceArg} *${receiver}) Set${this.name}(val ${this.returnType})`);
            new runtime_1.SetProperty(this).emit(code);
            code.closeBlock();
            code.line();
        }
    }
}
exports.GoProperty = GoProperty;
class GoMethod {
    constructor(parent, method) {
        this.parent = parent;
        this.method = method;
        this.name = naming_util_1.jsiiToPascalCase(method.name);
        if (jsii_reflect_1.Method.isMethod(method) && method.returns.type) {
            this.reference = new index_1.GoTypeRef(parent.pkg.root, method.returns.type);
        }
        this.parameters = this.method.parameters.map((param) => new GoParameter(parent, param));
    }
    get returnsRef() {
        var _a, _b, _c, _d;
        if (((_b = (_a = this.reference) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.type.isClassType()) || ((_d = (_c = this.reference) === null || _c === void 0 ? void 0 : _c.type) === null || _d === void 0 ? void 0 : _d.type.isInterfaceType())) {
            return true;
        }
        return false;
    }
    get returnType() {
        var _a, _b;
        return ((_b = (_a = this.reference) === null || _a === void 0 ? void 0 : _a.scopedReference(this.parent.pkg)) !== null && _b !== void 0 ? _b : this.method.toString());
    }
    get instanceArg() {
        return this.parent.name.substring(0, 1).toLowerCase();
    }
    get override() {
        return `${runtime_1.JSII_RT_ALIAS}.MemberMethod{JsiiMethod: "${this.method.name}", GoMethod: "${this.name}"}`;
    }
    paramString() {
        return this.parameters.length === 0
            ? ''
            : this.parameters.map((p) => p.toString()).join(', ');
    }
}
exports.GoMethod = GoMethod;
class GoParameter {
    constructor(parent, parameter) {
        this.parent = parent;
        this.parameter = parameter;
        this.name = util_1.substituteReservedWords(parameter.name);
        this.reference = new index_1.GoTypeRef(parent.pkg.root, parameter.type);
    }
    toString() {
        const paramType = this.reference.scopedReference(this.parent.pkg);
        return `${this.name} ${this.parameter.variadic ? '...' : ''}${paramType}`;
    }
}
exports.GoParameter = GoParameter;
//# sourceMappingURL=data:application/json;base64,