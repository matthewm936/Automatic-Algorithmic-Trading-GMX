"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Documentation = void 0;
const spec_1 = require("@jsii/spec");
class Documentation {
    constructor(code, _rosetta) {
        this.code = code;
    }
    /**
     * Emits all documentation depending on what is available in the jsii model
     *
     * Used by all kind of members + classes, interfaces, enums
     * Order should be
     * Summary + Remarks
     * Returns
     * Examples TODO rosetta stuff
     * Link
     * Stability/Deprecation description
     */
    emit(docs) {
        let firstLine = true;
        if (docs.toString() !== '') {
            this.emitComment(docs.toString());
            firstLine = false;
        }
        if (docs.returns !== '') {
            if (!firstLine) {
                this.emitComment();
            }
            firstLine = false;
            this.emitComment(`Returns: ${docs.returns}`);
        }
        if (docs.example !== '') {
            if (!firstLine) {
                this.emitComment();
            }
            firstLine = false;
            // TODO: Translate code examples to Go with Rosetta (not implemented there yet)
            this.emitComment('TODO: EXAMPLE');
            this.emitComment();
        }
        if (docs.link !== '') {
            this.emitComment(`See: ${docs.link}`);
            this.emitComment();
        }
        this.emitStability(docs);
    }
    emitStability(docs) {
        const stability = docs.stability;
        if (stability && this.shouldMentionStability(docs)) {
            if (docs.deprecated) {
                this.emitComment(`Deprecated: ${docs.deprecationReason}`);
            }
            else {
                this.emitComment(`${this.code.toPascalCase(stability)}.`);
            }
        }
    }
    emitComment(text = '') {
        for (const line of text.split('\n')) {
            this.code.line(`// ${line}`.trim());
        }
    }
    shouldMentionStability({ stability }) {
        // Don't render "stable" or "external", those are both stable by implication
        return (stability === spec_1.Stability.Deprecated || stability === spec_1.Stability.Experimental);
    }
}
exports.Documentation = Documentation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvY3VtZW50YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXVDO0FBS3ZDLE1BQWEsYUFBYTtJQUN4QixZQUFvQyxJQUFlLEVBQUUsUUFBaUI7UUFBbEMsU0FBSSxHQUFKLElBQUksQ0FBVztJQUFzQixDQUFDO0lBRTFFOzs7Ozs7Ozs7O09BVUc7SUFDSSxJQUFJLENBQUMsSUFBVTtRQUNwQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDbEMsU0FBUyxHQUFHLEtBQUssQ0FBQztTQUNuQjtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEI7WUFDRCxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUM5QztRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEI7WUFDRCxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ2xCLCtFQUErRTtZQUMvRSxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtRQUVELElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLGFBQWEsQ0FBQyxJQUFVO1FBQzdCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2xELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7YUFDM0Q7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMzRDtTQUNGO0lBQ0gsQ0FBQztJQUVPLFdBQVcsQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUMzQixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztJQUVPLHNCQUFzQixDQUFDLEVBQUUsU0FBUyxFQUFRO1FBQ2hELDRFQUE0RTtRQUM1RSxPQUFPLENBQ0wsU0FBUyxLQUFLLGdCQUFTLENBQUMsVUFBVSxJQUFJLFNBQVMsS0FBSyxnQkFBUyxDQUFDLFlBQVksQ0FDM0UsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXRFRCxzQ0FzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFiaWxpdHkgfSBmcm9tICdAanNpaS9zcGVjJztcbmltcG9ydCB7IENvZGVNYWtlciB9IGZyb20gJ2NvZGVtYWtlcic7XG5pbXBvcnQgeyBEb2NzIH0gZnJvbSAnanNpaS1yZWZsZWN0JztcbmltcG9ydCB7IFJvc2V0dGEgfSBmcm9tICdqc2lpLXJvc2V0dGEnO1xuXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRhdGlvbiB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvZGU6IENvZGVNYWtlciwgX3Jvc2V0dGE6IFJvc2V0dGEpIHt9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFsbCBkb2N1bWVudGF0aW9uIGRlcGVuZGluZyBvbiB3aGF0IGlzIGF2YWlsYWJsZSBpbiB0aGUganNpaSBtb2RlbFxuICAgKlxuICAgKiBVc2VkIGJ5IGFsbCBraW5kIG9mIG1lbWJlcnMgKyBjbGFzc2VzLCBpbnRlcmZhY2VzLCBlbnVtc1xuICAgKiBPcmRlciBzaG91bGQgYmVcbiAgICogU3VtbWFyeSArIFJlbWFya3NcbiAgICogUmV0dXJuc1xuICAgKiBFeGFtcGxlcyBUT0RPIHJvc2V0dGEgc3R1ZmZcbiAgICogTGlua1xuICAgKiBTdGFiaWxpdHkvRGVwcmVjYXRpb24gZGVzY3JpcHRpb25cbiAgICovXG4gIHB1YmxpYyBlbWl0KGRvY3M6IERvY3MpOiB2b2lkIHtcbiAgICBsZXQgZmlyc3RMaW5lID0gdHJ1ZTtcbiAgICBpZiAoZG9jcy50b1N0cmluZygpICE9PSAnJykge1xuICAgICAgdGhpcy5lbWl0Q29tbWVudChkb2NzLnRvU3RyaW5nKCkpO1xuICAgICAgZmlyc3RMaW5lID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGRvY3MucmV0dXJucyAhPT0gJycpIHtcbiAgICAgIGlmICghZmlyc3RMaW5lKSB7XG4gICAgICAgIHRoaXMuZW1pdENvbW1lbnQoKTtcbiAgICAgIH1cbiAgICAgIGZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgdGhpcy5lbWl0Q29tbWVudChgUmV0dXJuczogJHtkb2NzLnJldHVybnN9YCk7XG4gICAgfVxuXG4gICAgaWYgKGRvY3MuZXhhbXBsZSAhPT0gJycpIHtcbiAgICAgIGlmICghZmlyc3RMaW5lKSB7XG4gICAgICAgIHRoaXMuZW1pdENvbW1lbnQoKTtcbiAgICAgIH1cbiAgICAgIGZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgLy8gVE9ETzogVHJhbnNsYXRlIGNvZGUgZXhhbXBsZXMgdG8gR28gd2l0aCBSb3NldHRhIChub3QgaW1wbGVtZW50ZWQgdGhlcmUgeWV0KVxuICAgICAgdGhpcy5lbWl0Q29tbWVudCgnVE9ETzogRVhBTVBMRScpO1xuICAgICAgdGhpcy5lbWl0Q29tbWVudCgpO1xuICAgIH1cblxuICAgIGlmIChkb2NzLmxpbmsgIT09ICcnKSB7XG4gICAgICB0aGlzLmVtaXRDb21tZW50KGBTZWU6ICR7ZG9jcy5saW5rfWApO1xuICAgICAgdGhpcy5lbWl0Q29tbWVudCgpO1xuICAgIH1cblxuICAgIHRoaXMuZW1pdFN0YWJpbGl0eShkb2NzKTtcbiAgfVxuXG4gIHB1YmxpYyBlbWl0U3RhYmlsaXR5KGRvY3M6IERvY3MpOiB2b2lkIHtcbiAgICBjb25zdCBzdGFiaWxpdHkgPSBkb2NzLnN0YWJpbGl0eTtcbiAgICBpZiAoc3RhYmlsaXR5ICYmIHRoaXMuc2hvdWxkTWVudGlvblN0YWJpbGl0eShkb2NzKSkge1xuICAgICAgaWYgKGRvY3MuZGVwcmVjYXRlZCkge1xuICAgICAgICB0aGlzLmVtaXRDb21tZW50KGBEZXByZWNhdGVkOiAke2RvY3MuZGVwcmVjYXRpb25SZWFzb259YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtaXRDb21tZW50KGAke3RoaXMuY29kZS50b1Bhc2NhbENhc2Uoc3RhYmlsaXR5KX0uYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBlbWl0Q29tbWVudCh0ZXh0ID0gJycpIHtcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgdGV4dC5zcGxpdCgnXFxuJykpIHtcbiAgICAgIHRoaXMuY29kZS5saW5lKGAvLyAke2xpbmV9YC50cmltKCkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkTWVudGlvblN0YWJpbGl0eSh7IHN0YWJpbGl0eSB9OiBEb2NzKTogYm9vbGVhbiB7XG4gICAgLy8gRG9uJ3QgcmVuZGVyIFwic3RhYmxlXCIgb3IgXCJleHRlcm5hbFwiLCB0aG9zZSBhcmUgYm90aCBzdGFibGUgYnkgaW1wbGljYXRpb25cbiAgICByZXR1cm4gKFxuICAgICAgc3RhYmlsaXR5ID09PSBTdGFiaWxpdHkuRGVwcmVjYXRlZCB8fCBzdGFiaWxpdHkgPT09IFN0YWJpbGl0eS5FeHBlcmltZW50YWxcbiAgICApO1xuICB9XG59XG4iXX0=