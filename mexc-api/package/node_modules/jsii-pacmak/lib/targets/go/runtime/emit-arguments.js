"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitArguments = void 0;
const util_1 = require("./util");
/**
 * Packages arguments such that they can be sent correctly to the jsii runtime
 * library.
 *
 * @returns the expression to use in place of the arguments for the jsii
 *          runtime library call.
 */
function emitArguments(code, parameters, returnVarName) {
    const argsList = parameters.map((param) => param.name);
    if (argsList.length === 0) {
        return undefined;
    }
    if (parameters[parameters.length - 1].parameter.variadic) {
        // For variadic methods, we must build up the []interface{} slice by hand,
        // as there would not be any implicit conversion happening when passing
        // the variadic argument as a splat to the append function...
        const head = argsList.slice(0, argsList.length - 1);
        const tail = argsList[argsList.length - 1];
        const variable = util_1.slugify('args', [...argsList, returnVarName]);
        const elt = util_1.slugify('a', [variable]);
        code.line(`${variable} := []interface{}{${head.join(', ')}}`);
        code.openBlock(`for _, ${elt} := range ${tail}`);
        code.line(`${variable} = append(${variable}, ${elt})`);
        code.closeBlock();
        code.line();
        return variable;
    }
    return `[]interface{}{${argsList.join(', ')}}`;
}
exports.emitArguments = emitArguments;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1pdC1hcmd1bWVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlbWl0LWFyZ3VtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxpQ0FBaUM7QUFFakM7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsYUFBYSxDQUMzQixJQUFlLEVBQ2YsVUFBa0MsRUFDbEMsYUFBcUI7SUFFckIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZELElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDekIsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFDRCxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUU7UUFDeEQsMEVBQTBFO1FBQzFFLHVFQUF1RTtRQUN2RSw2REFBNkQ7UUFDN0QsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUzQyxNQUFNLFFBQVEsR0FBRyxjQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUMvRCxNQUFNLEdBQUcsR0FBRyxjQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxxQkFBcUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLGFBQWEsUUFBUSxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsT0FBTyxpQkFBaUIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ2pELENBQUM7QUExQkQsc0NBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29kZU1ha2VyIH0gZnJvbSAnY29kZW1ha2VyJztcblxuaW1wb3J0IHsgR29QYXJhbWV0ZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzbHVnaWZ5IH0gZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBQYWNrYWdlcyBhcmd1bWVudHMgc3VjaCB0aGF0IHRoZXkgY2FuIGJlIHNlbnQgY29ycmVjdGx5IHRvIHRoZSBqc2lpIHJ1bnRpbWVcbiAqIGxpYnJhcnkuXG4gKlxuICogQHJldHVybnMgdGhlIGV4cHJlc3Npb24gdG8gdXNlIGluIHBsYWNlIG9mIHRoZSBhcmd1bWVudHMgZm9yIHRoZSBqc2lpXG4gKiAgICAgICAgICBydW50aW1lIGxpYnJhcnkgY2FsbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVtaXRBcmd1bWVudHMoXG4gIGNvZGU6IENvZGVNYWtlcixcbiAgcGFyYW1ldGVyczogcmVhZG9ubHkgR29QYXJhbWV0ZXJbXSxcbiAgcmV0dXJuVmFyTmFtZTogc3RyaW5nLFxuKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgYXJnc0xpc3QgPSBwYXJhbWV0ZXJzLm1hcCgocGFyYW0pID0+IHBhcmFtLm5hbWUpO1xuICBpZiAoYXJnc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAocGFyYW1ldGVyc1twYXJhbWV0ZXJzLmxlbmd0aCAtIDFdLnBhcmFtZXRlci52YXJpYWRpYykge1xuICAgIC8vIEZvciB2YXJpYWRpYyBtZXRob2RzLCB3ZSBtdXN0IGJ1aWxkIHVwIHRoZSBbXWludGVyZmFjZXt9IHNsaWNlIGJ5IGhhbmQsXG4gICAgLy8gYXMgdGhlcmUgd291bGQgbm90IGJlIGFueSBpbXBsaWNpdCBjb252ZXJzaW9uIGhhcHBlbmluZyB3aGVuIHBhc3NpbmdcbiAgICAvLyB0aGUgdmFyaWFkaWMgYXJndW1lbnQgYXMgYSBzcGxhdCB0byB0aGUgYXBwZW5kIGZ1bmN0aW9uLi4uXG4gICAgY29uc3QgaGVhZCA9IGFyZ3NMaXN0LnNsaWNlKDAsIGFyZ3NMaXN0Lmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IHRhaWwgPSBhcmdzTGlzdFthcmdzTGlzdC5sZW5ndGggLSAxXTtcblxuICAgIGNvbnN0IHZhcmlhYmxlID0gc2x1Z2lmeSgnYXJncycsIFsuLi5hcmdzTGlzdCwgcmV0dXJuVmFyTmFtZV0pO1xuICAgIGNvbnN0IGVsdCA9IHNsdWdpZnkoJ2EnLCBbdmFyaWFibGVdKTtcbiAgICBjb2RlLmxpbmUoYCR7dmFyaWFibGV9IDo9IFtdaW50ZXJmYWNle317JHtoZWFkLmpvaW4oJywgJyl9fWApO1xuICAgIGNvZGUub3BlbkJsb2NrKGBmb3IgXywgJHtlbHR9IDo9IHJhbmdlICR7dGFpbH1gKTtcbiAgICBjb2RlLmxpbmUoYCR7dmFyaWFibGV9ID0gYXBwZW5kKCR7dmFyaWFibGV9LCAke2VsdH0pYCk7XG4gICAgY29kZS5jbG9zZUJsb2NrKCk7XG4gICAgY29kZS5saW5lKCk7XG4gICAgcmV0dXJuIHZhcmlhYmxlO1xuICB9XG4gIHJldHVybiBgW11pbnRlcmZhY2V7fXske2FyZ3NMaXN0LmpvaW4oJywgJyl9fWA7XG59XG4iXX0=