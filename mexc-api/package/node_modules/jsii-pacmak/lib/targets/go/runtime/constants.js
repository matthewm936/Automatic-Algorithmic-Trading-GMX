"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSII_FQN = exports.JSII_ANY = exports.JSII_OVERRIDE = exports.JSII_SSET_FUNC = exports.JSII_SET_FUNC = exports.JSII_SGET_FUNC = exports.JSII_GET_FUNC = exports.JSII_SINVOKE_VOID_FUNC = exports.JSII_SINVOKE_FUNC = exports.JSII_INVOKE_VOID_FUNC = exports.JSII_INVOKE_FUNC = exports.JSII_CREATE_FUNC = exports.JSII_INIT_ALIAS = exports.JSII_INIT_FUNC = exports.JSII_INIT_PACKAGE = exports.JSII_RT_ALIAS = exports.JSII_RT_PACKAGE_NAME = exports.JSII_RT_MODULE_NAME = void 0;
// JSII go runtime module name
exports.JSII_RT_MODULE_NAME = 'github.com/aws/jsii-runtime-go';
exports.JSII_RT_PACKAGE_NAME = `${exports.JSII_RT_MODULE_NAME}/runtime`;
exports.JSII_RT_ALIAS = '_jsii_';
// Jsii initializer package name
exports.JSII_INIT_PACKAGE = 'jsii';
// Function to initialize a jsii-generated module
exports.JSII_INIT_FUNC = 'Initialize';
// Alias used for the jsii init
exports.JSII_INIT_ALIAS = '_init_';
// Function to make create request
exports.JSII_CREATE_FUNC = `${exports.JSII_RT_ALIAS}.Create`;
// JSII invoke request
exports.JSII_INVOKE_FUNC = `${exports.JSII_RT_ALIAS}.Invoke`;
exports.JSII_INVOKE_VOID_FUNC = `${exports.JSII_RT_ALIAS}.InvokeVoid`;
// JSII static invoke
exports.JSII_SINVOKE_FUNC = `${exports.JSII_RT_ALIAS}.StaticInvoke`;
exports.JSII_SINVOKE_VOID_FUNC = `${exports.JSII_RT_ALIAS}.StaticInvokeVoid`;
// JSII get request
exports.JSII_GET_FUNC = `${exports.JSII_RT_ALIAS}.Get`;
// JSII static get request
exports.JSII_SGET_FUNC = `${exports.JSII_RT_ALIAS}.StaticGet`;
// JSII set request
exports.JSII_SET_FUNC = `${exports.JSII_RT_ALIAS}.Set`;
// JSII static set request
exports.JSII_SSET_FUNC = `${exports.JSII_RT_ALIAS}.StaticSet`;
// MISC types & functions
// Jsii override struct type
exports.JSII_OVERRIDE = `${exports.JSII_RT_ALIAS}.Override`;
// Jsii Any mock
exports.JSII_ANY = `${exports.JSII_RT_ALIAS}.Any`;
// Jsii FQN type
exports.JSII_FQN = `${exports.JSII_RT_ALIAS}.FQN`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhCQUE4QjtBQUNqQixRQUFBLG1CQUFtQixHQUFHLGdDQUFnQyxDQUFDO0FBQ3ZELFFBQUEsb0JBQW9CLEdBQUcsR0FBRywyQkFBbUIsVUFBVSxDQUFDO0FBQ3hELFFBQUEsYUFBYSxHQUFHLFFBQVEsQ0FBQztBQUV0QyxnQ0FBZ0M7QUFDbkIsUUFBQSxpQkFBaUIsR0FBRyxNQUFNLENBQUM7QUFDeEMsaURBQWlEO0FBQ3BDLFFBQUEsY0FBYyxHQUFHLFlBQVksQ0FBQztBQUMzQywrQkFBK0I7QUFDbEIsUUFBQSxlQUFlLEdBQUcsUUFBUSxDQUFDO0FBRXhDLGtDQUFrQztBQUNyQixRQUFBLGdCQUFnQixHQUFHLEdBQUcscUJBQWEsU0FBUyxDQUFDO0FBQzFELHNCQUFzQjtBQUNULFFBQUEsZ0JBQWdCLEdBQUcsR0FBRyxxQkFBYSxTQUFTLENBQUM7QUFDN0MsUUFBQSxxQkFBcUIsR0FBRyxHQUFHLHFCQUFhLGFBQWEsQ0FBQztBQUNuRSxxQkFBcUI7QUFDUixRQUFBLGlCQUFpQixHQUFHLEdBQUcscUJBQWEsZUFBZSxDQUFDO0FBQ3BELFFBQUEsc0JBQXNCLEdBQUcsR0FBRyxxQkFBYSxtQkFBbUIsQ0FBQztBQUUxRSxtQkFBbUI7QUFDTixRQUFBLGFBQWEsR0FBRyxHQUFHLHFCQUFhLE1BQU0sQ0FBQztBQUVwRCwwQkFBMEI7QUFDYixRQUFBLGNBQWMsR0FBRyxHQUFHLHFCQUFhLFlBQVksQ0FBQztBQUUzRCxtQkFBbUI7QUFDTixRQUFBLGFBQWEsR0FBRyxHQUFHLHFCQUFhLE1BQU0sQ0FBQztBQUVwRCwwQkFBMEI7QUFDYixRQUFBLGNBQWMsR0FBRyxHQUFHLHFCQUFhLFlBQVksQ0FBQztBQUUzRCx5QkFBeUI7QUFDekIsNEJBQTRCO0FBQ2YsUUFBQSxhQUFhLEdBQUcsR0FBRyxxQkFBYSxXQUFXLENBQUM7QUFDekQsZ0JBQWdCO0FBQ0gsUUFBQSxRQUFRLEdBQUcsR0FBRyxxQkFBYSxNQUFNLENBQUM7QUFDL0MsZ0JBQWdCO0FBQ0gsUUFBQSxRQUFRLEdBQUcsR0FBRyxxQkFBYSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBKU0lJIGdvIHJ1bnRpbWUgbW9kdWxlIG5hbWVcbmV4cG9ydCBjb25zdCBKU0lJX1JUX01PRFVMRV9OQU1FID0gJ2dpdGh1Yi5jb20vYXdzL2pzaWktcnVudGltZS1nbyc7XG5leHBvcnQgY29uc3QgSlNJSV9SVF9QQUNLQUdFX05BTUUgPSBgJHtKU0lJX1JUX01PRFVMRV9OQU1FfS9ydW50aW1lYDtcbmV4cG9ydCBjb25zdCBKU0lJX1JUX0FMSUFTID0gJ19qc2lpXyc7XG5cbi8vIEpzaWkgaW5pdGlhbGl6ZXIgcGFja2FnZSBuYW1lXG5leHBvcnQgY29uc3QgSlNJSV9JTklUX1BBQ0tBR0UgPSAnanNpaSc7XG4vLyBGdW5jdGlvbiB0byBpbml0aWFsaXplIGEganNpaS1nZW5lcmF0ZWQgbW9kdWxlXG5leHBvcnQgY29uc3QgSlNJSV9JTklUX0ZVTkMgPSAnSW5pdGlhbGl6ZSc7XG4vLyBBbGlhcyB1c2VkIGZvciB0aGUganNpaSBpbml0XG5leHBvcnQgY29uc3QgSlNJSV9JTklUX0FMSUFTID0gJ19pbml0Xyc7XG5cbi8vIEZ1bmN0aW9uIHRvIG1ha2UgY3JlYXRlIHJlcXVlc3RcbmV4cG9ydCBjb25zdCBKU0lJX0NSRUFURV9GVU5DID0gYCR7SlNJSV9SVF9BTElBU30uQ3JlYXRlYDtcbi8vIEpTSUkgaW52b2tlIHJlcXVlc3RcbmV4cG9ydCBjb25zdCBKU0lJX0lOVk9LRV9GVU5DID0gYCR7SlNJSV9SVF9BTElBU30uSW52b2tlYDtcbmV4cG9ydCBjb25zdCBKU0lJX0lOVk9LRV9WT0lEX0ZVTkMgPSBgJHtKU0lJX1JUX0FMSUFTfS5JbnZva2VWb2lkYDtcbi8vIEpTSUkgc3RhdGljIGludm9rZVxuZXhwb3J0IGNvbnN0IEpTSUlfU0lOVk9LRV9GVU5DID0gYCR7SlNJSV9SVF9BTElBU30uU3RhdGljSW52b2tlYDtcbmV4cG9ydCBjb25zdCBKU0lJX1NJTlZPS0VfVk9JRF9GVU5DID0gYCR7SlNJSV9SVF9BTElBU30uU3RhdGljSW52b2tlVm9pZGA7XG5cbi8vIEpTSUkgZ2V0IHJlcXVlc3RcbmV4cG9ydCBjb25zdCBKU0lJX0dFVF9GVU5DID0gYCR7SlNJSV9SVF9BTElBU30uR2V0YDtcblxuLy8gSlNJSSBzdGF0aWMgZ2V0IHJlcXVlc3RcbmV4cG9ydCBjb25zdCBKU0lJX1NHRVRfRlVOQyA9IGAke0pTSUlfUlRfQUxJQVN9LlN0YXRpY0dldGA7XG5cbi8vIEpTSUkgc2V0IHJlcXVlc3RcbmV4cG9ydCBjb25zdCBKU0lJX1NFVF9GVU5DID0gYCR7SlNJSV9SVF9BTElBU30uU2V0YDtcblxuLy8gSlNJSSBzdGF0aWMgc2V0IHJlcXVlc3RcbmV4cG9ydCBjb25zdCBKU0lJX1NTRVRfRlVOQyA9IGAke0pTSUlfUlRfQUxJQVN9LlN0YXRpY1NldGA7XG5cbi8vIE1JU0MgdHlwZXMgJiBmdW5jdGlvbnNcbi8vIEpzaWkgb3ZlcnJpZGUgc3RydWN0IHR5cGVcbmV4cG9ydCBjb25zdCBKU0lJX09WRVJSSURFID0gYCR7SlNJSV9SVF9BTElBU30uT3ZlcnJpZGVgO1xuLy8gSnNpaSBBbnkgbW9ja1xuZXhwb3J0IGNvbnN0IEpTSUlfQU5ZID0gYCR7SlNJSV9SVF9BTElBU30uQW55YDtcbi8vIEpzaWkgRlFOIHR5cGVcbmV4cG9ydCBjb25zdCBKU0lJX0ZRTiA9IGAke0pTSUlfUlRfQUxJQVN9LkZRTmA7XG4iXX0=