"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodCall = void 0;
const jsii_reflect_1 = require("jsii-reflect");
const constants_1 = require("./constants");
const emit_arguments_1 = require("./emit-arguments");
const function_call_1 = require("./function-call");
const util_1 = require("./util");
class MethodCall extends function_call_1.FunctionCall {
    constructor(parent) {
        super(parent);
        this.parent = parent;
        this._returnVarName = '';
    }
    emit(code) {
        if (this.inStatic) {
            this.emitStatic(code);
        }
        else {
            this.emitDynamic(code);
        }
    }
    emitDynamic(code) {
        const args = emit_arguments_1.emitArguments(code, this.parent.parameters, this.returnVarName);
        if (this.returnsVal) {
            code.line(`var ${this.returnVarName} ${this.returnType}`);
            code.line();
            code.open(`${constants_1.JSII_INVOKE_FUNC}(`);
        }
        else {
            code.open(`${constants_1.JSII_INVOKE_VOID_FUNC}(`);
        }
        code.line(`${this.parent.instanceArg},`);
        code.line(`"${this.parent.method.name}",`);
        code.line(args ? `${args},` : 'nil, // no parameters');
        if (this.returnsVal) {
            code.line(`&${this.returnVarName},`);
        }
        code.close(`)`);
        if (this.returnsVal) {
            code.line();
            code.line(`return ${this.returnVarName}`);
        }
    }
    emitStatic(code) {
        util_1.emitInitialization(code);
        code.line();
        const args = emit_arguments_1.emitArguments(code, this.parent.parameters, this.returnVarName);
        if (this.returnsVal) {
            code.line(`var ${this.returnVarName} ${this.returnType}`);
            code.line();
            code.open(`${constants_1.JSII_SINVOKE_FUNC}(`);
        }
        else {
            code.open(`${constants_1.JSII_SINVOKE_VOID_FUNC}(`);
        }
        code.line(`"${this.parent.parent.fqn}",`);
        code.line(`"${this.parent.method.name}",`);
        code.line(args ? `${args},` : 'nil, // no parameters');
        if (this.returnsVal) {
            code.line(`&${this.returnVarName},`);
        }
        code.close(`)`);
        if (this.returnsVal) {
            code.line();
            code.line(`return ${this.returnVarName}`);
        }
    }
    get returnVarName() {
        if (this._returnVarName === '') {
            this._returnVarName = util_1.slugify('returns', this.parent.parameters.map((p) => p.name));
        }
        return this._returnVarName;
    }
    get inStatic() {
        return jsii_reflect_1.Method.isMethod(this.parent.method) && this.parent.method.static;
    }
}
exports.MethodCall = MethodCall;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kLWNhbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXRob2QtY2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQ0FBc0M7QUFHdEMsMkNBS3FCO0FBQ3JCLHFEQUFpRDtBQUNqRCxtREFBK0M7QUFDL0MsaUNBQXFEO0FBRXJELE1BQWEsVUFBVyxTQUFRLDRCQUFZO0lBRTFDLFlBQW1DLE1BQWdCO1FBQ2pELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQURtQixXQUFNLEdBQU4sTUFBTSxDQUFVO1FBRDNDLG1CQUFjLEdBQUcsRUFBRSxDQUFDO0lBRzVCLENBQUM7SUFFTSxJQUFJLENBQUMsSUFBZTtRQUN6QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFTyxXQUFXLENBQUMsSUFBZTtRQUNqQyxNQUFNLElBQUksR0FBRyw4QkFBYSxDQUN4QixJQUFJLEVBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQ3RCLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDMUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLDRCQUFnQixHQUFHLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLGlDQUFxQixHQUFHLENBQUMsQ0FBQztTQUN4QztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztTQUN0QztRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUM7SUFFTyxVQUFVLENBQUMsSUFBZTtRQUNoQyx5QkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixNQUFNLElBQUksR0FBRyw4QkFBYSxDQUN4QixJQUFJLEVBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQ3RCLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDMUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLDZCQUFpQixHQUFHLENBQUMsQ0FBQztTQUNwQzthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLGtDQUFzQixHQUFHLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7U0FDdEM7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsSUFBWSxhQUFhO1FBQ3ZCLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFPLENBQzNCLFNBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDMUMsQ0FBQztTQUNIO1FBQ0QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFZLFFBQVE7UUFDbEIsT0FBTyxxQkFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMxRSxDQUFDO0NBQ0Y7QUF2RkQsZ0NBdUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29kZU1ha2VyIH0gZnJvbSAnY29kZW1ha2VyJztcbmltcG9ydCB7IE1ldGhvZCB9IGZyb20gJ2pzaWktcmVmbGVjdCc7XG5cbmltcG9ydCB7IEdvTWV0aG9kIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgSlNJSV9JTlZPS0VfRlVOQyxcbiAgSlNJSV9JTlZPS0VfVk9JRF9GVU5DLFxuICBKU0lJX1NJTlZPS0VfRlVOQyxcbiAgSlNJSV9TSU5WT0tFX1ZPSURfRlVOQyxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZW1pdEFyZ3VtZW50cyB9IGZyb20gJy4vZW1pdC1hcmd1bWVudHMnO1xuaW1wb3J0IHsgRnVuY3Rpb25DYWxsIH0gZnJvbSAnLi9mdW5jdGlvbi1jYWxsJztcbmltcG9ydCB7IHNsdWdpZnksIGVtaXRJbml0aWFsaXphdGlvbiB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBNZXRob2RDYWxsIGV4dGVuZHMgRnVuY3Rpb25DYWxsIHtcbiAgcHJpdmF0ZSBfcmV0dXJuVmFyTmFtZSA9ICcnO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHBhcmVudDogR29NZXRob2QpIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIGVtaXQoY29kZTogQ29kZU1ha2VyKSB7XG4gICAgaWYgKHRoaXMuaW5TdGF0aWMpIHtcbiAgICAgIHRoaXMuZW1pdFN0YXRpYyhjb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbWl0RHluYW1pYyhjb2RlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGVtaXREeW5hbWljKGNvZGU6IENvZGVNYWtlcikge1xuICAgIGNvbnN0IGFyZ3MgPSBlbWl0QXJndW1lbnRzKFxuICAgICAgY29kZSxcbiAgICAgIHRoaXMucGFyZW50LnBhcmFtZXRlcnMsXG4gICAgICB0aGlzLnJldHVyblZhck5hbWUsXG4gICAgKTtcbiAgICBpZiAodGhpcy5yZXR1cm5zVmFsKSB7XG4gICAgICBjb2RlLmxpbmUoYHZhciAke3RoaXMucmV0dXJuVmFyTmFtZX0gJHt0aGlzLnJldHVyblR5cGV9YCk7XG4gICAgICBjb2RlLmxpbmUoKTtcbiAgICAgIGNvZGUub3BlbihgJHtKU0lJX0lOVk9LRV9GVU5DfShgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29kZS5vcGVuKGAke0pTSUlfSU5WT0tFX1ZPSURfRlVOQ30oYCk7XG4gICAgfVxuXG4gICAgY29kZS5saW5lKGAke3RoaXMucGFyZW50Lmluc3RhbmNlQXJnfSxgKTtcbiAgICBjb2RlLmxpbmUoYFwiJHt0aGlzLnBhcmVudC5tZXRob2QubmFtZX1cIixgKTtcbiAgICBjb2RlLmxpbmUoYXJncyA/IGAke2FyZ3N9LGAgOiAnbmlsLCAvLyBubyBwYXJhbWV0ZXJzJyk7XG4gICAgaWYgKHRoaXMucmV0dXJuc1ZhbCkge1xuICAgICAgY29kZS5saW5lKGAmJHt0aGlzLnJldHVyblZhck5hbWV9LGApO1xuICAgIH1cblxuICAgIGNvZGUuY2xvc2UoYClgKTtcblxuICAgIGlmICh0aGlzLnJldHVybnNWYWwpIHtcbiAgICAgIGNvZGUubGluZSgpO1xuICAgICAgY29kZS5saW5lKGByZXR1cm4gJHt0aGlzLnJldHVyblZhck5hbWV9YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBlbWl0U3RhdGljKGNvZGU6IENvZGVNYWtlcikge1xuICAgIGVtaXRJbml0aWFsaXphdGlvbihjb2RlKTtcbiAgICBjb2RlLmxpbmUoKTtcbiAgICBjb25zdCBhcmdzID0gZW1pdEFyZ3VtZW50cyhcbiAgICAgIGNvZGUsXG4gICAgICB0aGlzLnBhcmVudC5wYXJhbWV0ZXJzLFxuICAgICAgdGhpcy5yZXR1cm5WYXJOYW1lLFxuICAgICk7XG4gICAgaWYgKHRoaXMucmV0dXJuc1ZhbCkge1xuICAgICAgY29kZS5saW5lKGB2YXIgJHt0aGlzLnJldHVyblZhck5hbWV9ICR7dGhpcy5yZXR1cm5UeXBlfWApO1xuICAgICAgY29kZS5saW5lKCk7XG4gICAgICBjb2RlLm9wZW4oYCR7SlNJSV9TSU5WT0tFX0ZVTkN9KGApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2RlLm9wZW4oYCR7SlNJSV9TSU5WT0tFX1ZPSURfRlVOQ30oYCk7XG4gICAgfVxuXG4gICAgY29kZS5saW5lKGBcIiR7dGhpcy5wYXJlbnQucGFyZW50LmZxbn1cIixgKTtcbiAgICBjb2RlLmxpbmUoYFwiJHt0aGlzLnBhcmVudC5tZXRob2QubmFtZX1cIixgKTtcbiAgICBjb2RlLmxpbmUoYXJncyA/IGAke2FyZ3N9LGAgOiAnbmlsLCAvLyBubyBwYXJhbWV0ZXJzJyk7XG4gICAgaWYgKHRoaXMucmV0dXJuc1ZhbCkge1xuICAgICAgY29kZS5saW5lKGAmJHt0aGlzLnJldHVyblZhck5hbWV9LGApO1xuICAgIH1cblxuICAgIGNvZGUuY2xvc2UoYClgKTtcblxuICAgIGlmICh0aGlzLnJldHVybnNWYWwpIHtcbiAgICAgIGNvZGUubGluZSgpO1xuICAgICAgY29kZS5saW5lKGByZXR1cm4gJHt0aGlzLnJldHVyblZhck5hbWV9YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXQgcmV0dXJuVmFyTmFtZSgpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLl9yZXR1cm5WYXJOYW1lID09PSAnJykge1xuICAgICAgdGhpcy5fcmV0dXJuVmFyTmFtZSA9IHNsdWdpZnkoXG4gICAgICAgICdyZXR1cm5zJyxcbiAgICAgICAgdGhpcy5wYXJlbnQucGFyYW1ldGVycy5tYXAoKHApID0+IHAubmFtZSksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmV0dXJuVmFyTmFtZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGluU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBNZXRob2QuaXNNZXRob2QodGhpcy5wYXJlbnQubWV0aG9kKSAmJiB0aGlzLnBhcmVudC5tZXRob2Quc3RhdGljO1xuICB9XG59XG4iXX0=