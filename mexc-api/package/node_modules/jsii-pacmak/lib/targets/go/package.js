"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalPackage = exports.RootPackage = exports.Package = exports.GO_VERSION = exports.GOMOD_FILENAME = void 0;
const path_1 = require("path");
const semver = require("semver");
const version_1 = require("../../version");
const readme_file_1 = require("./readme-file");
const runtime_1 = require("./runtime");
const types_1 = require("./types");
const util_1 = require("./util");
const version_file_1 = require("./version-file");
exports.GOMOD_FILENAME = 'go.mod';
exports.GO_VERSION = '1.16';
// the name of a sub-package that includes internal type aliases it has to be
// "internal" so it not published.
const INTERNAL_PACKAGE_NAME = 'internal';
/*
 * Package represents a single `.go` source file within a package. This can be the root package file or a submodule
 */
class Package {
    constructor(typeSpec, submoduleSpec, packageName, filePath, moduleName, version, 
    // If no root is provided, this module is the root
    root) {
        this.typeSpec = typeSpec;
        this.submoduleSpec = submoduleSpec;
        this.packageName = packageName;
        this.filePath = filePath;
        this.moduleName = moduleName;
        this.version = version;
        this.embeddedTypes = {};
        this.directory = filePath;
        this.file = `${this.directory}/${packageName}.go`;
        this.root = root !== null && root !== void 0 ? root : this;
        this.submodules = this.submoduleSpec.map((sm) => new InternalPackage(this.root, this, sm));
        this.types = this.typeSpec.map((type) => {
            if (type.isInterfaceType() && type.datatype) {
                return new types_1.Struct(this, type);
            }
            else if (type.isInterfaceType()) {
                return new types_1.GoInterface(this, type);
            }
            else if (type.isClassType()) {
                return new types_1.GoClass(this, type);
            }
            else if (type.isEnumType()) {
                return new types_1.Enum(this, type);
            }
            throw new Error(`Type: ${type.name} with kind ${type.kind} is not a supported type`);
        });
    }
    /*
     * Packages within this module
     */
    get dependencies() {
        return util_1.flatMap(this.types, (t) => t.dependencies).filter((mod) => mod.packageName !== this.packageName);
    }
    /*
     * goModuleName returns the full path to the module name.
     * Used for import statements and go.mod generation
     */
    get goModuleName() {
        const moduleName = this.root.moduleName;
        const prefix = moduleName !== '' ? `${moduleName}/` : '';
        const rootPackageName = this.root.packageName;
        const versionSuffix = determineMajorVersionSuffix(this.version);
        const suffix = this.filePath !== '' ? `/${this.filePath}` : ``;
        return `${prefix}${rootPackageName}${versionSuffix}${suffix}`;
    }
    /*
     * The module names of this module's dependencies. Used for import statements.
     */
    get dependencyImports() {
        return new Set(this.dependencies.map((pkg) => pkg.goModuleName));
    }
    /*
     * Search for a type with a `fqn` within this. Searches all Children modules as well.
     */
    findType(fqn) {
        return util_1.findTypeInTree(this, fqn);
    }
    emit(context) {
        const { code } = context;
        code.openFile(this.file);
        this.emitHeader(code);
        this.emitImports(code);
        this.emitTypes(context);
        code.closeFile(this.file);
        this.emitGoInitFunction(context);
        this.emitSubmodules(context);
        this.emitInternal(context);
    }
    emitSubmodules(context) {
        for (const submodule of this.submodules) {
            submodule.emit(context);
        }
    }
    /**
     * Determines if `type` comes from a foreign package.
     */
    isExternalType(type) {
        return type.pkg !== this;
    }
    /**
     * Returns the name of the embed field used to embed a base class/interface in a
     * struct.
     *
     * @returns If the base is in the same package, returns the proxy name of the
     * base under `embed`, otherwise returns a unique symbol under `embed` and the
     * original interface reference under `original`.
     *
     * @param type The base type we want to embed
     */
    resolveEmbeddedType(type) {
        if (!this.isExternalType(type)) {
            return {
                embed: type.proxyName,
                fieldName: type.proxyName,
            };
        }
        const exists = this.embeddedTypes[type.fqn];
        if (exists) {
            return exists;
        }
        const typeref = new types_1.GoTypeRef(this.root, type.type.reference);
        const original = typeref.scopedName(this);
        const slug = original.replace(/[^A-Za-z0-9]/g, '');
        const aliasName = `Type__${slug}`;
        this.embeddedTypes[type.fqn] = {
            foriegnTypeName: original,
            foriegnType: typeref,
            fieldName: aliasName,
            embed: `${INTERNAL_PACKAGE_NAME}.${aliasName}`,
        };
        return this.resolveEmbeddedType(type);
    }
    emitHeader(code) {
        code.line(`package ${this.packageName}`);
        code.line();
    }
    get specialDependencies() {
        return this.types
            .map((t) => t.specialDependencies)
            .reduce((acc, elt) => ({
            runtime: acc.runtime || elt.runtime,
            init: acc.init || elt.init,
            internal: acc.internal || elt.internal,
            time: acc.time || elt.time,
        }), { runtime: false, init: false, internal: false, time: false });
    }
    /**
     * Emits a `func init() { ... }` in a dedicated file (so we don't have to
     * worry about what needs to be imported and whatnot). This function is
     * responsible for correctly initializing the module, including registering
     * the declared types with the jsii runtime for go.
     */
    emitGoInitFunction({ code }) {
        // We don't emit anything if there are not types in this (sub)module. This
        // avoids registering an `init` function that does nothing, which is poor
        // form. It also saves us from "imported but unused" errors that would arise
        // as a consequence.
        if (this.types.length > 0) {
            const initFile = path_1.join(path_1.dirname(this.file), `${path_1.basename(this.file, '.go')}.init.go`);
            code.openFile(initFile);
            code.line(`package ${this.packageName}`);
            code.line();
            importGoModules(code, [GO_REFLECT, JSII_RT_MODULE]);
            code.line();
            code.openBlock('func init()');
            for (const type of this.types) {
                type.emitRegistration(code);
            }
            code.closeBlock();
            code.closeFile(initFile);
        }
    }
    emitImports(code) {
        const toImport = new Array();
        const specialDeps = this.specialDependencies;
        if (specialDeps.time) {
            toImport.push({ module: 'time' });
        }
        if (specialDeps.runtime) {
            toImport.push(JSII_RT_MODULE);
        }
        if (specialDeps.init) {
            toImport.push({
                alias: runtime_1.JSII_INIT_ALIAS,
                module: `${this.root.goModuleName}/${runtime_1.JSII_INIT_PACKAGE}`,
            });
        }
        if (specialDeps.internal) {
            toImport.push({
                module: `${this.goModuleName}/${INTERNAL_PACKAGE_NAME}`,
            });
        }
        for (const packageName of this.dependencyImports) {
            // If the module is the same as the current one being written, don't emit an import statement
            if (packageName !== this.packageName) {
                toImport.push({ module: packageName });
            }
        }
        importGoModules(code, toImport);
        code.line();
    }
    emitTypes(context) {
        for (const type of this.types) {
            type.emit(context);
        }
    }
    emitInternal(context) {
        const aliases = Object.values(this.embeddedTypes);
        if (aliases.length === 0) {
            return;
        }
        const code = context.code;
        const fileName = path_1.join(this.directory, INTERNAL_PACKAGE_NAME, 'types.go');
        code.openFile(fileName);
        code.line(`package ${INTERNAL_PACKAGE_NAME}`);
        const imports = new Set();
        for (const alias of aliases) {
            if (!alias.foriegnType) {
                continue;
            }
            for (const pkg of alias.foriegnType.dependencies) {
                imports.add(pkg.goModuleName);
            }
        }
        code.open('import (');
        for (const imprt of imports) {
            code.line(`"${imprt}"`);
        }
        code.close(')');
        for (const alias of aliases) {
            code.line(`type ${alias.fieldName} = ${alias.foriegnTypeName}`);
        }
        code.closeFile(fileName);
    }
}
exports.Package = Package;
/*
 * RootPackage corresponds to JSII module.
 *
 * Extends `Package` for root source package emit logic
 */
class RootPackage extends Package {
    constructor(assembly) {
        var _a, _b, _c, _d, _e;
        const goConfig = (_b = (_a = assembly.targets) === null || _a === void 0 ? void 0 : _a.go) !== null && _b !== void 0 ? _b : {};
        const packageName = util_1.goPackageNameForAssembly(assembly);
        const filePath = '';
        const moduleName = (_c = goConfig.moduleName) !== null && _c !== void 0 ? _c : '';
        const version = `${assembly.version}${(_d = goConfig.versionSuffix) !== null && _d !== void 0 ? _d : ''}`;
        super(assembly.types, assembly.submodules, packageName, filePath, moduleName, version);
        this.assembly = assembly;
        this.version = version;
        this.versionFile = new version_file_1.VersionFile(this.version);
        if ((_e = this.assembly.readme) === null || _e === void 0 ? void 0 : _e.markdown) {
            this.readme = new readme_file_1.ReadmeFile(this.packageName, this.assembly.readme.markdown);
        }
    }
    emit(context) {
        var _a;
        super.emit(context);
        this.emitJsiiPackage(context);
        (_a = this.readme) === null || _a === void 0 ? void 0 : _a.emit(context);
        this.emitGomod(context.code);
        this.versionFile.emit(context.code);
    }
    emitGomod(code) {
        code.openFile(exports.GOMOD_FILENAME);
        code.line(`module ${this.goModuleName}`);
        code.line();
        code.line(`go ${exports.GO_VERSION}`);
        code.line();
        code.open('require (');
        // Strip " (build abcdef)" from the jsii version
        code.line(`${runtime_1.JSII_RT_MODULE_NAME} v${version_1.VERSION}`);
        const dependencies = this.packageDependencies;
        for (const dep of dependencies) {
            code.line(`${dep.goModuleName} v${dep.version}`);
        }
        indirectDependencies(dependencies, new Set(dependencies.map((dep) => dep.goModuleName)));
        code.close(')');
        code.closeFile(exports.GOMOD_FILENAME);
        /**
         * Emits indirect dependency declarations, which are helpful to make IDEs at
         * ease with the codebase.
         */
        function indirectDependencies(pkgs, alreadyEmitted) {
            for (const pkg of pkgs) {
                const deps = pkg.packageDependencies;
                for (const dep of deps) {
                    if (alreadyEmitted.has(dep.goModuleName)) {
                        continue;
                    }
                    alreadyEmitted.add(dep.goModuleName);
                    code.line(`${dep.goModuleName} v${dep.version} // indirect`);
                }
                indirectDependencies(deps, alreadyEmitted);
            }
        }
    }
    /*
     * Override package findType for root Package.
     *
     * This allows resolving type references from other JSII modules
     */
    findType(fqn) {
        return this.packageDependencies.reduce((accum, current) => {
            if (accum) {
                return accum;
            }
            return current.findType(fqn);
        }, super.findType(fqn));
    }
    /*
     * Get all JSII module dependencies of the package being generated
     */
    get packageDependencies() {
        return this.assembly.dependencies.map((dep) => new RootPackage(dep.assembly));
    }
    emitHeader(code) {
        if (this.assembly.description !== '') {
            code.line(`// ${this.assembly.description}`);
        }
        code.line(`package ${this.packageName}`);
        code.line();
    }
    emitJsiiPackage({ code }) {
        const dependencies = this.packageDependencies.sort((l, r) => l.moduleName.localeCompare(r.moduleName));
        const file = path_1.join(runtime_1.JSII_INIT_PACKAGE, `${runtime_1.JSII_INIT_PACKAGE}.go`);
        code.openFile(file);
        code.line(`// Package ${runtime_1.JSII_INIT_PACKAGE} contains the functionaility needed for jsii packages to`);
        code.line('// initialize their dependencies and themselves. Users should never need to use this package');
        code.line('// directly. If you find you need to - please report a bug at');
        code.line('// https://github.com/aws/jsii/issues/new/choose');
        code.line(`package ${runtime_1.JSII_INIT_PACKAGE}`);
        code.line();
        const toImport = [
            JSII_RT_MODULE,
            { module: 'embed', alias: '_' },
        ];
        if (dependencies.length > 0) {
            for (const pkg of dependencies) {
                toImport.push({
                    alias: pkg.packageName,
                    module: `${pkg.root.goModuleName}/${runtime_1.JSII_INIT_PACKAGE}`,
                });
            }
        }
        importGoModules(code, toImport);
        code.line();
        code.line(`//go:embed ${util_1.tarballName(this.assembly)}`);
        code.line('var tarball []byte');
        code.line();
        code.line(`// ${runtime_1.JSII_INIT_FUNC} loads the necessary packages in the @jsii/kernel to support the enclosing module.`);
        code.line('// The implementation is idempotent (and hence safe to be called over and over).');
        code.open(`func ${runtime_1.JSII_INIT_FUNC}() {`);
        if (dependencies.length > 0) {
            code.line('// Ensure all dependencies are initialized');
            for (const pkg of this.packageDependencies) {
                code.line(`${pkg.packageName}.${runtime_1.JSII_INIT_FUNC}()`);
            }
            code.line();
        }
        code.line('// Load this library into the kernel');
        code.line(`${runtime_1.JSII_RT_ALIAS}.Load("${this.assembly.name}", "${this.assembly.version}", tarball)`);
        code.close('}');
        code.closeFile(file);
    }
}
exports.RootPackage = RootPackage;
/*
 * InternalPackage refers to any go package within a given JSII module.
 */
class InternalPackage extends Package {
    constructor(root, parent, assembly) {
        const packageName = util_1.goPackageNameForAssembly(assembly);
        const filePath = parent === root ? packageName : `${parent.filePath}/${packageName}`;
        super(assembly.types, assembly.submodules, packageName, filePath, root.moduleName, root.version, root);
        this.parent = parent;
    }
}
exports.InternalPackage = InternalPackage;
/**
 * Go requires that when a module major version is v2.0 and above, the module
 * name will have a `/vNN` suffix (where `NN` is the major version).
 *
 * > Starting with major version 2, module paths must have a major version
 * > suffix like /v2 that matches the major version. For example, if a module
 * > has the path example.com/mod at v1.0.0, it must have the path
 * > example.com/mod/v2 at version v2.0.0.
 *
 * @see https://golang.org/ref/mod#major-version-suffixes
 * @param version The module version (e.g. `2.3.0`)
 * @returns a suffix to append to the module name in the form (`/vNN`). If the
 * module version is `0.x` or `1.x`, returns an empty string.
 */
function determineMajorVersionSuffix(version) {
    const sv = semver.parse(version);
    if (!sv) {
        throw new Error(`Unable to parse version "${version}" as a semantic version`);
    }
    // suffix is only needed for 2.0 and above
    if (sv.major <= 1) {
        return '';
    }
    return `/v${sv.major}`;
}
const JSII_RT_MODULE = {
    alias: runtime_1.JSII_RT_ALIAS,
    module: runtime_1.JSII_RT_PACKAGE_NAME,
};
const GO_REFLECT = { module: 'reflect' };
function importGoModules(code, modules) {
    if (modules.length === 0) {
        return;
    }
    const aliasSize = Math.max(...modules.map((mod) => { var _a, _b; return (_b = (_a = mod.alias) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0; }));
    code.open('import (');
    const sortedModules = Array.from(modules).sort(compareImportedModules);
    for (let i = 0; i < sortedModules.length; i++) {
        const mod = sortedModules[i];
        // Separate module categories from each other modules with a blank line.
        if (i > 0 &&
            (isBuiltIn(mod) !== isBuiltIn(sortedModules[i - 1]) ||
                isSpecial(mod) !== isSpecial(sortedModules[i - 1]))) {
            code.line();
        }
        if (mod.alias) {
            code.line(`${mod.alias.padEnd(aliasSize, ' ')} "${mod.module}"`);
        }
        else {
            code.line(`"${mod.module}"`);
        }
    }
    code.close(')');
    /**
     * A comparator for `ImportedModule` instances such that built-in modules
     * always appear first, followed by the rest. Then within these two groups,
     * aliased imports appear first, followed by the rest.
     */
    function compareImportedModules(l, r) {
        const lBuiltIn = isBuiltIn(l);
        const rBuiltIn = isBuiltIn(r);
        if (lBuiltIn && !rBuiltIn) {
            return -1;
        }
        if (!lBuiltIn && rBuiltIn) {
            return 1;
        }
        const lSpecial = isSpecial(l);
        const rSpecial = isSpecial(r);
        if (lSpecial && !rSpecial) {
            return -1;
        }
        if (!lSpecial && rSpecial) {
            return 1;
        }
        return l.module.localeCompare(r.module);
    }
    function isBuiltIn(mod) {
        // Standard library modules don't have any "." in their path, whereas any
        // other module has a DNS portion in them, which must include a ".".
        return !mod.module.includes('.');
    }
    function isSpecial(mod) {
        return mod.alias === runtime_1.JSII_RT_ALIAS || mod.alias === runtime_1.JSII_INIT_ALIAS;
    }
}
//# sourceMappingURL=data:application/json;base64,