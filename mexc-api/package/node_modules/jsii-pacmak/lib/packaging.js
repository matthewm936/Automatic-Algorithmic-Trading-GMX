"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsiiModule = void 0;
const os = require("os");
const path = require("path");
const logging = require("../lib/logging");
const util_1 = require("./util");
class JsiiModule {
    constructor(options) {
        var _a;
        this.name = options.name;
        this.moduleDirectory = options.moduleDirectory;
        this.availableTargets = options.availableTargets;
        this.outputDirectory = options.defaultOutputDirectory;
        this.dependencyNames = (_a = options.dependencyNames) !== null && _a !== void 0 ? _a : [];
    }
    /**
     * Prepare an NPM package from this source module
     */
    async npmPack() {
        this._tarball = await util_1.Scratch.make(async (tmpdir) => {
            // Quoting (JSON-stringifying) the module directory in order to avoid
            // problems if there are spaces or other special characters in the path.
            const args = ['pack', JSON.stringify(this.moduleDirectory)];
            if (logging.level >= logging.LEVEL_VERBOSE) {
                args.push('--loglevel=verbose');
            }
            const out = await util_1.shell('npm', args, { cwd: tmpdir });
            // Take only the last line of npm pack which should contain the
            // tarball name. otherwise, there can be a lot of extra noise there
            // from scripts that emit to STDOUT.
            const lines = out.trim().split(os.EOL);
            const lastLine = lines[lines.length - 1].trim();
            if (!lastLine.endsWith('.tgz') && !lastLine.endsWith('.tar.gz')) {
                throw new Error(`npm pack did not produce tarball from ${this.moduleDirectory} into ${tmpdir} (output was ${JSON.stringify(lines)})`);
            }
            return path.resolve(tmpdir, lastLine);
        });
    }
    get tarball() {
        if (!this._tarball) {
            throw new Error('Tarball not available yet, call npmPack() first');
        }
        return this._tarball.object;
    }
    async load(system, validate = true) {
        return system
            .loadModule(this.moduleDirectory, { validate })
            .then((assembly) => (this._assembly = assembly));
    }
    get assembly() {
        if (!this._assembly) {
            throw new Error('Assembly not available yet, call load() first');
        }
        return this._assembly;
    }
    async cleanup() {
        if (this._tarball) {
            await this._tarball.cleanup();
        }
    }
}
exports.JsiiModule = JsiiModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGFja2FnaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFFN0IsMENBQTBDO0FBQzFDLGlDQUF3QztBQTRCeEMsTUFBYSxVQUFVO0lBVXJCLFlBQW1CLE9BQTBCOztRQUMzQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDO1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFDakQsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUM7UUFDdEQsSUFBSSxDQUFDLGVBQWUsU0FBRyxPQUFPLENBQUMsZUFBZSxtQ0FBSSxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLE9BQU87UUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLGNBQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2xELHFFQUFxRTtZQUNyRSx3RUFBd0U7WUFDeEUsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxZQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELCtEQUErRDtZQUMvRCxtRUFBbUU7WUFDbkUsb0NBQW9DO1lBQ3BDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBRWhELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDL0QsTUFBTSxJQUFJLEtBQUssQ0FDYix5Q0FDRSxJQUFJLENBQUMsZUFDUCxTQUFTLE1BQU0sZ0JBQWdCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FDeEQsQ0FBQzthQUNIO1lBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFrQixFQUFFLFFBQVEsR0FBRyxJQUFJO1FBQ25ELE9BQU8sTUFBTTthQUNWLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUM7YUFDOUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztTQUNsRTtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDbEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUMvQjtJQUNILENBQUM7Q0FDRjtBQXpFRCxnQ0F5RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEFzc2VtYmx5LCBUeXBlU3lzdGVtIH0gZnJvbSAnanNpaS1yZWZsZWN0JztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCAqIGFzIGxvZ2dpbmcgZnJvbSAnLi4vbGliL2xvZ2dpbmcnO1xuaW1wb3J0IHsgU2NyYXRjaCwgc2hlbGwgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEpzaWlNb2R1bGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIG1vZHVsZVxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9kdWxlIGRpcmVjdG9yeVxuICAgKi9cbiAgbW9kdWxlRGlyZWN0b3J5OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIElkZW50aWZpZXIgb2YgdGhlIHRhcmdldHMgdG8gYnVpbGRcbiAgICovXG4gIGF2YWlsYWJsZVRhcmdldHM6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBPdXRwdXQgZGlyZWN0b3J5IHdoZXJlIHRvIHBhY2thZ2UgZXZlcnl0aGluZ1xuICAgKi9cbiAgZGVmYXVsdE91dHB1dERpcmVjdG9yeTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lcyBvZiBwYWNrYWdlcyB0aGlzIHBhY2thZ2UgZGVwZW5kcyBvbiwgaWYgYW55XG4gICAqL1xuICBkZXBlbmRlbmN5TmFtZXM/OiBzdHJpbmdbXTtcbn1cbmV4cG9ydCBjbGFzcyBKc2lpTW9kdWxlIHtcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGRlcGVuZGVuY3lOYW1lczogc3RyaW5nW107XG4gIHB1YmxpYyByZWFkb25seSBtb2R1bGVEaXJlY3Rvcnk6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGF2YWlsYWJsZVRhcmdldHM6IHN0cmluZ1tdO1xuICBwdWJsaWMgb3V0cHV0RGlyZWN0b3J5OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfdGFyYmFsbD86IFNjcmF0Y2g8c3RyaW5nPjtcbiAgcHVibGljIF9hc3NlbWJseT86IEFzc2VtYmx5O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBKc2lpTW9kdWxlT3B0aW9ucykge1xuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICB0aGlzLm1vZHVsZURpcmVjdG9yeSA9IG9wdGlvbnMubW9kdWxlRGlyZWN0b3J5O1xuICAgIHRoaXMuYXZhaWxhYmxlVGFyZ2V0cyA9IG9wdGlvbnMuYXZhaWxhYmxlVGFyZ2V0cztcbiAgICB0aGlzLm91dHB1dERpcmVjdG9yeSA9IG9wdGlvbnMuZGVmYXVsdE91dHB1dERpcmVjdG9yeTtcbiAgICB0aGlzLmRlcGVuZGVuY3lOYW1lcyA9IG9wdGlvbnMuZGVwZW5kZW5jeU5hbWVzID8/IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmUgYW4gTlBNIHBhY2thZ2UgZnJvbSB0aGlzIHNvdXJjZSBtb2R1bGVcbiAgICovXG4gIHB1YmxpYyBhc3luYyBucG1QYWNrKCkge1xuICAgIHRoaXMuX3RhcmJhbGwgPSBhd2FpdCBTY3JhdGNoLm1ha2UoYXN5bmMgKHRtcGRpcikgPT4ge1xuICAgICAgLy8gUXVvdGluZyAoSlNPTi1zdHJpbmdpZnlpbmcpIHRoZSBtb2R1bGUgZGlyZWN0b3J5IGluIG9yZGVyIHRvIGF2b2lkXG4gICAgICAvLyBwcm9ibGVtcyBpZiB0aGVyZSBhcmUgc3BhY2VzIG9yIG90aGVyIHNwZWNpYWwgY2hhcmFjdGVycyBpbiB0aGUgcGF0aC5cbiAgICAgIGNvbnN0IGFyZ3MgPSBbJ3BhY2snLCBKU09OLnN0cmluZ2lmeSh0aGlzLm1vZHVsZURpcmVjdG9yeSldO1xuICAgICAgaWYgKGxvZ2dpbmcubGV2ZWwgPj0gbG9nZ2luZy5MRVZFTF9WRVJCT1NFKSB7XG4gICAgICAgIGFyZ3MucHVzaCgnLS1sb2dsZXZlbD12ZXJib3NlJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBvdXQgPSBhd2FpdCBzaGVsbCgnbnBtJywgYXJncywgeyBjd2Q6IHRtcGRpciB9KTtcbiAgICAgIC8vIFRha2Ugb25seSB0aGUgbGFzdCBsaW5lIG9mIG5wbSBwYWNrIHdoaWNoIHNob3VsZCBjb250YWluIHRoZVxuICAgICAgLy8gdGFyYmFsbCBuYW1lLiBvdGhlcndpc2UsIHRoZXJlIGNhbiBiZSBhIGxvdCBvZiBleHRyYSBub2lzZSB0aGVyZVxuICAgICAgLy8gZnJvbSBzY3JpcHRzIHRoYXQgZW1pdCB0byBTVERPVVQuXG4gICAgICBjb25zdCBsaW5lcyA9IG91dC50cmltKCkuc3BsaXQob3MuRU9MKTtcbiAgICAgIGNvbnN0IGxhc3RMaW5lID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0udHJpbSgpO1xuXG4gICAgICBpZiAoIWxhc3RMaW5lLmVuZHNXaXRoKCcudGd6JykgJiYgIWxhc3RMaW5lLmVuZHNXaXRoKCcudGFyLmd6JykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBucG0gcGFjayBkaWQgbm90IHByb2R1Y2UgdGFyYmFsbCBmcm9tICR7XG4gICAgICAgICAgICB0aGlzLm1vZHVsZURpcmVjdG9yeVxuICAgICAgICAgIH0gaW50byAke3RtcGRpcn0gKG91dHB1dCB3YXMgJHtKU09OLnN0cmluZ2lmeShsaW5lcyl9KWAsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXRoLnJlc29sdmUodG1wZGlyLCBsYXN0TGluZSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHRhcmJhbGwoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuX3RhcmJhbGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGFyYmFsbCBub3QgYXZhaWxhYmxlIHlldCwgY2FsbCBucG1QYWNrKCkgZmlyc3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RhcmJhbGwub2JqZWN0O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxvYWQoc3lzdGVtOiBUeXBlU3lzdGVtLCB2YWxpZGF0ZSA9IHRydWUpIHtcbiAgICByZXR1cm4gc3lzdGVtXG4gICAgICAubG9hZE1vZHVsZSh0aGlzLm1vZHVsZURpcmVjdG9yeSwgeyB2YWxpZGF0ZSB9KVxuICAgICAgLnRoZW4oKGFzc2VtYmx5KSA9PiAodGhpcy5fYXNzZW1ibHkgPSBhc3NlbWJseSkpO1xuICB9XG5cbiAgcHVibGljIGdldCBhc3NlbWJseSgpOiBBc3NlbWJseSB7XG4gICAgaWYgKCF0aGlzLl9hc3NlbWJseSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBc3NlbWJseSBub3QgYXZhaWxhYmxlIHlldCwgY2FsbCBsb2FkKCkgZmlyc3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2Fzc2VtYmx5O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGNsZWFudXAoKSB7XG4gICAgaWYgKHRoaXMuX3RhcmJhbGwpIHtcbiAgICAgIGF3YWl0IHRoaXMuX3RhcmJhbGwuY2xlYW51cCgpO1xuICAgIH1cbiAgfVxufVxuIl19